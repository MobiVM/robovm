package: org.robovm.apple.imageio
include: [foundation.yaml, corefoundation.yaml, coregraphics.yaml]
library: ImageIO
framework: ImageIO
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/ImageIO.framework/Headers/ImageIO.h
typedefs: {}
private_typedefs:
    '__CFString *': String
    '__CFData': NSData
    '__CFURL': NSURL
    '__CFDictionary': NSDictionary
    '__CFArray': NSArray
    
enums:
    CGImageMetadataType: {}
    CGImageMetadataErrors: {}
    CGImagePropertyOrientation: {}
    CGImageSourceStatus: {}
    CGImageAnimationStatus: {prefix: kCGImageAnimationStatus_}
    CGImagePropertyTGACompression: {prefix: kCGImageTGACompression}
classes:
    # Opaque types
    CGImageDestination:
        extends: CFType
    CGImageMetadataTag:
        extends: CFType
    CGImageMetadata:
        extends: CFType
    CGImageSource:
        extends: CFType
    
protocols: {}

functions:
    (CG.*)GetTypeID:
        class: '#{g[0]}'
        name: getClassTypeID

    # CGImageDestination
    CGImageDestinationCopy(TypeIdentifiers):
        class: CGImageDestination
        name: 'get#{g[0]}'
        return_type: List<String>
        return_marshaler: CFArray.AsStringListMarshaler
    CGImageDestinationCreate.*:
        class: CGImageDestination
        name: create
        return_marshaler: CFType.NoRetainMarshaler
    CGImageDestination(CopyImageSource):
        class: CGImageDestination
        name: '#{g[0]}'
        throws: NSErrorException
        parameters:
            options:
                type: CGImageDestinationCopySourceOptions
    CGImageDestination(SetProperties|AddImage|AddImageFromSource):
        class: CGImageDestination
        name: '#{g[0]}'
        parameters:
            properties:
                type: CGImageDestinationProperties
    CGImageDestinationFinalize:
        class: CGImageDestination
        name: finalizeDestination
    CGImageDestination(.*):
        class: CGImageDestination
        name: '#{g[0]}'
    
    # CGImageMetadataTag
    CGImageMetadataTag(Create):
        class: CGImageMetadataTag
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
    CGImageMetadataTagCopy(Qualifiers):
        class: CGImageMetadataTag
        name: 'get#{g[0]}'
        return_type: List<String>
        return_marshaler: CFArray.AsStringListMarshaler
    CGImageMetadataTagCopy(Value):
        class: CGImageMetadataTag
        name: 'get#{g[0]}'
    CGImageMetadataTagCopy(.*):
        class: CGImageMetadataTag
        name: 'get#{g[0]}'
        return_marshaler: CFString.AsStringNoRetainMarshaler
    CGImageMetadataTag(.*):
        class: CGImageMetadataTag
        name: '#{g[0]}'
    
    # CGImageMetadata
    CGImageMetadataCreateMutableCopy:
        class: CGImageMetadata
        name: createCopy
        static: true
        return_marshaler: CFType.NoRetainMarshaler
    CGImageMetadataCreateMutable:
        class: CGImageMetadata
        name: create
        static: true
        return_marshaler: CFType.NoRetainMarshaler
    CGImageMetadataCopy(Tags):
        class: CGImageMetadata
        name: 'get#{g[0]}'
        return_type: List<CGImageMetadataTag>
        return_marshaler: CGImageMetadataTag.AsListMarshaler
    CGImageMetadataCopy(Tag)WithPath:
        class: CGImageMetadata
        name: 'get#{g[0]}AtPath'
        return_marshaler: CFType.NoRetainMarshaler
    CGImageMetadataCopy(StringValue)WithPath:
        class: CGImageMetadata
        name: 'get#{g[0]}AtPath'
        return_marshaler: CFString.AsStringNoRetainMarshaler
    CGImageMetadataSet(.*)WithPath:
        class: CGImageMetadata
        name: 'set#{g[0]}AtPath'
    CGImageMetadataRemove(.*)WithPath:
        class: CGImageMetadata
        name: 'remove#{g[0]}AtPath'
    CGImageMetadata(RegisterNamespaceForPrefix):
        class: CGImageMetadata
        name: '#{g[0]}'
        throws: NSErrorException
    CGImageMetadata(EnumerateTags)UsingBlock:
        class: CGImageMetadata
        name: '#{g[0]}'
        parameters:
            options:
                type: CGImageMetadataEnumerationOptions
            block:
                type: '@Block VoidBlock2<String, CGImageMetadataTag>'
    CGImageMetadata(CreateFromXMPData):
        class: CGImageMetadata
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
    CGImageMetadataCopyTagMatchingImageProperty:
        exclude: true
    CGImageMetadataSetValueMatchingImageProperty:
        exclude: true
    CGImageMetadata(CreateXMPData):
        class: CGImageMetadata
        name: '#{g[0]}'
        return_marshaler: NSObject.NoRetainMarshaler
    CGImageMetadata(.*):
        class: CGImageMetadata
        name: '#{g[0]}'
    
    # CGImageSource
    CGImageSourceCopy(TypeIdentifiers):
        class: CGImageSource
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(CFArray.AsStringListMarshaler.class) List<String>'
    CGImageSourceCopy(Properties).*:
        class: CGImageSource
        name: 'get#{g[0]}'
        return_type: CGImageProperties
        parameters:
            options:
                type: CGImageSourceOptions
    CGImageSourceCopy(Metadata)AtIndex:
        class: CGImageSource
        name: 'get#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            options:
                type: CGImageSourceOptions
    CGImageSource(Create.*)AtIndex:
        class: CGImageSource
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            options:
                type: CGImageSourceOptions
    CGImageSource(CreateIncremental):
        class: CGImageSource
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            options:
                type: CGImageSourceOptions
    CGImageSource(UpdateData.*):
        class: CGImageSource
        name: '#{g[0]}'
        parameters:
            final:
                name: isFinal
    CGImageSourceCreate.*:
        class: CGImageSource
        name: create
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            options:
                type: CGImageSourceOptions
    CGImageSource(.*):
        class: CGImageSource
        name: '#{g[0]}'

    CGAnimateImageAtURLWithBlock:
        class: CGImageAnimation
        name: animateImages
        return_type: CGImageAnimationStatus
        parameters:
            options:
                type: CGImageAnimationOptions
    CGAnimateImageDataWithBlock:
        class: CGImageAnimation
        name: animateImages
        return_type: CGImageAnimationStatus
        parameters:
            options:
                type: CGImageAnimationOptions

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?CG.*):
        class: ImageIO
        name: 'Function__#{g[0]}'

values:
    # CGImageDestination
    kCGImage(DestinationMetadata|DestinationMergeMetadata|MetadataShouldExcludeXMP|MetadataShouldExcludeGPS|DestinationDateTime|DestinationOrientation):
        dictionary: CGImageDestinationCopySourceOptions
        name: '#{g[0]}'
        type: CFString
        methods:
            DestinationMetadata:
                name: metadata
                type: CGImageMetadata
            DestinationMergeMetadata:
                name: mergesMetadata
                type: boolean
            MetadataShouldExcludeXMP:
                name: shouldExcludeXMP
                type: boolean
            MetadataShouldExcludeGPS:
                name: shouldExcludeGPS
                type: boolean
            DestinationDateTime:
                name: dateTime
                type: String
            DestinationOrientation:
                name: orientation
                type: CGImagePropertyOrientation
    kCGImageDestination(.*):
        dictionary: CGImageDestinationProperties
        name: '#{g[0]}'
        type: CFString
        extends: CGImageProperties
        methods:
            LossyCompressionQuality:
                type: double
                default: 1
            BackgroundColor:
                type: CGColor
            ImageMaxPixelSize:
                name: maxPixelSize
                type: long
            EmbedThumbnail:
                name: embedsThumbnail
                type: boolean

    # CGImageMetadata
    kCGImageMetadata(EnumerateRecursively):
        dictionary: CGImageMetadataEnumerationOptions
        name: '#{g[0]}'
        type: CFString
        methods:
            EnumerateRecursively:
                name: enumeratesRecursively
                type: boolean
    kCGImageMetadataNamespace(.*):
        enum: CGImageMetadataNamespace
        name: '#{g[0]}'
        type: CFString
    kCGImageMetadataPrefix(.*):
        enum: CGImageMetadataPrefix
        name: '#{g[0]}'
        type: CFString

    # CGImageSource
    kCGImageSource(.*):
        dictionary: CGImageSourceOptions
        name: '#{g[0]}'
        type: CFString
        methods:
            TypeIdentifierHint:
                type: String
            ShouldCache:
                type: boolean
            ShouldCacheImmediately:
                type: boolean
            ShouldAllowFloat:
                type: boolean
            CreateThumbnailFromImageIfAbsent:
                name: shouldCreateThumbnailFromImageIfAbsent
                type: boolean
            CreateThumbnailFromImageAlwaysKey:
                name: shouldCreateThumbnailAlwaysFromImage
                type: boolean
            ThumbnailMaxPixelSize:
                type: long
            CreateThumbnailWithTransform:
                name: shouldCreateThumbnailWithTransform
                type: boolean
            SubsampleFactor:
                type: int

    # CGImageProperty
    kCGImageProperty(8BIMDictionary):
        dictionary: CGImageProperties
        name: '_#{g[0]}'
        type: CFString
    kCGImageProperty(.*Dictionary):
        dictionary: CGImageProperties
        name: '#{g[0]}'
        type: CFString
        constructor_visibility: public
        methods:
            TIFFDictionary:
                name: TIFFData
                type: CGImagePropertyTIFFData
            GIFDictionary:
                name: GIFData
                type: CGImagePropertyGIFData
            JFIFDictionary:
                name: JFIFData
                type: CGImagePropertyJFIFData
            ExifDictionary:
                name: ExifData
                type: CGImagePropertyExifData
            PNGDictionary:
                name: PNGData
                type: CGImagePropertyPNGData
            IPTCDictionary:
                name: IPTCData
                type: CGImagePropertyIPTCData
            GPSDictionary:
                name: GPSData
                type: CGImagePropertyGPSData
            RawDictionary:
                name: RawData
                type: CFDictionary
            CIFFDictionary:
                name: CIFFData
                type: CGImagePropertyCIFFData
            _8BIMDictionary:
                name: 8BIMData
                param_name: data
                type: CGImageProperty8BIMData
            DNGDictionary:
                name: DNGData
                type: CGImagePropertyDNGData
            ExifAuxDictionary:
                name: ExifAuxData
                type: CGImagePropertyExifAuxData
            MakerCanonDictionary:
                name: MakerCanonData
                type: CGImagePropertyCanonData
            MakerNikonDictionary:
                name: MakerNikonData
                type: CGImagePropertyNikonData
            MakerMinoltaDictionary:
                name: MakerMinoltaData
                type: CFDictionary
            MakerFujiDictionary:
                name: MakerFujiData
                type: CFDictionary
            MakerOlympusDictionary:
                name: MakerOlympusData
                type: CFDictionary
            MakerPentaxDictionary:
                name: MakerPentaxData
                type: CFDictionary
            FileSize:
                type: long
            DPIHeight:
                type: long
            DPIWidth:
                type: long
            PixelWidth:
                type: long
            PixelHeight:
                type: long
            Depth:
                type: int
            Orientation:
                type: CGImagePropertyOrientation
            IsFloat:
                name: containsFloatingPointPixels
                type: boolean
            IsIndexed:
                type: boolean
            HasAlpha:
                name: hasAlphaChannel
                type: boolean
            ColorModel:
                type: CGImagePropertyColorModel
            ProfileName:
                name: ICCProfile
                type: String
    kCGImagePropertyColorModel(.+):
        enum: CGImagePropertyColorModel
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyTIFF(.*):
        dictionary: CGImagePropertyTIFFData
        enum: CGImagePropertyTIFF
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyJFIF(.*):
        dictionary: CGImagePropertyJFIFData
        enum: CGImagePropertyJFIF
        name: '#{g[0]}'
        type: CFString
        
    kCGImagePropertyExifAux(.*):
        dictionary: CGImagePropertyExifAuxData
        enum: CGImagePropertyExifAux
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyExifSubsecTimeOrginal:
        exclude: true
    kCGImagePropertyExif(.*):
        dictionary: CGImagePropertyExifData
        enum: CGImagePropertyExif
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyGIF(.*):
        dictionary: CGImagePropertyGIFData
        enum: CGImagePropertyGIF
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyAPNG(.*):
        dictionary: CGImagePropertyPNGData
        enum: CGImagePropertyPNG
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyPNG(.*):
        dictionary: CGImagePropertyPNGData
        enum: CGImagePropertyPNG
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyIPTCContactInfo(.*):
        dictionary: CGImagePropertyIPTCContactInfoData
        enum: CGImagePropertyIPTCContactInfo
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyIPTC(.*):
        dictionary: CGImagePropertyIPTCData
        enum: CGImagePropertyIPTC
        name: '#{g[0]}'
        type: CFString
        methods:
            CreatorContactInfo:
                type: CGImagePropertyIPTCContactInfoData
    kCGImageProperty8BIM(.*):
        dictionary: CGImageProperty8BIMData
        enum: CGImageProperty8BIM
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyGPS(.*):
        dictionary: CGImagePropertyGPSData
        enum: CGImagePropertyGPS
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyDNG(.*):
        dictionary: CGImagePropertyDNGData
        enum: CGImagePropertyDNG
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyCIFF(.*):
        dictionary: CGImagePropertyCIFFData
        enum: CGImagePropertyCIFF
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyMakerNikon(.*):
        dictionary: CGImagePropertyNikonData
        enum: CGImagePropertyNikon
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyMakerCanon(.*):
        dictionary: CGImagePropertyCanonData
        enum: CGImagePropertyCanon
        name: '#{g[0]}'
        type: CFString
    kCGImagePropertyOpenEXR(.*):
        dictionary: CGImagePropertyOpenEXRData
        enum: CGImagePropertyOpenEXR
        name: '#{g[0]}'
        type: CFString
    kCGImageProperty(.*):
        dictionary: CGImageProperties
        name: '#{g[0]}'
        type: CFString

    # GImageAuxiliaryDataType
    kCGImageAuxiliaryDataType(.*):
        dictionary: GImageAuxiliaryDataType
        name: '#{g[0]}'
        type: CFString

    # CGImageAuxiliaryDataInfoData
    kCGImageAuxiliaryDataInfo(.*):
        dictionary: CGImageAuxiliaryDataInfoData
        name: '#{g[0]}'
        type: CFString

    # CGImageAnimation
    kCGImageAnimation(.*):
        dictionary: CGImageAnimationOptions
        name: '#{g[0]}'
        type: CFString
        methods:
            StartIndex:
                type: CFNumber
            DelayTime:
                type: CFNumber
            LoopCount:
                type: CFNumber

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?CG.*):
        class: ImageIO
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?CG.*):
        class: ImageIO
        name: 'Constant__#{g[0]}'
