package: org.robovm.apple.avfoundation
include:
    - foundation
    - corefoundation
    - dispatch
    - coreanimation
    - coreimage
    - coregraphics
    - coreaudio
    - coremedia
    - corevideo
    - mediatoolbox
    - audiotoolbox
    - coremidi
    - uikit
library: AVFoundation
framework: AVFoundation
internal_frameworks: [AVFAudio]

clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/AVFoundation.framework/Headers/AVFoundation.h
    - /System/Library/Frameworks/AVFoundation.framework/Headers/AVBase.h
    - /System/Library/Frameworks/AVFoundation.framework/Headers/AVFAudio.h
typedefs:
private_typedefs:
    CGImagePropertyOrientation: org.robovm.apple.imageio.CGImagePropertyOrientation
    # following can't be used as Enum from CoreMedia. As it defines only invalid state
    # and will fail on any valid track id
    CMPersistentTrackID: int
    UTType *: org.robovm.apple.uniformtypeid.UTType
enums:
    AVAssetReferenceRestrictions: {}
    AVAssetExportSessionStatus: {}
    AVAssetImageGeneratorResult: {}
    AVAssetReaderStatus: {}
    AVAssetWriterStatus: {}
    AVAudio3DMixingRenderingAlgorithm: {}
    AVAudioCommonFormat: { suffix: Format }
    AVAudioConverterInputStatus: {}
    AVAudioConverterOutputStatus: {}
    AVAudioConverterPrimeMethod: {}
    AVAudioEnvironmentDistanceAttenuationModel: {}
    AVAudioPlayerNodeBufferOptions: {}
    AVAudioSessionInterruptionOptions: { prefix: AVAudioSessionInterruptionOption }
    AVAudioSessionSetActiveOptions: { prefix: AVAudioSessionSetActiveOption }
    AVAudioSessionPortOverride: {}
    AVAudioSessionRouteChangeReason: {}
    AVAudioSessionCategoryOptions: {}
    AVAudioSessionInterruptionType: {}
    AVAudioSessionErrorCode: { prefix: AVAudioSessionErrorCode, AVAudioSessionErrorInsufficientPriority: InsufficientPriority }
    AVAudioSessionRecordPermission: {}
    AVAudioSessionSilenceSecondaryAudioHintType: {}
    AVAudioQuality: {}
    AVAudioUnitReverbPreset: {}
    AVAudioUnitEQFilterType: {}
    AVAudioUnitDistortionPreset: {}
    AVAuthorizationStatus: {}
    AVCaptureDevicePosition: {}
    AVCaptureFlashMode: {}
    AVCaptureTorchMode: {}
    AVCaptureFocusMode: {}
    AVCaptureAutoFocusRangeRestriction: {}
    AVCaptureAutoFocusSystem: {}
    AVCaptureExposureMode: {}
    AVCaptureDeviceTransportControlsPlaybackMode: {}
    AVCaptureSessionInterruptionReason: {}
    AVCaptureVideoOrientation: {}
    AVCaptureVideoStabilizationMode: {}
    AVCaptureWhiteBalanceMode: {}
    AVError: {name: AVErrorCode, prefix: AVError}
    AVKeyValueStatus: {}
    AVMusicSequenceLoadOptions: {skip_none: true}
    AVPlayerStatus: {}
    AVPlayerActionAtItemEnd: {}
    AVPlayerItemStatus: {}
    AVQueuedSampleBufferRenderingStatus: {}
    AVSampleBufferDisplayLayerQueueManagement: {}
    AVSpeechBoundary: {}
    AVSpeechSynthesisVoiceQuality: {}
    AVVideoFieldMode: {}
    AVPlayerTimeControlStatus: {}
    AVAudioSessionIOType : {}
    AVCaptureColorSpace : {}
    AVPlayerLooperStatus : {}
    AVMusicTrackLoopCount: {}
    AVContentKeyRequestStatus: {}
    AVAudioEngineManualRenderingError: {} #since 11.0
    AVAudioEngineManualRenderingStatus: {} #since 11.0
    AVAudioEngineManualRenderingMode: {} #since 11.0
    AVAudioSessionRouteSharingPolicy: {} #since 11.0
    AVAudioPlayerNodeCompletionCallbackType: {prefix: AVAudioPlayerNodeCompletion} #since 11.0
    AVCaptureOutputDataDroppedReason: {} #since 11.0
    AVCaptureLensStabilizationStatus: {} #since 11.0
    AVDepthDataQuality: {} #since 11.0
    AVDepthDataAccuracy: {} #since 11.0
    AVPlayerHDRMode: {} #since 11.2
    AVCaptureSystemPressureFactors: {} #since 11.1
    AVAudioSessionActivationOptions: {prefix: AVAudioSessionActivationOption}
    AVAudioSessionPromptStyle: {}
    # ios13
    AVAudio3DMixingSourceMode: {} #since 13.0
    AVAudio3DMixingPointSourceInHeadMode: {} #since 13.0
    AVAudioEnvironmentOutputType: {} #since 13.0
    AVSpeechSynthesisVoiceGender: {} #since 13.0
    AVCapturePhotoQualityPrioritization: {} #since 13.0
    AVMovieWritingOptions: {prefix: AVMovieWriting} #since 13.0
    # ios14
    AVAudioStereoOrientation: {}
    AVAssetSegmentType: { } #since 14.0
    AVAudioSpatializationFormats: { prefix: AVAudioSpatializationFormat }
    # ios 14.5
    AVVariantPreferences: {prefix: AVVariantPreference} #since 14.5
    AVPlayerInterstitialEventRestrictions: {prefix: AVPlayerInterstitialEventRestriction} #since 14.5
    AVCaptureCenterStageControlMode: {} #since 14.5
    AVAudioSessionInterruptionReason: {}
    # ios 15
    AVAudioRoutingArbitrationCategory: {}
    AVPlayerAudiovisualBackgroundPlaybackPolicy: {} #since 15.0
    AVDelegatingPlaybackCoordinatorRateChangeOptions: {prefix: AVDelegatingPlaybackCoordinatorRateChangeOption}
    AVDelegatingPlaybackCoordinatorSeekOptions: {prefix: AVDelegatingPlaybackCoordinatorSeekOption}
    AVSampleBufferRequestDirection: {}
    AVSampleBufferRequestMode: {}
    AVCapturePrimaryConstituentDeviceSwitchingBehavior: {} #since 15.0
    AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions: {prefix: AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorCondition} #since 15.0
    AVCaptureMicrophoneMode: {} #since 15.0
    AVCaptureSystemUserInterface: {} #since 15.0
    AVAssetTrackGroupOutputHandling: { } #since 16.0
    AVMIDIControlChangeMessageType: { }
    AVMIDIMetaEventType: { }
    AVSpeechSynthesisMarkerMark: { } #since 16.0
    # ios 17
    AVPlayerLooperItemOrdering: {} #since 17.0
    AVPlayerInterstitialEventAssetListResponseStatus: {} #since 16.4
    AVAudioVoiceProcessingSpeechActivityEvent: {prefix: AVAudioVoiceProcessingSpeechActivity} #since 17.0
    AVAudioVoiceProcessingOtherAudioDuckingLevel: {} #since 17.0
    AVSpeechSynthesisPersonalVoiceAuthorizationStatus: {} #since 17.0
    AVSpeechSynthesisVoiceTraits: {prefix: AVSpeechSynthesisVoiceTrait} #since 17.0
    AVAudioApplicationRecordPermission: {}
    AVCapturePhotoOutputCaptureReadiness: {} #since 17.0

typed_enums:
    AVAssetDownloadedAssetEvictionPriority:
        enum: AVAssetDownloadedAssetEvictionPriority
        prefix: AVAssetDownloadedAssetEvictionPriority
        type: NSString
    AVCaptureSystemPressureLevel:
        enum: AVCaptureSystemPressureLevel
        prefix: AVCaptureSystemPressureLevel
        type: NSString
    AVAssetWriterInputMediaDataLocation:
        enum: AVAssetWriterInputMediaDataLocation
        prefix: AVAssetWriterInputMediaDataLocation
        type: NSString
    AVVideoApertureMode:
        enum: AVVideoApertureMode
        prefix: AVVideoApertureMode
        type: NSString
    AVVideoCodecType:
        enum: AVVideoCodecType
        type: NSString
    AVSemanticSegmentationMatteType:
        enum: AVSemanticSegmentationMatteType
        type: NSString
        AVSemanticSegmentationMatteType(.*):
            name: '#{g[0]}'
    AVAudioSequencerInfoDictionaryKey:
        enum: AVAudioSequencerInfoDictionaryKey
        type: NSString
        prefix: AVAudioSequencerInfoDictionaryKey
    AVAssetPlaybackConfigurationOption:
        enum: AVAssetPlaybackConfigurationOption
        type: NSString
        prefix: AVAssetPlaybackConfigurationOption
    AVPlayerInterstitialEventCue:
        enum: AVPlayerInterstitialEventCue
        type: NSString
        prefix: AVPlayerInterstitialEventCue
    AVVideoRange:
        enum: AVVideoRange
        type: NSString
        prefix: AVVideoRange
    AVPlayerRateDidChangeReason:
        enum: AVPlayerRateDidChangeReason
        type: NSString
        prefix: AVPlayerRateDidChangeReason
    AVCoordinatedPlaybackSuspensionReason:
        enum: AVCoordinatedPlaybackSuspensionReason
        type: NSString
        prefix: AVCoordinatedPlaybackSuspensionReason
    AVVideoCompositionPerFrameHDRDisplayMetadataPolicy:
        enum: AVVideoCompositionPerFrameHDRDisplayMetadataPolicy
        type: NSString
        prefix: AVVideoCompositionPerFrameHDRDisplayMetadataPolicy
    AVCaptureReactionType:
        enum: AVCaptureReactionType
        type: NSString
        prefix: AVCaptureReactionType
categories:
    NSValueAVFoundationExtensions: # DONE
        methods:
            '+valueWith.*':
                name: create
    AVTimeCoding: # DONE
        methods:
            '-encodeCMTime:forKey:':
                trim_after_first_colon: true
            '-decodeCMTimeForKey:':
                name: decodeCMTime
            '-encodeCMTimeRange:forKey:':
                trim_after_first_colon: true
            '-decodeCMTimeRangeForKey:':
                name: decodeCMTimeRange
            '-encodeCMTimeMapping:forKey:':
                trim_after_first_colon: true
            '-decodeCMTimeMappingForKey:':
                name: decodeCMTimeMapping
classes:
    # Structs
    AVAudio3DAngularOrientation: {}
    AVAudio3DPoint: {}
    AVAudio3DVector: {}
    AVAudio3DVectorOrientation: {}
    AVAudioConverterPrimeInfo: {}
    AVBeatRange: {}
    AVCaptureWhiteBalanceGains: {}
    AVCaptureWhiteBalanceChromaticityValues: {}
    AVCaptureWhiteBalanceTemperatureAndTintValues: {}
    AVEdgeWidths: {}
    AVPixelAspectRatio: {}
    AVAudioVoiceProcessingOtherAudioDuckingConfiguration: {} #since 17.0
    
    AVError:
        extends: NSError
        annotations: ['@StronglyLinked']

    AVAsset: # DONE
        skip_handle_constructor: false
        properties:
            'tracks':
                type: 'NSArray<? extends AVAssetTrack>'
            'trackGroups':
                type: NSArray<AVAssetTrackGroup>
            'commonMetadata':
                type: NSArray<AVMetadataItem>
            'metadata':
                type: NSArray<AVMetadataItem>
            'hasProtectedContent':
                omit_prefix: true
            'availableMetadataFormats':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataFormat.AsListMarshaler.class) List<AVMetadataFormat>'
            'availableChapterLocales':
                type: NSArray<NSLocale>
            'availableMediaCharacteristicsWithMediaSelectionOptions':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
        methods:
            '+assetWithURL:':
                name: create
                constructor: true                
            '-trackWithTrackID:':
                name: getTrack
            '-tracksWithMediaType:':
                name: getTracksWithType
                return_type: NSArray<AVAssetTrack>
                parameters:
                    mediaType:
                        type: AVMediaType
            '-tracksWithMediaCharacteristic:':
                name: getTracksWithCharacteristic
                return_type: NSArray<AVAssetTrack>
                parameters:
                    mediaCharacteristic:
                        type: AVMediaCharacteristic
            '-metadataForFormat:':
                name: getMetadata
                return_type: NSArray<AVMetadataItem>
                parameters:
                    format:
                        type: AVMetadataFormat
            '-chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:':
                name: getChapterMetadataGroupsContainingItemsWithCommonKeys
                return_type: NSArray<AVTimedMetadataGroup>
                parameters:
                    commonKeys:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataKey.AsListMarshaler.class) List<AVMetadataKey>'
            '-chapterMetadataGroupsBestMatchingPreferredLanguages:':
                name: getChapterMetadataGroupsBestMatchingPreferredLanguages
                return_type: NSArray<AVTimedMetadataGroup>
                parameters:
                    preferredLanguages:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-mediaSelectionGroupForMediaCharacteristic:':
                name: getMediaSelectionGroup
                parameters:
                    mediaCharacteristic:
                        type: AVMediaCharacteristic
            '-unusedTrackID':
                property: true
            '-loadTrackWithTrackID:completionHandler:':
                name: loadTrack
                parameters:
                    1: { type: "@Block VoidBlock2<NSArray<?>, NSError>" } # FIXME: using wildcard as slashes with subclasses
            '-loadTracksWithMediaType:completionHandler:':
                name: loadTracksWithMediaType
                parameters:
                    1: { type: "@Block VoidBlock2<NSArray<?>, NSError>" } # FIXME: using wildcard as slashes with subclasses
            '-loadTracksWithMediaCharacteristic:completionHandler:':
                name: loadTracksWithMediaCharacteristic
                parameters:
                    1: { type: "@Block VoidBlock2<NSArray<?>, NSError>" } # FIXME: using wildcard as slashes with subclasses
            '-loadMetadataForFormat:completionHandler:':
                name: loadMetadataForFormat
            '-loadChapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:completionHandler:':
                name: loadChapterMetadataGroups
            '-loadChapterMetadataGroupsBestMatchingPreferredLanguages:completionHandler:':
                name: loadChapterMetadataGroupsBestMatchingPreferredLanguages
            '-loadMediaSelectionGroupForMediaCharacteristic:completionHandler:':
                name: loadMediaSelectionGroupForMediaCharacteristic
            '-findUnusedTrackIDWithCompletionHandler:':
                name: findUnusedTrackID
    AVAssetCache : {}
    AVAssetDownloadTask: # DONE
        properties:
            'options':
                type: AVAssetDownloadTaskOptions
            'loadedTimeRanges':
                type: List<CMTimeRange>
                marshaler: CMTimeRange.AsValuedListMarshaler
    AVAssetDownloadURLSession: # DONE
        methods:
            '-assetDownloadTaskWithURLAsset:destinationURL:options:':
                name: newAssetDownloadTask
                parameters:
                    options:
                        type: AVAssetDownloadTaskOptions
            '-assetDownloadTaskWithURLAsset:assetTitle:assetArtworkData:options:':
                name: newAssetDownloadTask
                parameters:
                    options:
                        type: AVAssetDownloadTaskOptions
            '-dataTaskWith.*':
                name: newDataTask
            '-uploadTaskWith.*':
                name: newUploadTask
            '-downloadTaskWith.*':
                name: newDownloadTask
            '+sharedSession':
                property: true
            '+sessionWith.*':
                name: create
                constructor: true
            '-aggregateAssetDownloadTaskWithURLAsset:mediaSelections:assetTitle:assetArtworkData:options:':
                trim_after_first_colon: true
            '-assetDownloadTaskWithConfiguration:':
                name: assetDownloadTask
    AVAssetExportSession: # DONE
        properties:
            'presetName':
                type: AVAssetExportPreset
            'outputFileType':
                type: String
            'supportedFileTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'metadata':
                type: NSArray<AVMetadataItem>
            'audioTimePitchAlgorithm':
                type: AVAudioTimePitchAlgorithm
        methods:
            '-initWithAsset:presetName:':
                name: init
                parameters:
                    presetName:
                        type: AVAssetExportPreset
            '-determineCompatibleFileTypesWithCompletionHandler:':
                name: determineCompatibleFileTypes
                parameters:
                    handler:
                        type: '@Block VoidBlock1<NSArray<NSString>>' # TODO asStringListMarshaler
            '-exportAsynchronouslyWithCompletionHandler:':
                name: exportAsynchronously
            '+allExportPresets':
                property: true
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(AVAssetExportPreset.AsListMarshaler.class) List<AVAssetExportPreset>'
            '+exportPresetsCompatibleWithAsset:':
                name: getCompatibleExportPresets
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(AVAssetExportPreset.AsListMarshaler.class) List<AVAssetExportPreset>'
            '+determineCompatibilityOfExportPreset:withAsset:outputFileType:completionHandler:':
                name: determineCompatibilityOfExportPreset
                parameters:
                    presetName:
                        type: AVAssetExportPreset
            '+exportSessionWithAsset:presetName:':
                exclude: true
            '-estimateMaximumDurationWithCompletionHandler:':
                name: estimateMaximumDuration
            '-estimateOutputFileLengthWithCompletionHandler:':
                name: estimateOutputFileLength
    AVAssetImageGenerator: # DONE
        properties:
            'apertureMode':
                type: AVAssetImageGeneratorApertureMode
        methods:
            '-initWithAsset:':
                name: init
            '-copyCGImageAtTime:actualTime:error:':
                name: getCGImageAtTime
                throws: NSErrorException
                return_marshaler: CFType.NoRetainMarshaler
                annotations: ['@WeaklyLinked']
            '-generateCGImagesAsynchronouslyForTimes:completionHandler:':
                name: generateCGImagesAsynchronously
                parameters:
                    requestedTimes:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(CMTime.AsValuedListMarshaler.class) List<CMTime>'
                    handler: 
                        type: '@Block VoidBlock5<CMTime, CGImage, CMTime, AVAssetImageGeneratorResult, NSError>'
            '+assetImageGeneratorWithAsset:':
                exclude: true
            '-generateCGImageAsynchronouslyForTime:completionHandler:':
                name: generateCGImageAsynchronouslyForTime
    AVAssetReader: # DONE
        properties:
            'outputs':
                type: NSArray<AVAssetReaderOutput>
        methods:
            '-initWithAsset:error:':
                name: init
                throws: NSErrorException
            '-canAddOutput:':
                trim_after_first_colon: true
            '-addOutput:':
                trim_after_first_colon: true
            '+assetReaderWithAsset:error:':
                exclude: true
    AVAssetReaderAudioMixOutput: # DONE
        properties:
            'audioTracks':
                type: NSArray<AVAssetTrack>
            'audioSettings':
                type: AVAudioSettings
            'audioTimePitchAlgorithm':
                type: AVAudioTimePitchAlgorithm
        methods:
            '-initWithAudioTracks:audioSettings:':
                name: init
                parameters:
                    audioTracks:
                        type: NSArray<AVAssetTrack>
                    audioSettings:
                        type: AVAudioSettings
            '+assetReaderAudioMixOutputWithAudioTracks:audioSettings:':
                exclude: true
    AVAssetReaderOutput: # DONE
        properties:
            'mediaType':
                type: AVMediaType
        methods:
            '-copyNextSampleBuffer':
                name: getNextSampleBuffer
                return_marshaler: CFType.NoRetainMarshaler
                annotations: ['@WeaklyLinked']
            '-resetForReadingTimeRanges:':
                trim_after_first_colon: true
                parameters:
                    timeRanges:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(CMTimeRange.AsValuedListMarshaler.class) List<CMTimeRange>'
    AVAssetReaderOutputMetadataAdaptor: # DONE
        methods:
            '-init.*':
                name: init
            '+assetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput:':
                exclude: true
    AVAssetReaderSampleReferenceOutput: # DONE
        methods:
            '-init.*':
                name: init
            '+assetReaderSampleReferenceOutputWithTrack:':
                exclude: true
    AVAssetReaderTrackOutput: # DONE
        properties:
            'outputSettings':
                visibility: protected
            'audioTimePitchAlgorithm':
                type: AVAudioTimePitchAlgorithm
        methods:
            '-initWithTrack:outputSettings:':
                name: init
                constructor: false
            '+assetReaderTrackOutputWithTrack:outputSettings:':
                exclude: true
    AVAssetReaderVideoCompositionOutput: # DONE
        properties:
            'videoTracks':
                type: NSArray<AVAssetTrack>
            'videoSettings':
                name: videoSettings0
                visibility: protected
        methods:
            '-initWithVideoTracks:videoSettings:':
                name: init
                constructor: false
                parameters:
                    videoTracks:
                        type: NSArray<AVAssetTrack>
            '+assetReaderVideoCompositionOutputWithVideoTracks:videoSettings:':
                exclude: true
    AVAssetResourceLoader: # DONE
        properties:
            'delegateQueue':
                annotations: ['@WeaklyLinked']
        methods:
            '-setDelegate:queue:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
    AVAssetResourceLoadingContentInformationRequest: {} # DONE
    AVAssetResourceLoadingDataRequest: # DONE
        methods:
            '-respondWithData:':
                name: respond
    AVAssetResourceLoadingRequest: # DONE
        properties:
            'cancelled':
                name: isCancelled
        methods:
            '-finishLoadingWithError:':
                name: finishLoading
            '-streamingContentKeyRequestDataForApp:contentIdentifier:options:error:':
                name: getStreamingContentKeyRequestData
                throws: NSErrorException
                parameters:
                    options:
                        type: AVAssetResourceLoadingRequestOptions
            '-persistentContentKeyFromKeyVendorResponse:options:error:':
                name: getPersistentContentKey
                throws: NSErrorException
                parameters:
                    options:
                        type: AVAssetResourceLoadingRequestOptions
            '-finishLoadingWithResponse:data:redirect:':
                name: finishLoading
    AVAssetResourceRenewalRequest: {} # DONE
    AVAssetTrack: # DONE
        properties:
            'formatDescriptions':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<CMFormatDescription>'
            'segments':
                type: NSArray<AVAssetTrackSegment>
            'commonMetadata':
                type: NSArray<AVMetadataItem>
            'availableMetadataFormats':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataFormat.AsListMarshaler.class) List<AVMetadataFormat>'
            'availableTrackAssociationTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVTrackAssociationType.AsListMarshaler.class) List<AVTrackAssociationType>'
            'metadata':
                type: NSArray<AVMetadataItem>
        methods:
            '-hasMediaCharacteristic:':
                trim_after_first_colon: true
                parameters:
                    mediaCharacteristic:
                        type: AVMediaCharacteristic
            '-segmentForTrackTime:':
                name: getSegment
            '-samplePresentationTimeForTrackTime:':
                name: getSamplePresentationTime
            '-metadataForFormat:':
                name: getMetadataForFormat
                return_type: NSArray<AVMetadataItem>
                parameters:
                    format:
                        type: AVMetadataFormat
            '-associatedTracksOfType:':
                name: getAssociatedTracksOfType
                return_type: NSArray<AVAssetTrack>
                parameters:
                    trackAssociationType:
                        type: AVTrackAssociationType
            '-loadSegmentForTrackTime:completionHandler:':
                name: loadSegmentForTrackTime
            '-loadSamplePresentationTimeForTrackTime:completionHandler:':
                name: loadSamplePresentationTimeForTrackTime
            '-loadMetadataForFormat:completionHandler:':
                name: loadMetadataForFormat
            '-loadAssociatedTracksOfType:completionHandler:':
                name: loadAssociatedTracksOfType
            '-makeSampleCursorWithPresentationTimeStamp:':
                name: makeSampleCursor
    AVAssetTrackGroup: # DONE
        properties:
            'trackIDs':
                type: NSArray<NSNumber>
    AVAssetTrackSegment: {} # DONE
    AVAssetWriter: # DONE
        properties:
            'availableMediaTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaType.AsListMarshaler.class) List<AVMediaType>'
            'metadata':
                type: NSArray<AVMetadataItem>
            'inputs':
                type: NSArray<AVAssetWriterInput>
            'inputGroups':
                type: NSArray<AVAssetWriterInputGroup>
        methods:
            '-initWithURL:fileType:error:':
                name: init
                throws: NSErrorException
            '-initWithContentType:':
                name: init
            '-canApplyOutputSettings:forMediaType:':
                trim_after_first_colon: true
                visibility: protected # can be either AVAudioSettings or AVVideoSettings
                parameters:
                    mediaType:
                        type: AVMediaType
            '-canAddInput:':
                trim_after_first_colon: true
            '-addInput:':
                trim_after_first_colon: true
            '-startSessionAtSourceTime:':
                name: startSession
            '-endSessionAtSourceTime:':
                name: endSession
            '-finishWritingWithCompletionHandler:':
                name: finishWriting
            '+assetWriterWithURL:fileType:error:':
                exclude: true
            '-canAddInputGroup:':
                trim_after_first_colon: true
            '-addInputGroup:':
                trim_after_first_colon: true
    AVAssetWriterInput: # DONE
        properties:
            'outputSettings':
                visibility: protected # can be either AVAudioSettings or AVVideoSettings
            'metadata':
                type: NSArray<AVMetadataItem>
            'mediaType':
                type: AVMediaType
            'canPerformMultiplePasses':
                omit_prefix: true
        methods:
            '-initWithMediaType:outputSettings:':
                name: init
                constructor: false # can be either AVAudioSettings or AVVideoSettings
                parameters:
                    mediaType:
                        type: AVMediaType
            '-initWithMediaType:outputSettings:sourceFormatHint:':
                name: init
                constructor: false # can be either AVAudioSettings or AVVideoSettings
                parameters:
                    mediaType:
                        type: AVMediaType
            '-requestMediaDataWhenReadyOnQueue:usingBlock:':
                name: requestMediaDataWhenReady
                annotations: ['@WeaklyLinked']
            '-appendSampleBuffer:':
                trim_after_first_colon: true
            '+assetWriterInputWithMediaType:outputSettings:':
                exclude: true
            '+assetWriterInputWithMediaType:outputSettings:sourceFormatHint:':
                exclude: true
            '-canAddTrackAssociationWithTrackOfInput:type:':
                name: canAddTrackAssociation
                parameters:
                    trackAssociationType:
                        type: AVTrackAssociationType
            '-addTrackAssociationWithTrackOfInput:type:':
                name: addTrackAssociation   
                parameters:
                    trackAssociationType:
                        type: AVTrackAssociationType
            '-respondToEachPassDescriptionOnQueue:usingBlock:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
    AVAssetWriterInputGroup: # DONE
        properties:
            'inputs':
                type: NSArray<AVAssetWriterInput>
        methods:
            '-initWithInputs:defaultInput:':
                name: init
                parameters:
                    inputs:
                        type: NSArray<AVAssetWriterInput>
            '+assetWriterInputGroupWithInputs:defaultInput:':
                exclude: true
    AVAssetWriterInputMetadataAdaptor: # DONE
        methods:
            '-initWithAssetWriterInput:':
                name: init
            '-appendTimedMetadataGroup:':
                trim_after_first_colon: true
            '+assetWriterInputMetadataAdaptorWithAssetWriterInput:':
                exclude: true
    AVAssetWriterInputPassDescription: # DONE
        properties:
            'sourceTimeRanges':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CMTimeRange.AsValuedListMarshaler.class) List<CMTimeRange>'
    AVAssetWriterInputPixelBufferAdaptor: # DONE
        properties:
            'sourcePixelBufferAttributes':
                type: CVPixelBufferAttributes
                annotations: ['@WeaklyLinked']
            'pixelBufferPool':
                annotations: ['@WeaklyLinked']
        methods:
            '-initWithAssetWriterInput:sourcePixelBufferAttributes:':
                name: init
                annotations: ['@WeaklyLinked']
                parameters:
                    sourcePixelBufferAttributes:
                        type: CVPixelBufferAttributes
            '-appendPixelBuffer:withPresentationTime:':
                name: appendPixelBuffer
                annotations: ['@WeaklyLinked']
            '+assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:':
                exclude: true
    AVAsynchronousCIImageFilteringRequest: # DONE
        methods:
            '-finish.*':
                name: finish
    AVAsynchronousVideoCompositionRequest: # DONE
        properties:
            'sourceTrackIDs':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '-sourceFrameByTrackID:':
                name: getSourceFrame
                annotations: ['@WeaklyLinked']
            '-finishWithComposedVideoFrame:':
                name: finish
                annotations: ['@WeaklyLinked']
            '-finishWithError:':
                name: finish
    AVAudioBuffer: # DONE
        properties:
            '(audioBufferList|mutableAudioBufferList)':
                annotations: ['@WeaklyLinked']
    AVAudioChannelLayout: # DONE
        properties:
            'layout':
                annotations: ['@WeaklyLinked']
        methods:
            '-initWithLayout:':
                name: init
                annotations: ['@WeaklyLinked']
            '-init.*':
                name: init
            '-isEqual:':
                name: equalsTo
                parameters:
                    object:
                        type: AVAudioChannelLayout
            '+layoutWith.*':
                exclude: true
    AVAudioCompressedBuffer: # DONE
        properties:
            'data':
                name: dataPointer
                type: '@Pointer long'
        methods:
            '-init.*':
                name: init
    AVAudioConnectionPoint: # DONE
        methods:
            '-initWithNode:bus:':
                name: init
    AVAudioConverter: # DONE
        properties:
            'channelMap':
                type: List<Integer>
                marshaler: NSArray.AsIntegerListMarshaler
            'sampleRateConverterQuality':
                type: AVAudioQuality
            'sampleRateConverterAlgorithm':
                type: AVSampleRateConverterAlgorithm
            'bitRateStrategy':
                type: AVAudioBitRateStrategy
            '(availableEncodeBitRates|applicableEncodeBitRates)':
                type: List<Integer>
                marshaler: NSArray.AsIntegerListMarshaler
            '(availableEncodeSampleRates|applicableEncodeSampleRates)':
                type: List<Integer>
                marshaler: NSArray.AsIntegerListMarshaler
            'availableEncodeChannelLayoutTags':
                type: List<Integer>
                marshaler: NSArray.AsIntegerListMarshaler
        methods:
            '-initFromFormat:toFormat:':
                name: init
            '-convertToBuffer:fromBuffer:error:':
                name: convert
                throws: NSErrorException
            '-convertToBuffer:error:withInputFromBlock:':
                name: convert
                visibility: protected
                parameters:
                    inputBlock:
                        type: '@Block Block2<Integer, MachineSizedSIntPtr, AVAudioBuffer>'
    AVAudioEngine: # DONE
        properties:
            'musicSequence':
                annotations: ['@WeaklyLinked']
        methods:
            '-attachNode:':
                trim_after_first_colon: true
            '-detachNode:':
                trim_after_first_colon: true
            '-connect:to:fromBus:toBus:format:':
                trim_after_first_colon: true
            '-connect:to:format:':
                trim_after_first_colon: true
            '-connect:toConnectionPoints:fromBus:format:':
                trim_after_first_colon: true
                parameters:
                    destNodes:
                        type: NSArray<AVAudioConnectionPoint>
            '-disconnectNodeInput:bus:':
                trim_after_first_colon: true
            '-disconnectNodeInput:':
                trim_after_first_colon: true
            '-disconnectNodeOutput:bus:':
                trim_after_first_colon: true
            '-disconnectNodeOutput:':
                trim_after_first_colon: true
            '-startAndReturnError:':
                name: start
                throws: NSErrorException
            '-inputConnectionPointForNode:inputBus:':
                name: getInputConnectionPoint
            '-outputConnectionPointsForNode:outputBus:':
                name: getOutputConnectionPoints
                return_type: NSArray<AVAudioConnectionPoint>
            '-enableManualRenderingMode:format:maximumFrameCount:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-renderOffline:toBuffer:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-connectMIDI:to:format:block:':
                name: connectMIDI
            '-connectMIDI:toNodes:format:block:':
                name: connectMIDI
            '-disconnectMIDI:from:':
                name: disconnectMIDI
            '-disconnectMIDI:fromNodes:':
                name: disconnectMIDI
            '-connectMIDI:to:format:eventListBlock:':
                name: connectMIDI
            '-connectMIDI:toNodes:format:eventListBlock:':
                name: connectMIDI

    AVAudioEnvironmentDistanceAttenuationParameters: {} # DONE
    AVAudioEnvironmentNode: # DONE
        properties:
            'applicableRenderingAlgorithms':
                type: List<AVAudio3DMixingRenderingAlgorithm>
                marshaler: AVAudio3DMixingRenderingAlgorithm.AsListMarshaler
    AVAudioEnvironmentReverbParameters: # DONE
        methods:
            '-loadFactoryReverbPreset:':
                trim_after_first_colon: true
    AVAudioFile: # DONE
        methods:
            '-init.*':
                name: init
                throws: NSErrorException
                parameters:
                    settings:
                        type: AVAudioSettings
            '-readIntoBuffer:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-readIntoBuffer:frameCount:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-writeFromBuffer:error:':
                trim_after_first_colon: true
                throws: NSErrorException
    AVAudioFormat: # DONE
        properties:
            'settings':
                type: AVAudioSettings
            'streamDescription':
                annotations: ['@WeaklyLinked']
        methods:
            '-initWithStreamDescription:':
                name: init
                annotations: ['@WeaklyLinked']
            '-initWithSettings:':
                name: init
                parameters:
                    settings:
                        type: AVAudioSettings
            '-init.*':
                name: init
            '-isEqual:':
                name: equalsTo
                parameters:
                    object:
                        type: AVAudioFormat
    AVAudioIONode: # DONE
        properties:
            'audioUnit':
                annotations: ['@WeaklyLinked']
        methods:
            '-setVoiceProcessingEnabled:error:':
                name: setVoiceProcessingEnabled
                throws: NSErrorException
    AVAudioInputNode: #since 8.0
        methods:
            '-setManualRenderingInputPCMFormat:inputBlock:':
                trim_after_first_colon: true
    AVAudioOutputNode: {} # DONE
    AVAudioMixerNode: {} # DONE
    AVAudioMix: # DONE
        properties:
            'inputParameters':
                type: NSArray<AVAudioMixInputParameters>
    AVAudioMixInputParameters: # DONE
        skip_handle_constructor: false
        properties:
            'audioTimePitchAlgorithm':
                type: AVAudioTimePitchAlgorithm
            'audioTapProcessor':
                annotations: ['@WeaklyLinked']
        methods:
            '-getVolumeRampForTime:startVolume:endVolume:timeRange:':
                name: getVolumeRamp
                visibility: protected
                parameters:
                    timeRange:
                        type: CMTimeRange.CMTimeRangePtr
    AVAudioMixingDestination: {} # DONE
    AVAudioNode: # DONE
        methods:
            '-inputFormatForBus:':
                name: getInputFormatForBus
            '-outputFormatForBus:':
                name: getOutputFormatForBus
            '-nameForInputBus:':
                name: getNameForInputBus
            '-nameForOutputBus:':
                name: getNameForOutputBus
            '-installTapOnBus:bufferSize:format:block:':
                trim_after_first_colon: true
                parameters:
                    tapBlock:
                        type: '@Block VoidBlock2<AVAudioPCMBuffer, AVAudioTime>'
            '-removeTapOnBus:':
                trim_after_first_colon: true
    AVAudioPCMBuffer: # DONE
        methods:
            '-initWithPCMFormat:frameCapacity:':
                name: init
            '-initWithPCMFormat:bufferListNoCopy:deallocator:':
                name: init
    AVAudioPlayer: # DONE
        properties:
            'settings':
                type: AVAudioSettings
            'channelAssignments':
                type: NSArray<AVAudioSessionChannelDescription>
            'enableRate':
                name: rateEnabled
        methods:
            '-init.*':
                name: init
                throws: NSErrorException
            '-playAtTime:':
                trim_after_first_colon: true
            '-peakPowerForChannel:':
                name: getPeakPowerForChannel
            '-averagePowerForChannel:':
                name: getAveragePowerForChannel
            '-setVolume:fadeDuration:':
                trim_after_first_colon: true
    AVAudioPlayerNode: # DONE
        methods:
            '-scheduleBuffer:completionHandler:':
                trim_after_first_colon: true
            '-scheduleBuffer:atTime:options:completionHandler:':
                trim_after_first_colon: true
            '-scheduleFile:atTime:completionHandler:':
                trim_after_first_colon: true
            '-scheduleSegment:startingFrame:frameCount:atTime:completionHandler:':
                trim_after_first_colon: true
            '-scheduleBuffer:completionCallbackType:completionHandler:':
                trim_after_first_colon: true
            '-scheduleBuffer:atTime:options:completionCallbackType:completionHandler:':
                trim_after_first_colon: true
            '-scheduleFile:atTime:completionCallbackType:completionHandler:':
                trim_after_first_colon: true
            '-scheduleSegment:startingFrame:frameCount:atTime:completionCallbackType:completionHandler:':
                trim_after_first_colon: true
            '-prepareWithFrameCount:':
                name: prepare
            '-playAtTime:':
                trim_after_first_colon: true
            '-nodeTimeForPlayerTime:':
                name: convertPlayerTimeToNodeTime
            '-playerTimeForNodeTime:':
                name: convertNodeTimeToPlayerTime
    AVAudioRecorder: # DONE
        properties:
            'settings':
                type: AVAudioSettings
            'channelAssignments':
                type: NSArray<AVAudioSessionChannelDescription>
        methods:
            '-initWithURL:settings:error:':
                name: init
                throws: NSErrorException
                parameters:
                    settings:
                        type: AVAudioSettings
            '-initWithURL:format:error:':
                name: init
                throws: NSErrorException
            '-recordAtTime:':
                trim_after_first_colon: true
            '-recordForDuration:':
                name: record
            '-recordAtTime:forDuration:':
                trim_after_first_colon: true
            '-peakPowerForChannel:':
                name: getPeakPowerForChannel
            '-averagePowerForChannel:':
                name: getAveragePowerForChannel
    AVAudioSequencer: # DONE
        properties:
            'tracks':
                type: NSArray<AVMusicTrack>
            'userInfo':
                type: 'NSDictionary<NSString, ?>'
        methods:
            '-initWithAudioEngine:':
                name: init
            '-loadFrom.*':
                name: load
                throws: NSErrorException
            '-writeToURL:SMPTEResolution:replaceExisting:error:':
                name: write
                throws: NSErrorException
            '-dataWithSMPTEResolution:error:':
                name: getData
                throws: NSErrorException
            '-secondsForBeats:':
                name: convertBeatsToSeconds
            '-beatsForSeconds:':
                name: convertSecondsToBeats
            '-hostTimeForBeats:error:':
                name: convertBeatsToHostTime
                throws: NSErrorException
                parameters:
                    inBeats:
                        name: beats
            '-beatsForHostTime:error:':
                name: convertHostTimeToBeats
                throws: NSErrorException
                parameters:
                    inHostTime:
                        name: hostTime
            '-startAndReturnError:':
                name: start
                throws: NSErrorException
    AVAudioSession: # DONE
        properties:
            'availableCategories':
                type: List<AVAudioSessionCategory>
                marshaler: AVAudioSessionCategory.AsListMarshaler
            'category':
                type: AVAudioSessionCategory
            'availableModes':
                type: List<AVAudioSessionMode>
                marshaler: AVAudioSessionMode.AsListMarshaler
            'mode':
                type: AVAudioSessionMode
            'inputIsAvailable':
                exclude: true
            'availableInputs':
                type: NSArray<AVAudioSessionPortDescription>
            'inputDataSources':
                type: NSArray<AVAudioSessionDataSourceDescription>
            'outputDataSources':
                type: NSArray<AVAudioSessionDataSourceDescription>
            'secondaryAudioShouldBeSilencedHint':
                omit_prefix: true
        methods:
            '-setActive:.*':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setCategory:.*':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    category:
                        type: AVAudioSessionCategory
            '-recordPermission':
                property: true
            '-requestRecordPermission:':
                trim_after_first_colon: true
                parameters:
                    response:
                        type: '@Block VoidBooleanBlock'
            '-setMode:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    mode:
                        type: AVAudioSessionMode
            '-overrideOutputAudioPort:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setPreferredInput:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '+sharedInstance':
                return_type: AVAudioSession
                property: true
            '-setPreferredSampleRate:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setPreferredIOBufferDuration:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setPreferredInputNumberOfChannels:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setPreferredOutputNumberOfChannels:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setInputGain:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setInputDataSource:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setOutputDataSource:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setPreferredHardwareSampleRate:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setAggregatedIOPreference:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setAllowHapticsAndSystemSoundsDuringRecording:error:':
                name: setAllowHapticsAndSystemSoundsDuringRecording
                throws: NSErrorException
            '-setPreferredInputOrientation:error:':
                name: setPreferredInputOrientation
                throws: NSErrorException
            '-setRate:time:atHostTime:':
                name: setRate
            '-setPrefersNoInterruptionsFromSystemAlerts:error:':
                name: setPrefersNoInterruptionsFromSystemAlerts
                throws: NSErrorException
            '-setSupportsMultichannelContent:error:':
                name: setSupportsMultichannelContent
                throws: NSErrorException
            '-setPrefersInterruptionOnRouteDisconnect:error:':
                name: setPrefersInterruptionOnRouteDisconnect
                throws: NSErrorException
    AVAudioSessionChannelDescription: {} # DONE
    AVAudioSessionDataSourceDescription: # DONE
        properties:
            'location':
                type: AVAudioSessionLocation
            'orientation':
                type: AVAudioSessionOrientation
            'supportedPolarPatterns':
                type:  '@org.robovm.rt.bro.annotation.Marshaler(AVAudioSessionPolarPattern.AsListMarshaler.class) List<AVAudioSessionPolarPattern>'
            '(selectedPolarPattern|preferredPolarPattern)':
                type: AVAudioSessionPolarPattern
        methods:
            '-setPreferredPolarPattern:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    pattern:
                        type: AVAudioSessionPolarPattern
    AVAudioSessionPortDescription: # DONE
        properties:
            'portType':
                type: AVAudioSessionPort
            'channels':
                type: NSArray<AVAudioSessionChannelDescription>
            'dataSources':
                type: NSArray<AVAudioSessionDataSourceDescription>
        methods:
            '-setPreferredDataSource:error:':
                trim_after_first_colon: true
                throws: NSErrorException
    AVAudioSessionRouteDescription: # DONE
        properties:
            'inputs':
                type: NSArray<AVAudioSessionPortDescription>
            'outputs':
                type: NSArray<AVAudioSessionPortDescription>
    AVAudioTime: # DONE
        properties:
            'audioTimeStamp':
                annotations: ['@WeaklyLinked']
        methods:
            '-initWithAudioTimeStamp:sampleRate:':
                name: init
                annotations: ['@WeaklyLinked']
            '-init.*':
                name: init
            '-extrapolateTimeFromAnchor:':
                trim_after_first_colon: true
            '+timeWith.*':
                exclude: true
            '+hostTimeForSeconds:':
                name: convertSecondsToHostTime
            '+secondsForHostTime:':
                name: convertHostTimeToSeconds
    AVAudioUnit: # DONE
        properties:
            '(audioComponentDescription|audioUnit)':
                annotations: ['@WeaklyLinked']
        methods:
            '-loadAudioUnitPresetAtURL:error:':
                name: loadAudioUnitPreset
                throws: NSErrorException
            '+instantiateWithComponentDescription:options:completionHandler:':
                name: instantiate
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<AVAudioUnit, NSError>'
    AVAudioUnitComponent: # DONE
        properties:
            'allTagNames':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
    AVAudioUnitComponentManager: # DONE
        properties:
            '(tagNames|standardLocalizedTagNames)':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-componentsMatchingPredicate:':
                name: getComponentsMatchingPredicate
                return_type: NSArray<AVAudioUnitComponent>
            '-componentsPassingTest:':
                name: getComponentsPassingTest
                return_type: NSArray<AVAudioUnitComponent>
                parameters:
                    testHandler:
                        type: '@Block Block2<AVAudioUnitComponent, BooleanPtr, Boolean>'
            '-componentsMatchingDescription:':
                name: getComponentsMatchingDescription
                return_type: NSArray<AVAudioUnitComponent>
            '+sharedAudioUnitComponentManager':
                property: true
    AVAudioUnitDelay: {} # DONE
    AVAudioUnitDistortion: # DONE
        methods:
            '-loadFactoryPreset:':
                trim_after_first_colon: true
    AVAudioUnitEQ: # DONE
        properties:
            'bands':
                type: AVAudioUnitEQFilterParameters
        methods:
            '-initWithNumberOfBands:':
                name: init
    AVAudioUnitEQFilterParameters: {} # DONE
    AVAudioUnitEffect: # DONE
        methods:
            '-initWithAudioComponentDescription:':
                name: init
                annotations: ['@WeaklyLinked']
    AVAudioUnitGenerator: # DONE
        methods:
            '-initWithAudioComponentDescription:':
                name: init
                annotations: ['@WeaklyLinked']
    AVAudioUnitMIDIInstrument: # DONE
        protocols: [AVAudioMixing]
        methods:
            '-initWithAudioComponentDescription:':
                name: init
                annotations: ['@WeaklyLinked']
            '-startNote:withVelocity:onChannel:':
                trim_after_first_colon: true
            '-stopNote:onChannel:':
                trim_after_first_colon: true
            '-sendController:withValue:onChannel:':
                trim_after_first_colon: true
            '-sendPitchBend:onChannel:':
                trim_after_first_colon: true
            '-sendPressure:onChannel:':
                trim_after_first_colon: true
            '-sendPressureForKey:withValue:onChannel:':
                name: sendPressure
            '-sendProgramChange:onChannel:':
                trim_after_first_colon: true
            '-sendProgramChange:bankMSB:bankLSB:onChannel:':
                trim_after_first_colon: true
            '-sendMIDIEvent:data1:data2:':
                trim_after_first_colon: true
            '-sendMIDIEvent:data1:':
                trim_after_first_colon: true
            '-sendMIDISysExEvent:':
                trim_after_first_colon: true
    AVAudioUnitReverb: # DONE
        methods:
            '-loadFactoryPreset:':
                trim_after_first_colon: true
    AVAudioUnitSampler: # DONE
        methods:
            '-loadSoundBankInstrumentAtURL:program:bankMSB:bankLSB:error:':
                name: loadSoundBankInstrument
                throws: NSErrorException
            '-loadInstrumentAtURL:error:':
                name: loadInstrument
                throws: NSErrorException
            '-loadAudioFilesAtURLs:error:':
                name: loadAudioFiles
                throws: NSErrorException
                parameters:
                    audioFiles:
                        type: NSArray<NSURL>
    AVAudioUnitTimeEffect: # DONE
        methods:
            '-initWithAudioComponentDescription:':
                name: init
                annotations: ['@WeaklyLinked']
    AVAudioUnitTimePitch: {} # DONE
    AVAudioUnitVarispeed: {} # DONE
    AVCaptureAudioChannel: {} # DONE
    AVCaptureAudioDataOutput: # DONE
        properties:
            'sampleBufferCallbackQueue':
                annotations: ['@WeaklyLinked']
        skip_def_constructor: true
        methods:
            '+new':
                constructor: true
                name: create
            '-setSampleBufferDelegate:queue:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
            '-recommendedAudioSettingsForAssetWriterWithOutputFileType:':
                name: getRecommendedAudioSettings
                return_type: AVAudioSettings
    AVCaptureAutoExposureBracketedStillImageSettings: # DONE
        methods:
            '+autoExposureSettingsWithExposureTargetBias:':
                name: create
                constructor: true
    AVCaptureBracketedStillImageSettings: # DONE
        skip_handle_constructor: false
    AVCaptureConnection: # DONE
        properties:
            'inputPorts':
                type: NSArray<AVCaptureInputPort>
            'audioChannels':
                type: NSArray<AVCaptureAudioChannel>
        methods:
            '-initWithInputPorts:output:':
                name: init
                parameters:
                    ports:
                        type: NSArray<AVCaptureInputPort>
            '-initWithInputPort:videoPreviewLayer:':
                name: init
            '+connectionWithInputPorts:output:':
                exclude: true
            '+connectionWithInputPort:videoPreviewLayer:':
                exclude: true
    AVCaptureDevice: # DONE
        properties:
            'formats':
                type: NSArray<AVCaptureDeviceFormat>
            '(hasFlash|hasTorch)':
                omit_prefix: true
        methods:
            '-hasMediaType:':
                trim_after_first_colon: true
                parameters:
                    mediaType:
                        type: AVMediaType
            '-lockForConfiguration:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-supportsAVCaptureSessionPreset:':
                trim_after_first_colon: true
                parameters:
                    preset:
                        type: AVCaptureSessionPreset
            '+devices':
                name: getDevices
                return_type: NSArray<AVCaptureDevice>
            '+devicesWithMediaType:':
                name: getDevicesForMediaType
                return_type: NSArray<AVCaptureDevice>
                parameters:
                    mediaType:
                        type: AVMediaType
            '+defaultDeviceWithMediaType:':
                name: getDefaultDeviceForMediaType
                parameters:
                    mediaType:
                        type: AVMediaType
            '+defaultDeviceWithDeviceType:mediaType:position:':
                name: getDefaultDevice
                parameters:
                    mediaType:
                        type: AVMediaType
            '+deviceWithUniqueID:':
                name: getDeviceWithUniqueID
            '-isFlashModeSupported:':
                trim_after_first_colon: true
            '-isTorchModeSupported:':
                trim_after_first_colon: true
            '-setTorchModeOnWithLevel:error:':
                name: setTorchModeOn
                throws: NSErrorException
            '-isFocusModeSupported:':
                trim_after_first_colon: true
            '-setFocusModeLockedWithLensPosition:completionHandler:':
                name: setFocusModeLocked
            '-isExposureModeSupported:':
                trim_after_first_colon: true
            '-setExposureModeCustomWithDuration:ISO:completionHandler:':
                name: setExposureModeCustom
            '-setExposureTargetBias:completionHandler:':
                trim_after_first_colon: true
            '-isWhiteBalanceModeSupported:':
                trim_after_first_colon: true
            '-setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:completionHandler:':
                name: setWhiteBalanceModeLocked
            '-rampToVideoZoomFactor:withRate:':
                trim_after_first_colon: true
            '+authorizationStatusForMediaType:':
                name: getAuthorizationStatusForMediaType
                parameters:
                    mediaType:
                        type: AVMediaType
            '+requestAccessForMediaType:completionHandler:':
                trim_after_first_colon: true
                parameters:
                    mediaType:
                        type: AVMediaType
            '-chromaticityValuesForDeviceWhiteBalanceGains:':
                name: convertDeviceWhiteBalanceGainsToChromaticityValues
            '-deviceWhiteBalanceGainsForChromaticityValues:':
                name: convertChromaticityValuesToDeviceWhiteBalanceGains
            '-temperatureAndTintValuesForDeviceWhiteBalanceGains:':
                name: convertDeviceWhiteBalanceGainsToTemperatureAndTintValues
            '-deviceWhiteBalanceGainsForTemperatureAndTintValues:':
                name: convertTemperatureAndTintValuesToDeviceWhiteBalanceGains
            '+extrinsicMatrixFromDevice:toDevice:':
                name: getExtrinsicMatrix
            '-setPrimaryConstituentDeviceSwitchingBehavior:restrictedSwitchingBehaviorConditions:':
                name: setPrimaryConstituentDeviceSwitchingBehavior
    AVCaptureDeviceFormat: # DONE
        properties:
            'mediaType':
                type: AVMediaType
            'videoSupportedFrameRateRanges':
                type: NSArray<AVFrameRateRange>
        methods:
            '-isVideoStabilizationModeSupported:':
                trim_after_first_colon: true
    AVCaptureDeviceInput: # DONE
        methods:
            '-initWithDevice:error:':
                name: init
                throws: NSErrorException
            '+deviceInputWithDevice:error:':
                exclude: true
            '-portsWithMediaType:sourceDeviceType:sourceDevicePosition:':
                name: getPorts
    AVCaptureDeviceInputSource: {} # DONE
    AVCaptureFileOutput: # DONE
        methods:
            '-startRecordingToOutputFileURL:recordingDelegate:':
                name: startRecording
    AVCaptureInput: # DONE
        properties:
            'ports':
                type: NSArray<AVCaptureInputPort>
    AVCaptureInputPort: # DONE
        properties:
            'mediaType':
                type: AVMediaType
    AVCaptureManualExposureBracketedStillImageSettings: # DONE
        methods:
            '+manualExposureSettingsWithExposureDuration:ISO:':
                name: create
                constructor: true
    AVCaptureMetadataInput: # DONE
        methods:
            '-initWithFormatDescription:clock:':
                name: init
            '-appendTimedMetadataGroup:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '+metadataInputWithFormatDescription:clock:':
                exclude: true
    AVCaptureMetadataOutput: # DONE
        properties:
            'availableMetadataObjectTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataObjectType.AsListMarshaler.class) List<AVMetadataObjectType>'
            'metadataObjectTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataObjectType.AsListMarshaler.class) List<AVMetadataObjectType>'
            'metadataObjectsCallbackQueue':
                annotations: ['@WeaklyLinked']
        skip_def_constructor: true
        methods:
            '+new':
                constructor: true
                name: create
            '-setMetadataObjectsDelegate:queue:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
    AVCaptureMovieFileOutput: # DONE
        properties:
            'metadata':
                type: NSArray<AVMetadataItem>
        skip_def_constructor: true
        methods:
            '+new':
                constructor: true
                name: create
            '-recordsVideoOrientationAndMirroringChangesAsMetadataTrackForConnection:':
                name: recordsVideoOrientationAndMirroringChangesAsMetadataTrack
            '-setRecordsVideoOrientationAndMirroringChanges:asMetadataTrackForConnection:':
                name: setRecordsVideoOrientationAndMirroringChangesAsMetadataTrack
            '-outputSettingsForConnection:':
                name: getOutputSettings
            '-setOutputSettings:forConnection:':
                trim_after_first_colon: true
            '-setPrimaryConstituentDeviceSwitchingBehaviorForRecording:restrictedSwitchingBehaviorConditions:':
                name: setPrimaryConstituentDeviceSwitchingBehaviorForRecording

    AVCaptureOutput: # DONE
        properties:
            'connections':
                type: NSArray<AVCaptureConnection>
        methods:
            '-connectionWithMediaType:':
                name: getConnection
                parameters:
                    mediaType:
                        type: AVMediaType
            '-transformedMetadataObjectForMetadataObject:connection:':
                name: getTransformedMetadataObject
            '-metadataOutputRectOfInterestForRect:':
                name: getRectOfInterestInOutputCoordinates
            '-rectForMetadataOutputRectOfInterest:':
                name: getRectOfInterestInMetadataOutputCoordinates
    AVCaptureSession: # DONE
        properties:
            'sessionPreset':
                type: AVCaptureSessionPreset
            'inputs':
                type: NSArray<AVCaptureInput>
            'outputs':
                type: NSArray<AVCaptureOutput>
        methods:
            '-canSetSessionPreset:':
                trim_after_first_colon: true
                parameters:
                    preset:
                        type: AVCaptureSessionPreset
            '-canAddInput:':
                trim_after_first_colon: true
            '-addInput:':
                trim_after_first_colon: true
            '-removeInput:':
                trim_after_first_colon: true
            '-canAddOutput:':
                trim_after_first_colon: true
            '-addOutput:':
                trim_after_first_colon: true
            '-removeOutput:':
                trim_after_first_colon: true
            '-addInputWithNoConnections:':
                name: addInputWithNoConnections
            '-addOutputWithNoConnections:':
                name: addOutputWithNoConnections
            '-canAddConnection:':
                trim_after_first_colon: true
            '-addConnection:':
                trim_after_first_colon: true
            '-removeConnection:':
                trim_after_first_colon: true
    AVCaptureStillImageOutput: # DONE
        properties:
            'outputSettings':
                name: outputSettings0
                visibility: protected
            'availableImageDataCVPixelFormatTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CVPixelFormatType.AsListMarshaler.class) List<CVPixelFormatType>'
            'availableImageDataCodecTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CMVideoCodecType.AsListMarshaler.class) List<CMVideoCodecType>'
        skip_def_constructor: true
        methods:
            '+new':
                constructor: true
                name: create
            '-captureStillImageAsynchronouslyFromConnection:completionHandler:':
                name: captureStillImageAsynchronously
            '+jpegStillImageNSDataRepresentation:':
                name: createJPEGStillImageNSDataRepresentation
            '-prepareToCaptureStillImageBracketFromConnection:withSettingsArray:completionHandler:':
                name: prepareToCaptureStillImageBracket
                parameters:
                    settings:
                        type: NSArray<AVCaptureBracketedStillImageSettings>
            '-captureStillImageBracketAsynchronouslyFromConnection:withSettingsArray:completionHandler:':
                name: captureStillImageBracketAsynchronously
                parameters:
                    settings:
                        type: NSArray<AVCaptureBracketedStillImageSettings>
    AVCaptureVideoDataOutput: # DONE
        properties:
            'videoSettings':
                name: videoSettings0
                visibility: protected
            'availableVideoCVPixelFormatTypes':
                type: List<CVPixelFormatType>
                marshaler: CVPixelFormatType.AsListMarshaler
                annotations: ['@WeaklyLinked']
            'availableVideoCodecTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CMVideoCodecType.AsListMarshaler.class) List<CMVideoCodecType>'
            'sampleBufferCallbackQueue':
                annotations: ['@WeaklyLinked']
        skip_def_constructor: true
        methods:
            '+new':
                constructor: true
                name: create
            '-setSampleBufferDelegate:queue:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
            '-recommendedVideoSettingsForAssetWriterWithOutputFileType:':
                name: getRecommendedVideoSettings0
                visibility: protected
                parameters:
                    outputFileType:
                        type: String
            '-recommendedVideoSettingsForVideoCodecType:assetWriterOutputFileType:':
                name: getRecommendedVideoSettings
            '-availableVideoCodecTypesForAssetWriterWithOutputFileType:':
                name: getAvailableVideoCodecTypes
            '-recommendedVideoSettingsForVideoCodecType:assetWriterOutputFileType:outputFileURL:':
                name: getRecommendedVideoSettings
    AVCaptureVideoPreviewLayer: # DONE
        properties:
            'videoGravity':
                type: AVLayerVideoGravity
        methods:
            '-initWithSessionWithNoConnection:':
                name: initWithNoConnection
                constructor: false
            '-initWithSession:':
                name: init
            '-captureDevicePointOfInterestForPoint:':
                name: captureDevicePointOfInterest
            '-pointForCaptureDevicePointOfInterest:':
                name: getDevicePointOfInterest
            '-metadataOutputRectOfInterestForRect:':
                name: getRectOfInterestInLayerCoordinates
            '-rectForMetadataOutputRectOfInterest:':
                name: getRectOfInterestInMetadataOutputCoordinates
            '-transformedMetadataObjectForMetadataObject:':
                name: getTransformedMetadataObject
            '+layerWithSession.*':
                exclude: true
            '-setSessionWithNoConnection:':
                name: setSessionWithNoConnection
    AVComposition: # DONE
        skip_handle_constructor: false
        properties:
            'tracks':
                type: NSArray<AVAssetTrack>
            'URLAssetInitializationOptions':
                type: AVURLAssetOptions
        methods:
            '-trackWithTrackID:':
                name: getTrack
            '-tracksWithMediaType:':
                name: getTracksForMediaType
                return_type: NSArray<AVCompositionTrack>
                parameters:
                    mediaType:
                        type: AVMediaType
            '-tracksWithMediaCharacteristic:':
                name: getTracksForMediaCharacteristic
                return_type: NSArray<AVCompositionTrack>
                parameters:
                    mediaCharacteristic:
                        type: AVMediaCharacteristic
#            '-loadTrackWithTrackID:completionHandler:':
#                name: loadTrack
#            '-loadTracksWithMediaType:completionHandler:':
#                name: loadTracksWithMediaType
#            '-loadTracksWithMediaCharacteristic:completionHandler:':
#                name: loadTracksWithMediaCharacteristic
    AVCompositionTrack: # DONE
        properties:
            'segments':
                type: NSArray<AVAssetTrackSegment>
    AVCompositionTrackSegment: # DONE
        methods:
            '-initWithURL:trackID:sourceTimeRange:targetTimeRange:':
                name: init
            '-initWithTimeRange:':
                name: init
            '+compositionTrackSegmentWith.*':
                exclude: true
    AVDateRangeMetadataGroup: # DONE
        properties:
            'items':
                type: NSArray<AVMetadataItem>
        methods:
            '-initWithItems:startDate:endDate:':
                name: init
                parameters:
                    items:
                        type: NSArray<AVMetadataItem>
    AVFragmentedAsset:
        methods:
            '+fragmentedAssetWithURL:options:':
                exclude: true
            '-trackWithTrackID:':
                name: getTrack
            '-tracksWithMediaType:':
                name: getTracksForMediaType
            '-tracksWithMediaCharacteristic:':
                name: getTracksForMediaCharacteristic
#            '-loadTrackWithTrackID:completionHandler:':
#                name: loadTrack
#            '-loadTracksWithMediaType:completionHandler:':
#                name: loadTracksWithMediaType
#            '-loadTracksWithMediaCharacteristic:completionHandler:':
#                name: loadTracksWithMediaCharacteristic
    AVFragmentedAssetTrack: {} # DONE
    AVFrameRateRange: {} # DONE
    AVMediaSelection: # DONE
        methods:
            '-selectedMediaOptionInMediaSelectionGroup:':
                name: getSelectedMediaOptionInMediaSelectionGroup
            '-mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup:':
                trim_after_first_colon: true
    AVMediaSelectionGroup: # DONE
        properties:
            'options':
                type: NSArray<AVMediaSelectionOption>
        methods:
            '-mediaSelectionOptionWithPropertyList:':
                name: getMediaSelectionOption
                parameters:
                    plist:
                        type: NSPropertyList
            '+playableMediaSelectionOptionsFromArray:':
                name: filterPlayableMediaSelectionOptions
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
            '+mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:':
                name: filterMediaSelectionOptionsByPreferredLanguages
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
                    preferredLanguages:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+mediaSelectionOptionsFromArray:withLocale:':
                name: filterMediaSelectionOptionsByLocale
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
            '+mediaSelectionOptionsFromArray:withMediaCharacteristics:':
                name: filterMediaSelectionOptionsWithMediaCharacteristics
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
                    mediaCharacteristics:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
            '+mediaSelectionOptionsFromArray:withoutMediaCharacteristics:':
                name: filterMediaSelectionOptionsWithoutMediaCharacteristics
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
                    mediaCharacteristics:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
    AVMediaSelectionOption: # DONE
        properties:
            'mediaType':
                type: AVMediaType
            'mediaSubTypes':
                type: "NSArray<NSNumber>"
            'commonMetadata':
                type: NSArray<AVMetadataItem>
            'availableMetadataFormats':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataFormat.AsListMarshaler.class) List<AVMetadataFormat>'
        methods:
            '-hasMediaCharacteristic:':
                trim_after_first_colon: true
                parameters:
                    mediaCharacteristic:
                        type: AVMediaCharacteristic
            '-metadataForFormat:':
                name: getMetadata
                parameters:
                    format:
                        type: AVMetadataFormat
                return_type: NSArray<AVMetadataItem>
            '-associatedMediaSelectionOptionInMediaSelectionGroup:':
                name: getAssociatedMediaSelectionOption
            '-propertyList':
                property: true
                return_type: NSPropertyList
            '-displayNameWithLocale:':
                name: getDisplayName
    AVMetadataFaceObject: {} # DONE
    AVMetadataGroup: # DONE
        properties:
            'items':
                type: NSArray<AVMetadataItem>
    AVMetadataItem: # DONE
        properties:
            'identifier':
                type: AVMetadataIdentifier
            'key':
                type: AVMetadataKey
            'commonKey':
                type: AVMetadataKeyCommon
            'keySpace':
                type: AVMetadataKeySpace
            'dataType':
                type: CMMetadataDataType
            'value':
                type: NSObject
            'extraAttributes':
                type: AVMetadataExtraAttributes
        methods:
            '-statusOfValueForKey:error:':
                name: getStatusOfValue
                throws: NSErrorException
                parameters:
                    key:
                        type: AVMetadataKey
            '-loadValuesAsynchronouslyForKeys:completionHandler:':
                name: loadValuesAsynchronously
                parameters:
                    keys:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataKey.AsListMarshaler.class) List<AVMetadataKey>'
            '+metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:':
                name: filterMetadataItemsByPreferredLanguages
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
                    preferredLanguages:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+metadataItemsFromArray:withLocale:':
                name: filterMetadataItemsByLocale
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
            '+metadataItemsFromArray:withKey:keySpace:':
                name: filterMetadataItemsByKey
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
                    key:
                        type: AVMetadataKey
                    keySpace:
                        type: AVMetadataKeySpace
            '+metadataItemsFromArray:filteredByMetadataItemFilter:':
                name: filterMetadataItems
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
            '+metadataItemsFromArray:filteredByIdentifier:':
                name: filterMetadataItemsByIdentifier
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
                    identifier:
                        type: AVMetadataIdentifier
            '+identifierForKey:keySpace:':
                name: getIdentifierForKey
                return_type: AVMetadataIdentifier
                parameters:
                    key:
                        type: AVMetadataKey
                    keySpace:
                        type: AVMetadataKeySpace
            '+keySpaceForIdentifier:':
                name: getKeySpaceForIdentifier
                return_type: AVMetadataKeySpace
                parameters:
                    identifier:
                        type: AVMetadataIdentifier
            '+keyForIdentifier:':
                name: getKeyForIdentifier
                return_type: AVMetadataKey
                parameters:
                    identifier:
                        type: AVMetadataIdentifier
            '+metadataItemWithPropertiesOfMetadataItem:valueLoadingHandler:':
                name: create
                constructor: true
                parameters:
                    handler:
                        type: '@Block VoidBlock1<AVMetadataItemValueRequest>'
    AVMetadataItemFilter: # DONE
        methods:
            '+metadataItemFilterForSharing':
                name: getSharingFilter
    AVMetadataItemValueRequest: # DONE
        methods:
            '-respondWithValue:':
                name: respond
                return_type: void
                parameters:
                    value:
                        type: NSObject
            '-respondWithError:':
                name: respond
    AVMetadataMachineReadableCodeObject: # DONE
        properties:
            'corners':
                type: 'NSArray<NSDictionary<?, ?>>'
    AVMetadataObject: # DONE
        properties:
            'type':
                type: AVMetadataObjectType
    AVMIDIPlayer: # DONE
        methods:
            '-init.*':
                name: init
                throws: NSErrorException
            '-play:':
                trim_after_first_colon: true
    AVMusicTrack:
        methods:
            '-addEvent:atBeat:':
                name: addEvent
            '-moveEventsInRange:byAmount:':
                name: moveEvents
            '-copyEventsInRange:fromTrack:insertAtBeat:':
                name: copyEvents
            '-copyAndMergeEventsInRange:fromTrack:mergeAtBeat:':
                name: copyAndMergeEvents
            '-enumerateEventsInRange:usingBlock:':
                name: enumerateEvents

    AVMutableAudioMix: # DONE
        properties:
            'inputParameters':
                type: NSArray<AVAudioMixInputParameters>
        methods:
            '+audioMix':
                exclude: true
    AVMutableAudioMixInputParameters: # DONE
        properties:
            'audioTimePitchAlgorithm':
                type: AVAudioTimePitchAlgorithm
            'audioTapProcessor':
                annotations: ['@WeaklyLinked']
        methods:
            '-setVolumeRampFromStartVolume:toEndVolume:timeRange:':
                name: setVolumeRamp
            '-setVolume:atTime:':
                trim_after_first_colon: true
            '+audioMixInputParametersWithTrack:':
                name: create
                constructor: true
            '+audioMixInputParameters':
                exclude: true
    AVMutableComposition: # DONE
        properties:
            'tracks':
                type: NSArray<AVAssetTrack>
        methods:
            '+composition':
                exclude: true
            '+compositionWithURLAssetInitializationOptions:':
                name: create
                constructor: true
                parameters:
                    URLAssetInitializationOptions:
                        name: urlAssetInitializationOptions
                        type: AVURLAssetOptions
            '-insertTimeRange:ofAsset:atTime:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-insertEmptyTimeRange:':
                trim_after_first_colon: true
            '-removeTimeRange:':
                trim_after_first_colon: true
            '-scaleTimeRange:toDuration:':
                trim_after_first_colon: true
            '-addMutableTrackWithMediaType:preferredTrackID:':
                name: addMutableTrack
                parameters:
                    mediaType:
                        type: AVMediaType
            '-removeTrack:':
                trim_after_first_colon: true
            '-mutableTrackCompatibleWithTrack:':
                name: getCompatibleMutableTrack
            '-trackWithTrackID:':
                name: getTrack
            '-tracksWithMediaType:':
                name: getTracksForMediaType
                return_type: NSArray<AVCompositionTrack>
                parameters:
                    mediaType:
                        type: AVMediaType
            '-tracksWithMediaCharacteristic:':
                name: getTracksForMediaCharacteristic
                return_type: NSArray<AVCompositionTrack>
                parameters:
                    mediaCharacteristic:
                        type: AVMediaCharacteristic
            '-insertTimeRange:ofAsset:atTime:completionHandler:':
                name: insertTimeRange
#            '-loadTrackWithTrackID:completionHandler:':
#                name: loadMutableCompositionTrack
#            '-loadTracksWithMediaType:completionHandler:':
#                name: loadTracksWithMediaType
#            '-loadTracksWithMediaCharacteristic:completionHandler:':
#                name: loadTracksWithMediaCharacteristic
                
    AVMutableCompositionTrack: # DONE
        properties:
            'segments':
                type: NSArray<AVAssetTrackSegment>
        methods:
            '-insertTimeRange:ofTrack:atTime:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-insertTimeRanges:ofTracks:atTime:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    timeRanges:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(CMTimeRange.AsValuedListMarshaler.class) List<CMTimeRange>'
                    tracks:
                        type: NSArray<AVAssetTrack>
            '-insertEmptyTimeRange:':
                trim_after_first_colon: true
            '-removeTimeRange:':
                trim_after_first_colon: true
            '-scaleTimeRange:toDuration:':
                trim_after_first_colon: true
            '-validateTrackSegments:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    trackSegments:
                        type: NSArray<AVCompositionTrackSegment>
            '-addTrackAssociationToTrack:type:':
                name: addTrackAssociation
            '-removeTrackAssociationToTrack:type:':
                name: removeTrackAssociation
            '-replaceFormatDescription:withFormatDescription:':
                name: replaceFormatDescription
    AVMutableDateRangeMetadataGroup: # DONE
        properties:
            'items':
                type: NSArray<AVMetadataItem>
    AVMutableMediaSelection: # DONE
        methods:
            '-selectMediaOption:inMediaSelectionGroup:':
                trim_after_first_colon: true
    AVMutableMetadataItem: # DONE
        properties:
            'identifier':
                type: AVMetadataIdentifier
            'dataType':
                type: CMMetadataDataType
            'key':
                type: AVMetadataKey
            'keySpace':
                type: AVMetadataKeySpace
            'value':
                type: NSObject
            'extraAttributes':
                type: AVMetadataExtraAttributes
        methods:
            '+metadataItem':
                exclude: true
    AVMutableTimedMetadataGroup: # DONE
        properties:
            'items':
                type: NSArray<AVMetadataItem>
    AVMutableVideoComposition: # DONE
        properties:
            'customVideoCompositorClass':
                type: 'Class<? extends AVVideoCompositing>'
            'instructions':
                type: NSArray<AVVideoCompositionInstruction>
        methods:
            '+videoComposition':
                exclude: true
            '+videoCompositionWithPropertiesOfAsset:':
                name: create
                constructor: true
            '+videoCompositionWithAsset:applyingCIFiltersWithHandler:':
                name: create
                constructor: true
                parameters:
                    applier:
                        name: ciFiltersApplier
                        type: '@Block VoidBlock1<AVAsynchronousCIImageFilteringRequest>'
            '+videoCompositionWithPropertiesOfAsset:prototypeInstruction:':
                name: create
                constructor: true
            '+videoCompositionWithPropertiesOfAsset:prototypeInstruction:completionHandler:':
                name: create
                constructor: true
            '+videoCompositionWithPropertiesOfAsset:completionHandler:':
                name: create0
                constructor: true
            '+videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:':
                name: create0
                constructor: true
    AVMutableVideoCompositionInstruction: # DONE
        properties:
            'layerInstructions':
                type: NSArray<AVVideoCompositionLayerInstruction>
            'enablePostProcessing':
                name: postProcessingEnabled
        methods:
            '+videoCompositionInstruction':
                exclude: true
    AVMutableVideoCompositionLayerInstruction: # DONE
        methods:
            '-setTransformRampFromStartTransform:toEndTransform:timeRange:':
                name: setTransformRamp
            '-setTransform:atTime:':
                trim_after_first_colon: true
            '-setOpacityRampFromStartOpacity:toEndOpacity:timeRange:':
                name: setOpacityRamp
            '-setOpacity:atTime:':
                trim_after_first_colon: true
            '-setCropRectangleRampFromStartCropRectangle:toEndCropRectangle:timeRange:':
                name: setCropRectangleRamp
            '-setCropRectangle:atTime:':
                trim_after_first_colon: true
            '+videoCompositionLayerInstructionWithAssetTrack:':
                name: create
                constructor: true
            '+videoCompositionLayerInstruction':
                exclude: true
    AVOutputSettingsAssistant: # DONE
        properties:
            'audioSettings':
                type: AVAudioSettings
            'videoSettings':
                type: AVVideoSettings
        methods:
            '+availableOutputSettingsPresets':
                name: getAvailableOutputSettingsPresets
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(AVOutputSettingsPreset.AsListMarshaler.class) List<AVOutputSettingsPreset>'
            '+outputSettingsAssistantWithPreset:':
                name: create
                constructor: true
                parameters:
                    presetIdentifier:
                        type: AVOutputSettingsPreset
    AVPlayer: # DONE
        properties:
            'outputObscuredDueToInsufficientExternalProtection':
                omit_prefix: true
        methods:
            '-initWithURL:':
                name: init
            '-initWithPlayerItem:':
                name: init
            '+playerWithURL:':
                exclude: true
            '+playerWithPlayerItem:':
                exclude: true
            '-replaceCurrentItemWithPlayerItem:':
                name: replaceCurrentItem
            '-currentTime':
                property: true
            '-seekToDate:':
                trim_after_first_colon: true
            '-seekToDate:completionHandler:':
                trim_after_first_colon: true
            '-seekToTime.*':
                trim_after_first_colon: true
            '-setRate:time:atHostTime:':
                trim_after_first_colon: true
            '-prerollAtRate:completionHandler:':
                trim_after_first_colon: true
            '-addPeriodicTimeObserverForInterval:queue:usingBlock:':
                name: addPeriodicTimeObserver
                annotations: ['@WeaklyLinked']
            '-addBoundaryTimeObserverForTimes:queue:usingBlock:':
                name: addBoundaryTimeObserver
                annotations: ['@WeaklyLinked']
                parameters:
                    times:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(CMTime.AsValuedListMarshaler.class) List<CMTime>'
            '-removeTimeObserver:':
                trim_after_first_colon: true
            '-setMediaSelectionCriteria:forMediaCharacteristic:':
                trim_after_first_colon: true
            '-mediaSelectionCriteriaForMediaCharacteristic:':
                name: getMediaSelectionCriteria
            '-playImmediatelyAtRate:':
                name: playImmediatelyAtRate
    AVPlayerItem: # DONE
        properties:
            'tracks':
                type: NSArray<AVPlayerItemTrack>
            'timedMetadata':
                type: NSArray<AVMetadataItem>
            'automaticallyLoadedAssetKeys':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'seekableTimeRanges':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CMTimeRange.AsValuedListMarshaler.class) List<CMTimeRange>'
            'textStyleRules':
                type: NSArray<AVTextStyleRule>
            'loadedTimeRanges':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CMTimeRange.AsValuedListMarshaler.class) List<CMTimeRange>'
            'outputs':
                type: NSArray<AVPlayerItemOutput>
            'seekingWaitsForVideoCompositionRendering':
                omit_prefix: true
        methods:
            '-initWithURL:':
                name: init
            '-initWithAsset:':
                name: init
            '-initWithAsset:automaticallyLoadedAssetKeys:':
                name: init
                parameters:
                    automaticallyLoadedAssetKeys:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+playerItemWith.*':
                exclude: true
            '-currentTime':
                property: true
            '-seekToTime.*':
                trim_after_first_colon: true
            '-currentDate':
                property: true
            '-seekToDate.*':
                trim_after_first_colon: true
            '-stepByCount:':
                trim_after_first_colon: true
            '-selectMediaOption:inMediaSelectionGroup:':
                trim_after_first_colon: true
            '-selectMediaOptionAutomaticallyInMediaSelectionGroup:':
                name: selectMediaOptionAutomatically
            '-selectedMediaOptionInMediaSelectionGroup:':
                name: getSelectedMediaOption
            '-accessLog':
                property: true
            '-errorLog':
                property: true
            '-addOutput:':
                trim_after_first_colon: true
            '-removeOutput:':
                trim_after_first_colon: true
            '-addMediaDataCollector:':
                trim_after_first_colon: true
            '-removeMediaDataCollector:':
                trim_after_first_colon: true
            '-copyWithZone:':
                name: copyWithZone
    AVPlayerItemAccessLog: # DONE
        properties:
            'events':
                type: NSArray<AVPlayerItemAccessLogEvent>
        methods:
            '-extendedLogData':
                property: true
    AVPlayerItemAccessLogEvent: {} # DONE
    AVPlayerItemErrorLog: # DONE
        properties:
            'events':
                type: NSArray<AVPlayerItemErrorLogEvent>
        methods:
            '-extendedLogData':
                property: true
    AVPlayerItemErrorLogEvent: {} # DONE
    AVPlayerItemLegibleOutput: # DONE
        properties:
            'delegateQueue':
                annotations: ['@WeaklyLinked']
            'textStylingResolution':
                type: AVPlayerItemLegibleOutputTextStylingResolution
        methods:
            '-setDelegate:queue:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
            '-initWithMediaSubtypesForNativeRepresentation:':
                name: init
                parameters:
                    subtypes:
                        type: "NSArray<NSNumber>"
    AVPlayerItemMediaDataCollector: {}
    AVPlayerItemMetadataCollector:
        methods:
            '-setDelegate:queue:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
            '-initWithIdentifiers:classifyingLabels:':
                name: init
    AVPlayerItemMetadataOutput: # DONE
        properties:
            'delegateQueue':
                annotations: ['@WeaklyLinked']
        methods:
            '-initWithIdentifiers:':
                name: init
                parameters:
                    identifiers:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataIdentifier.AsListMarshaler.class) List<AVMetadataIdentifier>'
            '-setDelegate:queue:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
    AVPlayerItemOutput: # DONE
        methods:
            '-itemTimeForHostTime:':
                name: getItem
            '-itemTimeForMachAbsoluteTime:':
                name: getItem
    AVPlayerItemTrack: {} # DONE
    AVPlayerItemVideoOutput: # DONE
        properties:
            'delegateQueue':
                annotations: ['@WeaklyLinked']
        methods:
            '-initWithPixelBufferAttributes:':
                name: init
                annotations: ['@WeaklyLinked']
                parameters:
                    pixelBufferAttributes:
                        type: CVPixelBufferAttributes
            '-initWithOutputSettings:':
                name: init
                annotations: ['@WeaklyLinked']
            '-hasNewPixelBufferForItemTime:':
                trim_after_first_colon: true
            '-copyPixelBufferForItemTime:itemTimeForDisplay:':
                name: getPixelBufferForItemTime
                return_marshaler: CFType.NoRetainMarshaler
                annotations: ['@WeaklyLinked']
            '-setDelegate:queue:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
            '-requestNotificationOfMediaDataChangeWithAdvanceInterval:':
                name: requestNotificationOfMediaDataChange
    AVPlayerLayer: # DONE
        annotations: ['@WeaklyLinked']
        properties:
            'videoGravity':
                type: AVLayerVideoGravity
            'pixelBufferAttributes':
                type: CVPixelBufferAttributes
        methods:
            '+playerLayerWithPlayer:':
                name: create
                constructor: true
    AVPlayerLooper:
        methods:
            '-initWithPlayer:templateItem:timeRange:':
                name: init
            '-initWithPlayer:templateItem:timeRange:existingItemsOrdering:':
                name: init
            '+playerLooperWithPlayer:templateItem:timeRange:':
                exclude: true
            '+playerLooperWithPlayer:templateItem:':
                name: create
                constructor: true

    AVPlayerMediaSelectionCriteria: # DONE
        properties:
            'preferredLanguages':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'preferredMediaCharacteristics':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
        methods:
            '-initWithPreferredLanguages:preferredMediaCharacteristics:':
                name: init
                parameters:
                    preferredLanguages:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
                    preferredMediaCharacteristics:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
            '-initWithPrincipalMediaCharacteristics:preferredLanguages:preferredMediaCharacteristics:':
                name: init
    AVQueuePlayer: # DONE
        methods:
            '-initWithItems:':
                name: init
                parameters:
                    items:
                        type: NSArray<AVPlayerItem>
            '-items':
                property: true
                return_type: NSArray<AVPlayerItem>
            '-canInsertItem:afterItem:':
                trim_after_first_colon: true
            '-insertItem:afterItem:':
                trim_after_first_colon: true
            '-removeItem:':
                trim_after_first_colon: true
            '+queuePlayerWithItems:':
                exclude: true
    AVSampleBufferDisplayLayer: # DONE
        annotations: ['@WeaklyLinked']
        properties:
            'videoGravity':
                type: AVLayerVideoGravity
        methods:
            '-enqueueSampleBuffer:':
                trim_after_first_colon: true
            '-requestMediaDataWhenReadyOnQueue:usingBlock:':
                trim_after_first_colon: true
                annotations: ['@WeaklyLinked']
    AVSpeechSynthesisVoice: # DONE
        methods:
            '+speechVoices':
                name: getSpeechVoices
                return_type: NSArray<AVSpeechSynthesisVoice>
            '+currentLanguageCode':
                name: getCurrentLanguageCode
            '+voiceWithLanguage:':
                name: create
                constructor: true
            '+voiceWithIdentifier:':
                name: create
                constructor: true
                parameters:
                    identifier:
                        type: AVSpeechSynthesisVoiceIdentifier
    AVSpeechSynthesizer: # DONE
        methods:
            '-speakUtterance:':
                name: enqueueSpeakUtterance
            '-stopSpeakingAtBoundary:':
                name: stopSpeaking
            '-pauseSpeakingAtBoundary:':
                name: pauseSpeaking
            '-writeUtterance:toBufferCallback:':
                name: writeUtterance
            '-writeUtterance:toBufferCallback:toMarkerCallback:':
                name: writeUtterance
            '+requestPersonalVoiceAuthorizationWithCompletionHandler:':
                name: requestPersonalVoiceAuthorization
    AVSpeechUtterance: # DONE
        methods:
            '-initWithString:':
                name: init
            '+speechUtteranceWithString:':
                exclude: true
            '-initWithAttributedString:':
                name: init
            '+speechUtteranceWithAttributedString:':
                exclude: true
            '-initWithSSMLRepresentation:':
                static_constructor_name: createWithSSMLRepresentation
                name: initWithSSMLRepresentation
            '+speechUtteranceWithSSMLRepresentation:':
                exclude: true
    AVSynchronizedLayer: # DONE
        annotations: ['@WeaklyLinked']
        methods:
            '+synchronizedLayerWithPlayerItem:':
                name: create
                constructor: true
    AVTextStyleRule: # DONE
        properties:
            'textMarkupAttributes':
                type: CMTextMarkupAttributes
        methods:
            '-init.*':
                name: init
                parameters:
                    textMarkupAttributes:
                        type: CMTextMarkupAttributes
            '+propertyListForTextStyleRules:':
                name: createPropertyList
                return_type: NSPropertyList
                parameters:
                    textStyleRules:
                        type: NSArray<AVTextStyleRule>
            '+textStyleRulesFromPropertyList:':
                name: createTextStyleRulesArray
                return_type: NSArray<AVTextStyleRule>
                parameters:
                    plist:
                        type: NSPropertyList
            '+textStyleRuleWith.*':
                exclude: true
    AVTimedMetadataGroup: # DONE
        properties:
            'items':
                type: NSArray<AVMetadataItem>
        methods:
            '-initWithItems:timeRange:':
                name: init
                parameters:
                    items:
                        type: NSArray<AVMetadataItem>
            '-init.*':
                name: init
            '-copyFormatDescription':
                name: getFormatDescription
                return_marshaler: CFType.NoRetainMarshaler
                annotations: ['@WeaklyLinked']
    AVURLAsset: # DONE
        skip_handle_constructor: false
        methods:
            '-initWithURL:options:':
                name: init
                parameters:
                    options:
                        type: AVURLAssetOptions
            '+audiovisualTypes':
                property: true
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '+audiovisualMIMETypes':
                property: true
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '+isPlayableExtendedMIMEType:':
                trim_after_first_colon: true
            '+URLAssetWithURL:options:':
                exclude: true
            '-compatibleTrackForCompositionTrack:':
                name: getCompatibleTrack
            '-findCompatibleTrackForCompositionTrack:completionHandler:':
                name: findCompatibleTrackForCompositionTrack
    AVVideoComposition: # DONE
        skip_handle_constructor: false
        properties:
            'instructions':
                type: NSArray<AVVideoCompositionInstruction>
            'customVideoCompositorClass':
                type: 'Class<? extends AVVideoCompositing>'
        methods:
            '+videoCompositionWithPropertiesOfAsset:':
                name: create
                constructor: true
            '+videoCompositionWithAsset:applyingCIFiltersWithHandler:':
                name: create
                constructor: true
                parameters:
                    applier:
                        name: ciFiltersApplier
                        type: '@Block VoidBlock1<AVAsynchronousCIImageFilteringRequest>'
            '-isValidForAsset:timeRange:validationDelegate:':
                name: isValid
            '+videoCompositionWithPropertiesOfAsset:completionHandler:':
                name: create
                constructor: true
            '+videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:':
                name: create
                constructor: true
            '-determineValidityForAsset:timeRange:validationDelegate:completionHandler:':
                name: determineValidityForAsset
    AVVideoCompositionCoreAnimationTool: # DONE
        methods:
            '+videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:':
                name: create
                constructor: true
                annotations: ['@WeaklyLinked']
            '+videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:':
                name: create
                constructor: true
                annotations: ['@WeaklyLinked']
            '+videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:inLayer:':
                name: create
                constructor: true
                annotations: ['@WeaklyLinked']
                parameters:
                    videoLayers:
                        type: NSArray<CALayer>
    AVVideoCompositionInstruction:
        properties:
            'enablePostProcessing':
                name: postProcessingEnabled
            'layerInstructions':
                type: NSArray<AVVideoCompositionLayerInstruction>
            'requiredSourceTrackIDs':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsIntegerListMarshaler.class) List<Integer>'

    AVVideoCompositionLayerInstruction: # DONE
        skip_handle_constructor: false
        methods:
            '-getTransformRampForTime:startTransform:endTransform:timeRange:':
                name: getTransformRamp
                visibility: protected
                parameters:
                    startTransform:
                        type: CGAffineTransform.CGAffineTransformPtr
                    endTransform:
                        type: CGAffineTransform.CGAffineTransformPtr
                    timeRange:
                        type: CMTimeRange.CMTimeRangePtr
            '-getOpacityRampForTime:startOpacity:endOpacity:timeRange:':
                name: getOpacityRamp
                visibility: protected
                parameters:
                    timeRange:
                        type: CMTimeRange.CMTimeRangePtr
            '-getCropRectangleRampForTime:startCropRectangle:endCropRectangle:timeRange:':
                name: getCropRectangleRamp
                visibility: protected
                parameters:
                    startCropRectangle:
                        type: CGRect.CGRectPtr
                    endCropRectangle:
                        type: CGRect.CGRectPtr
                    timeRange:
                        type: CMTimeRange.CMTimeRangePtr
    AVVideoCompositionRenderContext: # DONE
        methods:
            '-newPixelBuffer':
                return_marshaler: CFType.NoRetainMarshaler
                annotations: ['@WeaklyLinked']

    AVCapturePhotoOutput:
        skip_def_constructor: true
        methods:
            '+new':
                constructor: true
                name: create
            '-capturePhotoWithSettings:delegate:':
                name: capturePhotoWithSettings
            '-setPreparedPhotoSettingsArray:completionHandler:':
                name: setPreparedPhotoSettingsArray
            '+JPEGPhotoDataRepresentationForJPEGSampleBuffer:previewPhotoSampleBuffer:':
                name: JPEGPhotoDataRepresentationForJPEGSampleBuffer
            '+DNGPhotoDataRepresentationForRawSampleBuffer:previewPhotoSampleBuffer:':
                name: DNGPhotoDataRepresentationForRawSampleBuffer

    AVCapturePhotoSettings:
        methods:
            '+photoSettings':
                exclude: true
            '+photoSettingsWithFormat:':
                name: create
                constructor: true
            '+photoSettingsWithRawPixelFormatType:':
                name: create
                constructor: true
            '+photoSettingsWithRawPixelFormatType:processedFormat:':
                name: create
                constructor: true
            '+photoSettingsFromPhotoSettings:':
                name: create
                constructor: true
            '+photoSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:':
                name: create
                constructor: true

    AVCapturePhotoBracketSettings:
        methods:
            '+photoBracketSettingsWithRawPixelFormatType:processedFormat:bracketedSettings:':
                name: create
                constructor: true
            '+photoBracketSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:bracketedSettings:':
                name: create
                constructor: true

    AVCaptureResolvedPhotoSettings: {}

    AVCaptureDeviceDiscoverySession:
        methods:
            '+discoverySessionWithDeviceTypes:mediaType:position:':
                name: create
                constructor: true
                parameters:
                    deviceTypes:
                        type: NSArray<NSString>

    AVContentKeyRequest:
        methods:
            '-makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:':
                trim_after_first_colon: true


    AVContentKeyResponse: #since 10.3
        methods:
            '+contentKeyResponseWithClearKeyData:initializationVector:':
                constructor: true
                name: create
            '+contentKeyResponseWithFairPlayStreamingKeyResponseData:':
                constructor: true
                name: create
            '+contentKeyResponseWithAuthorizationTokenData:':
                constructor: false
                name: createUsingAuthTokenData
    AVContentKeySession:
        methods:
            '-setDelegate:queue:':
                name: setDelegate
            '-processContentKeyRequestWithIdentifier:initializationData:options:':
                trim_after_first_colon: true
            '+contentKeySessionWithKeySystem:storageDirectoryAtURL:':
                name: create
                constructor: true
            '+contentKeySessionWithKeySystem:':
                name: create
                constructor: true
            '+pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:':
                trim_after_first_colon: true
            '+removePendingExpiredSessionReports:withAppIdentifier:storageDirectoryAtURL:':
                trim_after_first_colon: true
            '-makeSecureTokenForExpirationDateOfPersistableContentKey:completionHandler:':
                trim_after_first_colon: true
            '-invalidatePersistableContentKey:options:completionHandler:':
                name: invalidatePersistableContentKey
            '-invalidateAllPersistableContentKeysForApp:options:completionHandler:':
                name: invalidateAllPersistableContentKeys
    AVPersistableContentKeyRequest:
        methods:
            '-persistableContentKeyFromKeyVendorResponse:options:error:':
                trim_after_first_colon: true
    AVAggregateAssetDownloadTask: {} #since 11.0
    AVAssetDownloadStorageManagementPolicy: {} #since 11.0
    AVAssetDownloadStorageManager: #since 11.0
        methods:
            '-setStorageManagementPolicy:forURL:':
                trim_after_first_colon: true
    AVCameraCalibrationData: {} #since 11.0
    AVCaptureDataOutputSynchronizer: #since 11.0
        methods:
            '-setDelegate:queue:':
                trim_after_first_colon: true
            '-initWithDataOutputs:':
                name: init
    AVCaptureDepthDataOutput: #since 11.0
        skip_def_constructor: true
        methods:
            '+new':
                constructor: true
                name: create
            '-setDelegate:callbackQueue:':
                trim_after_first_colon: true
    AVCapturePhoto: #since 11.0
        methods:
            '-fileDataRepresentationWithReplacementMetadata:replacementEmbeddedThumbnailPhotoFormat:replacementEmbeddedThumbnailPixelBuffer:replacementDepthData:':
                name: fileDataRepresentation
            '-fileDataRepresentationWithCustomizer:':
                name: fileDataRepresentation
    AVCaptureSynchronizedData: {} #since 11.0
    AVCaptureSynchronizedDataCollection: {} #since 11.0
    AVCaptureSynchronizedDepthData: {} #since 11.0
    AVCaptureSynchronizedMetadataObjectData: {} #since 11.0
    AVCaptureSynchronizedSampleBufferData: {} #since 11.0
    AVDepthData: #since 11.0
        methods:
            '-depthDataByReplacingDepthDataMapWithPixelBuffer:error:':
                throws: NSErrorException
                trim_after_first_colon: true
            '+depthDataFromDictionaryRepresentation:error:':
                throws: NSErrorException
                trim_after_first_colon: true
    AVMutableAssetDownloadStorageManagementPolicy: {} #since 11.0
    AVRouteDetector: {} #since 11.0
    AVSampleBufferAudioRenderer: #since 11.0
        methods:
            '-flushFromSourceTime:completionHandler:':
                name: flushFromSourceTime
    AVSampleBufferRenderSynchronizer: #since 11.0
        methods:
            '-setRate:time:':
                trim_after_first_colon: true
            '-setRate:time:atHostTime:':
                trim_after_first_colon: true
            '-removeRenderer:atTime:completionHandler:':
                trim_after_first_colon: true
            '-addPeriodicTimeObserverForInterval:queue:usingBlock:':
                name: addPeriodicTimeObserver
            '-addBoundaryTimeObserverForTimes:queue:usingBlock:':
                name: addBoundaryTimeObserver
    AVAssetResourceLoadingRequestor: {} #since 12.0
    AVCaptureSystemPressureState: {} #since 11.1
    AVFragmentedAssetMinder: #since 12.0
        methods:
            '-initWithAsset:mindingInterval:':
                name: init
            '+fragmentedAssetMinderWithAsset:mindingInterval:':
                exclude: true
    AVPortraitEffectsMatte: #since 12.0
        methods:
            '-portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer:error:':
                name: portraitEffectsMatteByWithPixelBuffer
                throws: NSErrorException
            '+portraitEffectsMatteFromDictionaryRepresentation:error:':
                constructor: true
                throws: NSErrorException
                name: create
    # ios13
    AVAudioSinkNode: #since 13.0
        methods:
            '-initWithReceiverBlock:':
                name: init
    AVAudioSourceNode: #since 13.0
        methods:
            '-initWithRenderBlock:':
                name: init
            '-initWithFormat:renderBlock:':
                name: init
    AVCaptureMultiCamSession: {} #since 13.0
    AVCompositionTrackFormatDescriptionReplacement: {} #since 13.0
    AVFragmentedMovie:  #since 13.0
        methods:
#            '-loadTrackWithTrackID:completionHandler:':
#                name: loadTrackWithTrackID
#            '-loadTracksWithMediaType:completionHandler:':
#                name: loadTracksWithMediaType
#            '-loadTracksWithMediaCharacteristic:completionHandler:':
#                name: loadTracksWithMediaCharacteristic
    AVFragmentedMovieMinder: #since 13.0
        methods:
            '-initWithMovie:mindingInterval:':
                name: init
            '+fragmentedMovieMinderWithMovie:mindingInterval:':
                exclude: true
    AVFragmentedMovieTrack: {} #since 13.0
    AVMediaDataStorage: #since 13.0
        methods:
            '-initWithURL:options:':
                name: init
    AVMovie: #since 13.0
        methods:
            '-initWithURL:options:':
                name: init
            '-initWithData:options:':
                name: init
            '+movieWithURL:options:':
                exclude: true
            '+movieWithData:options:':
                exclude: true
            '-movieHeaderWithFileType:error:':
                name: getMmovieHeader
            '-writeMovieHeaderToURL:fileType:options:error:':
                name: writeMovieHeader
            '-isCompatibleWithFileType:':
                name: isCompatibleWithFileType
#            '-loadTrackWithTrackID:completionHandler:':
#                name: loadTrack
#            '-loadTracksWithMediaType:completionHandler:':
#                name: loadTracksWithMediaType
#            '-loadTracksWithMediaCharacteristic:completionHandler:':
#                name: loadTracksWithMediaCharacteristic
        properties:
            'tracks':
                type: 'NSArray<? extends AVMovieTrack>' # to allow subclasses to overload
    AVMovieTrack: {} #since 13.0
    AVMutableMovie: #since 13.0
        methods:
            '-initWithURL:options:error:':
                name: init
                # throws: NSErrorException -- can't use as slashes with AVMovie one
            '-initWithData:options:error:':
                name: init
                # throws: NSErrorException -- can't use as slashes with AVMovie one
            '-initWithSettingsFromMovie:options:error:':
                name: init
                throws: NSErrorException
            '+movieWithURL:options:error:':
                exclude: true
            '+movieWithData:options:error:':
                exclude: true
            '+movieWithSettingsFromMovie:options:error:':
                exclude: true
            '-insertTimeRange:ofAsset:atTime:copySampleData:error:':
                name: insertTimeRange
            '-scaleTimeRange:toDuration:':
                name: scaleTimeRange
            '-mutableTrackCompatibleWithTrack:':
                name: mutableTrackCompatibleWithTrack
            '-addMutableTrackWithMediaType:copySettingsFromTrack:options:':
                name: addMutableTrack
            '-addMutableTracksCopyingSettingsFromTracks:options:':
                name: addMutableTracksCopyingSettings
    AVMutableMovieTrack: #since 13.0
        methods:
            '-insertTimeRange:ofTrack:atTime:copySampleData:error:':
                name: insertTimeRange
            '-scaleTimeRange:toDuration:':
                name: scaleTimeRange
            '-addTrackAssociationToTrack:type:':
                name: addTrackAssociationToTrack
            '-removeTrackAssociationToTrack:type:':
                name: removeTrackAssociationToTrack
            '-replaceFormatDescription:withFormatDescription:':
                name: replaceFormatDescription
            '-appendSampleBuffer:decodeTime:presentationTime:error:':
                name: appendSampleBuffer
            '-insertMediaTimeRange:intoTimeRange:':
                name: insertMediaTimeRange
    AVSemanticSegmentationMatte: #since 13.0
        methods:
            '-semanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBuffer:error:':
                name: semanticSegmentationMatteByReplacingSemanticSegmentationMatte
                throws: NSErrorException
            '+semanticSegmentationMatteFromImageSourceAuxiliaryDataType:dictionaryRepresentation:error:':
                name: semanticSegmentationMatteFromImageSourceAuxiliaryDataType
    AVVideoCompositionRenderHint: {} #since 13.0
    AVMetadataBodyObject: {} #since 13.0
    AVMetadataCatBodyObject: {} #since 13.0
    AVMetadataDogBodyObject: {} #since 13.0
    AVMetadataHumanBodyObject: {} #since 13.0
    AVMetadataSalientObject: {} #since 13.0
    AVAssetSegmentReport: {} #since 14.0
    AVAssetSegmentReportSampleInformation: {} #since 14.0
    AVAssetSegmentTrackReport: {} #since 14.0
    AVContentKey: {} #since 14.5
    AVContentKeySpecifier: #since 14.5
        methods:
            '-initForKeySystem:identifier:options:':
                name: init
            '+contentKeySpecifierForKeySystem:identifier:options:':
                exclude: true
    AVPlayerInterstitialEvent: #since 14.5
        methods:
            '+interstitialEventWithPrimaryItem:time:templateItems:restrictions:resumptionOffset:':
                name: create
                constructor: true
            '+interstitialEventWithPrimaryItem:date:templateItems:restrictions:resumptionOffset:':
                name: create
                constructor: true
            '+interstitialEventWithPrimaryItem:identifier:time:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:':
                name: create
                constructor: true
            '+interstitialEventWithPrimaryItem:identifier:date:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:':
                name: create
                constructor: true
            '+playerInterstitialEventWithPrimaryItem:time:interstitialTemplateItems:restrictions:resumptionOffset:':
                exclude: true // COMPATIBILITY SHIM - 72562501
            '+playerInterstitialEventWithPrimaryItem:date:interstitialTemplateItems:restrictions:resumptionOffset:':
                exclude: true // COMPATIBILITY SHIM - 72562501
            '+interstitialEventWithPrimaryItem:time:':
                name: create
                constructor: true
            '+interstitialEventWithPrimaryItem:date:':
                name: create
                constructor: true
    AVPlayerInterstitialEventController: #since 14.5
        methods:
            '-cancelCurrentEventWithResumptionOffset:':
                name: cancelCurrentEvent
            '+interstitialEventControllerWithPrimaryPlayer:':
                exclude: true
            '+playerInterstitialEventControllerWithPrimaryPlayer:':
                exclude: true
    AVPlayerInterstitialEventObserver: #since 14.5
        methods:
            '-initWithPrimaryPlayer:':
                name: init
            '+interstitialEventObserverWithPrimaryPlayer:':
                exclude: true
            '+playerInterstitialEventObserverWithPrimaryPlayer:':
                exclude: true
    AVAssetDownloadConfiguration: #since 15.0
        methods:
            '+downloadConfigurationWithAsset:title:':
                name: create
                constructor: true
    AVAssetDownloadContentConfiguration: {} #since 15.0
    AVAssetVariant: {} #since 15.0
    AVAssetVariantAudioAttributes: {} #since 15.0
    AVAssetVariantAudioRenditionSpecificAttributes: {} #since 15.0
    AVAssetVariantQualifier: #since 15.0
        methods:
            '+assetVariantQualifierWithPredicate:':
                name: create
                constructor: true
            '+assetVariantQualifierWithVariant:':
                name: create
                constructor: true
            '+predicateForChannelCount:mediaSelectionOption:operatorType:':
                name: predicateForChannelCount
            '+predicateForPresentationWidth:operatorType:':
                name: predicateForPresentationWidth
            '+predicateForPresentationHeight:operatorType:':
                name: predicateForPresentationHeight
            '+predicateForBinauralAudio:mediaSelectionOption:':
                name: predicateForBinauralAudio
            '+predicateForImmersiveAudio:mediaSelectionOption:':
                name: predicateForImmersiveAudio
            '+predicateForDownmixAudio:mediaSelectionOption:':
                name: predicateForDownmixAudio
    AVAssetVariantVideoAttributes: {} #since 15.0
    AVCoordinatedPlaybackParticipant: {} #since 15.0
    AVCoordinatedPlaybackSuspension: {} #since 15.0
    AVDelegatingPlaybackCoordinator: #since 15.0
        methods:
            '-initWithPlaybackControlDelegate:':
                name: init
            '-coordinateRateChangeToRate:options:':
                name: coordinateRateChangeToRate
            '-coordinateSeekToTime:options:':
                name: coordinateSeekToTime
            '-transitionToItemWithIdentifier:proposingInitialTimingBasedOnTimebase:':
                name: transitionToItem
    AVDelegatingPlaybackCoordinatorBufferingCommand: {} #since 15.0
    AVDelegatingPlaybackCoordinatorPauseCommand: {} #since 15.0
    AVDelegatingPlaybackCoordinatorPlayCommand: {} #since 15.0
    AVDelegatingPlaybackCoordinatorPlaybackControlCommand: {} #since 15.0
    AVDelegatingPlaybackCoordinatorSeekCommand: {} #since 15.0
    AVPlaybackCoordinator: #since 15.0
        methods:
            '-setParticipantLimit:forWaitingOutSuspensionsWithReason:':
                name: setParticipantLimitForWaitingOutSuspensions
            '-participantLimitForWaitingOutSuspensionsWithReason:':
                name: getParticipantLimitForWaitingOutSuspensions
    AVPlayerInterstitialEventMonitor: #since 15.0
        methods:
            '-initWithPrimaryPlayer:':
                name: init
            '+interstitialEventMonitorWithPrimaryPlayer:':
                exclude: true
    AVPlayerPlaybackCoordinator: {} #since 15.0
    AVAUPresetEvent: #since 16.0
        methods:
            '-initWithScope:element:dictionary:':
                name: init
    AVAssetPlaybackAssistant: #since 16.0
        methods:
            '-loadPlaybackConfigurationOptionsWithCompletionHandler:':
                name: loadPlaybackConfigurationOptions
            '+assetPlaybackAssistantWithAsset:':
                name: create
                constructor: true
    AVExtendedNoteOnEvent: #since 16.0
        methods:
            '-initWithMIDINote:velocity:groupID:duration:':
                name: init
            '-initWithMIDINote:velocity:instrumentID:groupID:duration:':
                name: init
    AVExtendedTempoEvent: #since 16.0
        methods:
            '-initWithTempo:':
                name: init
    AVMIDIChannelEvent: {} #since 16.0
    AVMIDIChannelPressureEvent: #since 16.0
        methods:
            '-initWithChannel:pressure:':
                name: init
    AVMIDIControlChangeEvent: #since 16.0
        methods:
            '-initWithChannel:messageType:value:':
                name: init
    AVMIDIMetaEvent: #since 16.0
        methods:
            '-initWithType:data:':
                name: init
    AVMIDINoteEvent: #since 16.0
        methods:
            '-initWithChannel:key:velocity:duration:':
                name: init
    AVMIDIPitchBendEvent: #since 16.0
        methods:
            '-initWithChannel:value:':
                name: init
    AVMIDIPolyPressureEvent: #since 16.0
        methods:
            '-initWithChannel:key:pressure:':
                name: init
    AVMIDIProgramChangeEvent: #since 16.0
        methods:
            '-initWithChannel:programNumber:':
                name: init
    AVMIDISysexEvent: #since 16.0
        methods:
            '-initWithData:':
                name: init
    AVMusicEvent: {} #since 16.0
    AVMusicUserEvent: #since 16.0
        methods:
            '-initWithData:':
                name: init
    AVParameterEvent: #since 16.0
        methods:
            '-initWithParameterID:scope:element:value:':
                name: init
    AVSampleBufferGenerator: #since 16.0
        methods:
            '-initWithAsset:timebase:':
                name: init
            '-createSampleBufferForRequest:error:':
                name: createSampleBuffer
            '-createSampleBufferForRequest:addingToBatch:error:':
                name: createSampleBuffer
            '+notifyOfDataReadyForSampleBuffer:completionHandler:':
                name: notifyOfDataReadyForSampleBuffer
    AVSampleBufferGeneratorBatch: #since 16.0
        methods:
            '-makeDataReadyWithCompletionHandler:':
                name: makeDataReady
    AVSampleBufferRequest: #since 16.0
        methods:
            '-initWithStartCursor:':
                name: init
    AVSampleCursor: #since 16.0
        methods:
            '-stepByDecodeTime:wasPinned:':
                name: stepByDecodeTime
            '-stepByPresentationTime:wasPinned:':
                name: stepByPresentationTime
            '-comparePositionInDecodeOrderWithPositionOfCursor:':
                name: comparePositionInDecodeOrder
            '-samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor:':
                name: samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor
            '-samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor:':
                name: samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor
    AVSampleCursorSyncInfo: {}
    AVSampleCursorDependencyInfo: {}
    AVSampleCursorAudioDependencyInfo: {}
    AVSampleCursorStorageRange: {}
    AVSampleCursorChunkInfo: {}
    AVSpeechSynthesisMarker: #since 16.0
        methods:
            '-initWithMarkerType:forTextRange:atByteSampleOffset:':
                name: init
            '-initWithWordRange:atByteSampleOffset:':
                static_constructor_name: createWithWordRange
                name: initWithWordRange
            '-initWithSentenceRange:atByteSampleOffset:':
                static_constructor_name: createWithSentenceRange
                name: initWithSentenceRange
            '-initWithParagraphRange:atByteSampleOffset:':
                static_constructor_name: createWithParagraphRange
                name: initWithParagraphRange
            '-initWithPhonemeString:atByteSampleOffset:':
                static_constructor_name: createWithPhonemeString
                name: initWithPhonemeString
            '-initWithBookmarkName:atByteSampleOffset:':
                static_constructor_name: createWithBookmarkName
                name: initWithBookmarkName
    AVSpeechSynthesisProviderAudioUnit: {} #since 16.0
    AVSpeechSynthesisProviderRequest: #since 16.0
        methods:
            '-initWithSSMLRepresentation:voice:':
                name: init
    AVSpeechSynthesisProviderVoice: #since 16.0
        methods:
            '-initWithName:identifier:primaryLanguages:supportedLanguages:':
                name: init
    AVAssetVariantVideoLayoutAttributes: {} #since 17.0
    AVAssetWriterInputTaggedPixelBufferGroupAdaptor: #since 17.0
        methods:
            '-initWithAssetWriterInput:sourcePixelBufferAttributes:':
                name: init
            '-appendTaggedPixelBufferGroup:withPresentationTime:':
                name: appendTaggedPixelBufferGroup
            '+assetWriterInputTaggedPixelBufferGroupAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:':
                name: assetWriterInputTaggedPixelBufferGroupAdaptor
    AVAudioApplication: #since 17.0
        methods:
            '-setInputMuted:error:':
                name: setInputMuted
                throws: NSErrorException
            '+requestRecordPermissionWithCompletionHandler:':
                name: requestRecordPermission
    AVCaptureDeferredPhotoProxy: {} #since 17.0
    AVCaptureDeviceRotationCoordinator: #since 17.0
        methods:
            '-initWithDevice:previewLayer:':
                name: init
    AVCapturePhotoOutputReadinessCoordinator: #since 17.0
        methods:
            '-initWithPhotoOutput:':
                name: init
    AVCaptureReactionEffectState: {} #since 17.0
    AVExternalStorageDevice: #since 17.0
        methods:
            '-nextAvailableURLsWithPathExtensions:error:':
                throws: NSErrorException
                name: getNextAvailableURLs
            '+requestAccessWithCompletionHandler:':
                name: requestAccess
    AVExternalStorageDeviceDiscoverySession: {} #since 17.0
    AVMetadataHumanFullBodyObject: {} #since 17.0
    AVSampleBufferVideoRenderer: #since 17.0
        methods:
            '-flushWithRemovalOfDisplayedImage:completionHandler:':
                name: flush
protocols:
    AVCapturePhotoCaptureDelegate:
        methods:
            '-captureOutput:willBeginCaptureForResolvedSettings:':
                name: willBeginCaptureForResolvedSettings
            '-captureOutput:willCapturePhotoForResolvedSettings:':
                name: willCapturePhotoForResolvedSettings
            '-captureOutput:didCapturePhotoForResolvedSettings:':
                name: didCapturePhotoForResolvedSettings
            '-captureOutput:didFinishProcessingPhotoSampleBuffer:previewPhotoSampleBuffer:resolvedSettings:bracketSettings:error:':
                name: didFinishProcessingPhotoSampleBuffer
            '-captureOutput:didFinishProcessingRawPhotoSampleBuffer:previewPhotoSampleBuffer:resolvedSettings:bracketSettings:error:':
                name: didFinishProcessingRawPhotoSampleBuffer
            '-captureOutput:didFinishRecordingLivePhotoMovieForEventualFileAtURL:resolvedSettings:':
                name: didFinishRecordingLivePhotoMovieForEventualFileAtURL
            '-captureOutput:didFinishProcessingLivePhotoToMovieFileAtURL:duration:photoDisplayTime:resolvedSettings:error:':
                name: didFinishProcessingLivePhotoToMovieFileAtURL
            '-captureOutput:didFinishCaptureForResolvedSettings:error:':
                name: didFinishCaptureForResolvedSettings
            '-captureOutput:didFinishProcessingPhoto:error:':
                name: didFinishProcessingPhoto
            '-captureOutput:didFinishCapturingDeferredPhotoProxy:error:':
                name: didFinishCapturingDeferredPhotoProxy

    AVContentKeyRecipient:
        skip_adapter: true
        methods:
            '-contentKeySession:didProvideContentKey:':
                name: didProvideContentKey

    AVContentKeySessionDelegate:
        methods:
            '-contentKeySession:didProvideContentKeyRequest:':
                name: didProvideContentKeyRequest
            '-contentKeySession:didProvideRenewingContentKeyRequest:':
                name: didProvideRenewingContentKeyRequest
            '-contentKeySession:didProvidePersistableContentKeyRequest:':
                name: didProvidePersistableContentKeyRequest
            '-contentKeySession:contentKeyRequest:didFailWithError:':
                name: didFailWithError
            '-contentKeySession:shouldRetryContentKeyRequest:reason:':
                name: shouldRetryContentKeyRequest
            '-contentKeySession:didUpdatePersistableContentKey:forContentKeyIdentifier:':
                name: didUpdatePersistableContentKey
            '-contentKeySession:contentKeyRequestDidSucceed:':
                name: contentKeyRequestDidSucceed
    AVVideoCompositionInstruction:
        name: AVVideoCompositionInstructionProtocol
        skip_adapter: true
        properties:
            'enablePostProcessing':
                name: postProcessingEnabled
            'layerInstructions':
                type: NSArray<AVVideoCompositionLayerInstruction>
            'requiredSourceTrackIDs':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsIntegerListMarshaler.class) List<Integer>'

    AVAssetDownloadDelegate: # DONE
        methods:
            '-URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:':
                name: didLoadTimeRange
                parameters:
                    loadedTimeRanges:
                        type: List<CMTimeRange>
                        marshaler: CMTimeRange.AsValuedListMarshaler
            '-URLSession:assetDownloadTask:didResolveMediaSelection:':
                name: didResolveMediaSelection
            '-URLSession:assetDownloadTask:didFinishDownloadingToURL:':
                name: didFinishDownloadingToURL
            '-URLSession:aggregateAssetDownloadTask:willDownloadToURL:':
                name: willDownloadToURL
            '-URLSession:aggregateAssetDownloadTask:didCompleteForMediaSelection:':
                name: didCompleteForMediaSelection
            '-URLSession:aggregateAssetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelection:':
                name: didLoadTimeRange
            '-URLSession:assetDownloadTask:willDownloadVariants:':
                name: assetDownloadTask
    AVAssetResourceLoaderDelegate: # DONE
        methods:
            '-resourceLoader:shouldWaitForLoadingOfRequestedResource:':
                name: shouldWaitForLoadingOfRequestedResource
            '-resourceLoader:shouldWaitForRenewalOfRequestedResource:':
                name: shouldWaitForRenewalOfRequestedResource
            '-resourceLoader:didCancelLoadingRequest:':
                name: didCancelLoadingRequest
            '-resourceLoader:shouldWaitForResponseToAuthenticationChallenge:':
                name: shouldWaitForResponseToAuthenticationChallenge
            '-resourceLoader:didCancelAuthenticationChallenge:':
                name: didCancelAuthenticationChallenge
    AVAsynchronousKeyValueLoading: # DONE
        methods: 
            '-loadValuesAsynchronouslyForKeys:completionHandler:':
                name: loadValuesAsynchronously
                parameters:
                    keys:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataKey.AsListMarshaler.class) List<AVMetadataKey>'
            '-statusOfValueForKey:error:':
                name: getStatusOfValue
                parameters:
                    key:
                        type: AVMetadataKey
    AVAudio3DMixing: {} # DONE
    AVAudioMixing: # DONE
        methods:
            '-destinationForMixer:bus:':
                name: getDestinationForMixer
    AVAudioStereoMixing: {}
    AVAudioPlayerDelegate: # DONE
        methods:
            '-audioPlayerDidFinishPlaying:successfully:':
                name: didFinishPlaying
            '-audioPlayerDecodeErrorDidOccur:error:':
                name: decodeErrorDidOccur
            '-audioPlayerBeginInterruption:':
                name: beginInterruption
            '-audioPlayerEndInterruption:withOptions:':
                name: endInterruption
            '-audioPlayerEndInterruption:withFlags:':
                name: endInterruption
            '-audioPlayerEndInterruption:':
                name: endInterruption
    AVAudioRecorderDelegate: # DONE
        methods:
            '-audioRecorderDidFinishRecording:successfully:':
                name: didFinishRecording
            '-audioRecorderEncodeErrorDidOccur:error:':
                name: encodeErrorDidOccur
            '-audioRecorderBeginInterruption:':
                name: beginInterruption
            '-audioRecorderEndInterruption:withOptions:':
                name: endInterruption
            '-audioRecorderEndInterruption:withFlags:':
                name: endInterruption
            '-audioRecorderEndInterruption:':
                name: endInterruption
    AVAudioSessionDelegate: # DONE
        methods:
            '-endInterruptionWithFlags:':
                name: endInterruption
                parameters:
                    flags:
                        type: AVAudioSessionInterruptionOptions
            '-inputIsAvailableChanged:':
                name: inputAvailabilityChanged
    AVCaptureAudioDataOutputSampleBufferDelegate: # DONE
        methods:
            '-captureOutput:didOutputSampleBuffer:fromConnection:':
                name: didOutputSampleBuffer  
    AVCaptureFileOutputRecordingDelegate: # DONE
        methods:
            '-captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:':
                name: didStartRecording
                parameters:
                    connections:
                        type: NSArray<AVCaptureConnection>
            '-captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:':
                name: didFinishRecording
                parameters:
                    connections:
                        type: NSArray<AVCaptureConnection>
    AVCaptureMetadataOutputObjectsDelegate: # DONE
        methods:
            '-captureOutput:didOutputMetadataObjects:fromConnection:':
                name: didOutputMetadataObjects
                parameters:
                    metadataObjects:
                        type: NSArray<AVMetadataObject>
    AVCaptureVideoDataOutputSampleBufferDelegate: # DONE
        methods:
            '-captureOutput:didOutputSampleBuffer:fromConnection:':
                name: didOutputSampleBuffer
            '-captureOutput:didDropSampleBuffer:fromConnection:':
                name: didDropSampleBuffer
    AVFragmentMinding: # DONE
        skip_adapter: true
    AVPlayerItemLegibleOutputPushDelegate: # DONE
        methods:
            '-legibleOutput:didOutputAttributedStrings:nativeSampleBuffers:forItemTime:':
                name: didOutputAttributedStrings
                parameters:
                    strings:
                        type: NSArray<NSAttributedString>
                    nativeSamples:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<CMSampleBuffer>'
    AVPlayerItemMetadataOutputPushDelegate: # DONE
        methods:
            '-metadataOutput:didOutputTimedMetadataGroups:fromPlayerItemTrack:':
                name: didOutputTimedMetadataGroups
                parameters:
                    groups:
                        type: NSArray<AVTimedMetadataGroup>
    AVPlayerItemOutputPullDelegate: # DONE
        methods:
            '-outputMediaDataWillChange:':
                name: mediaDataWillChange
            '-outputSequenceWasFlushed:':
                name: sequenceWasFlushed
    AVPlayerItemOutputPushDelegate: # DONE
        methods:
            '-outputSequenceWasFlushed:':
                name: wasFlushed
    AVPlayerItemMetadataCollectorPushDelegate:
        methods:
            '-metadataCollector:didCollectDateRangeMetadataGroups:indexesOfNewGroups:indexesOfModifiedGroups:':
                name: didCollectDateRangeMetadataGroups
    AVSpeechSynthesizerDelegate: # DONE
        methods:
            '-speechSynthesizer:didStartSpeechUtterance:':
                name: didStartSpeechUtterance
            '-speechSynthesizer:didFinishSpeechUtterance:':
                name: didFinishSpeechUtterance
            '-speechSynthesizer:didPauseSpeechUtterance:':
                name: didPauseSpeechUtterance
            '-speechSynthesizer:didContinueSpeechUtterance:':
                name: didContinueSpeechUtterance
            '-speechSynthesizer:didCancelSpeechUtterance:':
                name: didCancelSpeechUtterance
            '-speechSynthesizer:willSpeakRangeOfSpeechString:utterance:':
                name: willSpeak
            '-speechSynthesizer:willSpeakMarker:utterance:':
                name: willSpeakMarker
    AVVideoCompositionValidationHandling: # DONE
        methods:
            '-videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:':
                name: shouldContinueValidatingAfterFindingInvalidValue
            '-videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:':
                name: shouldContinueValidatingAfterFindingEmptyTimeRange
            '-videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:':
                name: shouldContinueValidatingAfterFindingInvalidTimeRange
            '-videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:':
                name: shouldContinueValidatingAfterFindingInvalidTrackID
    AVVideoCompositing: # DONE
        properties:
            'sourcePixelBufferAttributes':
                type: CVPixelBufferAttributes
                annotations: ['@WeaklyLinked']
            'requiredPixelBufferAttributesForRenderContext':
                type: CVPixelBufferAttributes
                annotations: ['@WeaklyLinked']
        methods:
            '-renderContextChanged:':
                trim_after_first_colon: true
            '-startVideoCompositionRequest:':
                trim_after_first_colon: true
    AVCaptureDataOutputSynchronizerDelegate: #since 11.0
        methods:
            '-dataOutputSynchronizer:didOutputSynchronizedDataCollection:':
                name: didOutputSynchronizedDataCollection
    AVCaptureDepthDataOutputDelegate: #since 11.0
        methods:
            '-depthDataOutput:didOutputDepthData:timestamp:connection:':
                name: didOutputDepthData
            '-depthDataOutput:didDropDepthData:timestamp:connection:reason:':
                name: didDropDepthData
    AVQueuedSampleBufferRendering: #since 11.0
        methods:
            '-requestMediaDataWhenReadyOnQueue:usingBlock:':
                trim_after_first_colon: true
    AVCapturePhotoFileDataRepresentationCustomizer: #since 12.0
        methods:
            '-replacementEmbeddedThumbnailPixelBufferWithPhotoFormat:forPhoto:':
                name: replacementEmbeddedThumbnailPixelBuffer
            '-replacementSemanticSegmentationMatteOfType:forPhoto:':
                name: replacementSemanticSegmentationMatteOfType
            '-replacementAppleProRAWCompressionSettingsForPhoto:defaultSettings:maximumBitDepth:':
                name: replacementAppleProRAWCompressionSettingsForPhoto
    AVAssetWriterDelegate: #since 14.0
        methods:
            '-assetWriter:didOutputSegmentData:segmentType:segmentReport:':
                name: didOutputSegmentData
            '-assetWriter:didOutputSegmentData:segmentType:':
                name: didOutputSegmentData
    AVPlaybackCoordinatorPlaybackControlDelegate: #since 15.0
        methods:
            '-playbackCoordinator:didIssuePlayCommand:completionHandler:':
                name: didIssuePlayCommand
            '-playbackCoordinator:didIssuePauseCommand:completionHandler:':
                name: didIssuePauseCommand
            '-playbackCoordinator:didIssueSeekCommand:completionHandler:':
                name: didIssueSeekCommand
            '-playbackCoordinator:didIssueBufferingCommand:completionHandler:':
                name: didIssueBufferingCommand
    AVPlayerPlaybackCoordinatorDelegate: #since 15.0
        methods:
            '-playbackCoordinator:identifierForPlayerItem:':
                name: identifierForPlayerItem
            '-playbackCoordinator:interstitialTimeRangesForPlayerItem:':
                name: interstitialTimeRangesForPlayerItem
    AVCapturePhotoOutputReadinessCoordinatorDelegate: #since 17.0
        methods:
            '-readinessCoordinator:captureReadinessDidChange:':
                name: captureReadinessDidChange
functions:
    AVMake(RectWithAspectRatioInsideRect):
        class: AVFoundation
        name: 'create#{g[0]}'
    AVSampleBufferAttachContentKey:
        class: AVContentKey
        name: attachToSampleBuffer
        throws: NSErrorException

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?AV.*):
        class: AVFoundation
        name: 'Function__#{g[0]}'

values:
    AVFoundationErrorDomain:
        class: AVError
        name: getClassDomain     
    AVError(.*)Key:
        enum: AVErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey

    AV(CoreAnimationBeginTimeAtZero):
        class: AVFoundation
        name: '#{g[0]}'

    # AVAssetDownloadURLSession
    AVAssetDownloadTask(.*)Key:
        dictionary: AVAssetDownloadTaskOptions
        name: '#{g[0]}'
        type: NSString
        methods:
            MinimumRequiredMediaBitrate:
                type: long
            MediaSelection:
                type: AVMediaSelection

    # AVAssetExportSession
    AVAssetExportPreset(640x480|960x540|1280x720|1920x1080|3840x2160):
        enum: AVAssetExportPreset
        name: 'Size#{g[0]}'
        type: NSString
    AVAssetExportPreset(.*):
        enum: AVAssetExportPreset
        name: '#{g[0]}'
        type: NSString

    # AVAssetImageGenerator
    AVAssetImageGeneratorApertureMode(.*):
        enum: AVAssetImageGeneratorApertureMode
        name: '#{g[0]}'
        type: NSString

    # AVFragmentedAssetTrack
    AVAssetTrack((TimeRange|Segments)DidChangeNotification):
        class: AVFragmentedAssetTrack
        name: '#{g[0]}'
        type: NSString

    # AVAssetResourceLoadingRequest
    AVAssetResourceLoadingRequest(StreamingContentKeyRequestRequiresPersistentKey):
        dictionary: AVAssetResourceLoadingRequestOptions
        name: '#{g[0]}'
        type: NSString
        methods:
            StreamingContentKeyRequestRequiresPersistentKey:
                name: requiresPersistentKey
                type: boolean

    # AVAssetTrack
    AVTrackAssociationType(.*):
        enum: AVTrackAssociationType
        name: '#{g[0]}'
        type: NSString
    AVAssetTrack(.*Notification):
        class: AVAssetTrack
        name: '#{g[0]}'
        type: NSString

  # AVAsset (collect all notification that are not part of any above)
    AVAsset(.*)Notification:
      class: AVAsset
      name: '#{g[0]}Notification'
      type: NSString

  # AVAudioUnitComponent
    AVAudioUnitComponent(TagsDidChangeNotification):
        class: AVAudioUnitComponent
        name: '#{g[0]}'
        type: NSString

    # AVAudioEngine
    AVAudioEngine(.*Notification):
        class: AVAudioEngine
        name: '#{g[0]}'
        type: NSString
    
    # AVAudioSession
    AVAudioSessionCategory(.*):
        enum: AVAudioSessionCategory
        name: '#{g[0]}'
        type: NSString
    AVAudioSessionLocation(.*):
        enum: AVAudioSessionLocation
        name: '#{g[0]}'
        type: NSString
    AVAudioSessionMode(.*):
        enum: AVAudioSessionMode
        name: '#{g[0]}'
        type: NSString
    AVAudioSessionOrientation(.*):
        enum: AVAudioSessionOrientation
        name: '#{g[0]}'
        type: NSString
    AVAudioSessionPolarPattern(.*):
        enum: AVAudioSessionPolarPattern
        name: '#{g[0]}'
        type: NSString
    AVAudioSessionPort(.*):
        enum: AVAudioSessionPort
        name: '#{g[0]}'
        type: NSString
    AVAudioSession(.*Notification):
        class: AVAudioSession
        name: '#{g[0]}'
        type: NSString
    AVAudioSessionInterruption(.*)Key:
        dictionary: AVAudioSessionInterruptionNotification
        name: '#{g[0]}'
        type: NSString
        methods:
            Type:
                type: AVAudioSessionInterruptionType
            Option:
                name: options
                type: AVAudioSessionInterruptionOptions
    AVAudioSessionRouteChange(.*)Key:
        dictionary: AVAudioSessionRouteChangeNotification
        name: '#{g[0]}'
        type: NSString
        methods:
            Reason:
                type: AVAudioSessionRouteChangeReason
            PreviousRoute:
                type: AVAudioSessionRouteDescription
    AVAudioSession(SilenceSecondaryAudioHintTypeKey):
        class: AVAudioSession
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # AVAudioUnit
    AVAudioUnitType(.*):
        enum: AVAudioUnitType
        name: '#{g[0]}'
        type: NSString
    AVAudioUnitManufacturerName(.*):
        enum: AVAudioUnitManufacturerName
        name: '#{g[0]}'
        type: NSString

    # AVCaptureDevice
    AVCaptureDevice(.*Notification):
        class: AVCaptureDevice
        name: '#{g[0]}'
        type: NSString
    AVCapture(MaxAvailableTorchLevel|LensPositionCurrent|ExposureDurationCurrent|ISOCurrent|ExposureTargetBiasCurrent|WhiteBalanceGainsCurrent):
        class: AVCaptureDevice
        name: 'get#{g[0]}'

    # AVCaptureInputPort
    AVCaptureInputPort(FormatDescriptionDidChangeNotification):
        class: AVCaptureInputPort
        name: '#{g[0]}'
        type: NSString

    # AVCaptureSession
    AVCaptureSessionPreset(352x288|640x480|1280x720|1920x1080|3840x2160):
        enum: AVCaptureSessionPreset
        name: 'Size#{g[0]}'
        type: NSString
    AVCaptureSessionPreset(.*):
        enum: AVCaptureSessionPreset
        name: '#{g[0]}'
        type: NSString
    AVCaptureSession(.*Notification):
        class: AVCaptureSession
        name: '#{g[0]}'
        type: NSString
    AVCaptureSession((Error|InterruptionReason)Key):
        class: AVCaptureSession
        name: 'Notification#{g[0]}'
        type: NSString
        visibility: protected

    # AVLayer
    AVLayerVideoGravity(.*):
        enum: AVLayerVideoGravity
        name: '#{g[0]}'
        type: NSString

    # AVPlayer
    AVPlayer(Waiting.*):
        class: AVPlayer
        name: '#{g[0]}'
        type: NSString

    # AVMedia
    AVMediaCharacteristic(.*):
        enum: AVMediaCharacteristic
        name: '#{g[0]}'
        type: NSString

    # AVMetadataItem
    AVMetadataCommonIdentifier(.*):
        enum: AVMetadataIdentifierCommon
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataIdentifier
    AVMetadataIdentifier3GPUserData(.*):
        enum: AVMetadataIdentifier3GPUserData
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataIdentifier
    AVMetadataIdentifierISOUserData(.*):
        enum: AVMetadataIdentifierISOUserData
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataIdentifier
    AVMetadataIdentifierQuickTimeUserData(.*):
        enum: AVMetadataIdentifierQuickTimeUserData
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataIdentifier
    AVMetadataIdentifierIcyMetadata(.*):
        enum: AVMetadataIdentifierIcyMetadata
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataIdentifier
    AVMetadataIdentifierID3Metadata(.*):
        enum: AVMetadataIdentifierID3Metadata
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataIdentifier
    AVMetadataIdentifieriTunesMetadata(.*):
        enum: AVMetadataIdentifieriTunesMetadata
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataIdentifier
    AVMetadataIdentifierQuickTimeMetadata(.*):
        enum: AVMetadataIdentifierQuickTimeMetadata
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataIdentifier
    AVMetadataObjectType(.*):
        enum: AVMetadataObjectType
        name: '#{g[0]}'
        type: NSString
    AVMetadataKeySpace(.*):
        enum: AVMetadataKeySpace
        name: '#{g[0]}'
        type: NSString
    AVMetadataFormat(.*):
        enum: AVMetadataFormat
        name: '#{g[0]}'
        type: NSString
    AVMetadataCommonKey(.*):
        enum: AVMetadataKeyCommon
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataKey
    AVMetadata3GPUserDataKey(.*):
        enum: AVMetadataKey3GPUserData
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataKey
    AVMetadataIcyMetadataKey(.*):
        enum: AVMetadataKeyIcyMetadata
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataKey
    AVMetadataID3MetadataKey(.*):
        enum: AVMetadataKeyID3Metadata
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataKey
    AVMetadataISOUserDataKey(.*):
        enum: AVMetadataKeyISOUserData
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataKey
    AVMetadataiTunesMetadataKey(.*):
        enum: AVMetadataKeyiTunesMetadata
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataKey
    AVMetadataQuickTimeMetadataKey(.*):
        enum: AVMetadataKeyQuickTimeMetadata
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataKey
    AVMetadataQuickTimeUserDataKey(.*):
        enum: AVMetadataKeyQuickTimeUserData
        name: '#{g[0]}'
        type: NSString
        extends: AVMetadataKey
    AVMetadataExtraAttribute(.*)Key:
        dictionary: AVMetadataExtraAttributes
        name: '#{g[0]}'
        type: NSString
        methods:
            ValueURI:
                type: String
            BaseURI:
                type: String
            Info:
                type: String

    # AVOutputSettingsAssistant
    AVOutputSettingsPreset(.*):
        enum: AVOutputSettingsPreset
        name: 'Size#{g[0]}'
        type: NSString

    # AVPlayerItem
    AVPlayerItem(.*Notification):
        class: AVPlayerItem
        name: '#{g[0]}'
        type: NSString
    AVPlayerItem(FailedToPlayToEndTimeErrorKey):
        class: AVPlayerItem
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # AVPlayerItemLegibleOutput
    AVPlayerItemLegibleOutputTextStylingResolution(.*):
        enum: AVPlayerItemLegibleOutputTextStylingResolution
        name: '#{g[0]}'
        type: NSString

    # AVSampleBufferDisplayLayer
    AVSampleBufferDisplayLayer(.*Notification):
        class: AVSampleBufferDisplayLayer
        name: '#{g[0]}'
        type: NSString
    AVSampleBufferDisplayLayer(FailedToDecodeNotificationErrorKey):
        class: AVSampleBufferDisplayLayer
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # AVSpeechSynthesis
    AVSpeechSynthesisVoiceIdentifier(.*):
        enum: AVSpeechSynthesisVoiceIdentifier
        name: '#{g[0]}'
        type: NSString
    AVSpeechSynthesis(.*)Attribute:
        class: AVSpeechSynthesisAttributes
        name: '#{g[0]}'
        type: NSString
    AVSpeechSynthesis(.*)Notification:
        class: AVSpeechSynthesisNotifications
        name: '#{g[0]}'
        type: NSString



    # AVSpeechUtterance
    AVSpeechUtterance(.*):
        class: AVSpeechUtterance
        name: 'get#{g[0]}'

    # AVURLAsset
    AVURLAsset(.*)Key:
        dictionary: AVURLAssetOptions
        name: '#{g[0]}'
        type: NSString
        methods:
            PreferPreciseDurationAndTiming:
                name: prefersPreciseDurationAndTiming
                type: boolean
            ReferenceRestrictions:
                type: AVAssetReferenceRestrictions
            HTTPCookies:
                type: NSArray<NSHTTPCookie>

    # Constants
    AV(StreamingKeyDelivery(PersistentContent|Content)Key)Type:
        enum: AVFileType
        name: '#{g[0]}'
        type: NSString
    AVFileType(3.*):
        enum: AVFileType
        name: '_#{g[0]}'
        type: NSString
    AVFileType(.*):
        enum: AVFileType
        name: '#{g[0]}'
        type: NSString

    # AudioSettings
    AVAudioBitRateStrategy_(.*):
        enum: AVAudioBitRateStrategy
        name: '#{g[0]}'
        type: NSString
    AVAudioTimePitchAlgorithm(.*):
        enum: AVAudioTimePitchAlgorithm
        name: '#{g[0]}'
        type: NSString
    AVSampleRateConverter(.*)Key:
        dictionary: AVSampleRateConverterSettings
        name: '#{g[0]}'
        type: NSString
        methods:
            Algorithm:
                type: AVSampleRateConverterAlgorithm
            AudioQuality:
                type: AVAudioQuality
    AVSampleRateConverterAlgorithm_(.*):
        enum: AVSampleRateConverterAlgorithm
        name: '#{g[0]}'
        type: NSString
    AVEncoder(.*)Key:
        dictionary: AVAudioEncoderSettings
        name: '#{g[0]}'
        type: NSString
        methods:
            AudioQuality:
                type: AVAudioQuality
            AudioQualityForVBR:
                type: AVAudioQuality
            BitRate:
                type: int
            BitRatePerChannel:
                type: int
            BitRateStrategy:
                type: AVAudioBitRateStrategy
            BitDepthHint:
                type: int
    AV(ChannelLayout|FormatID|SampleRate|NumberOfChannels)Key:
        dictionary: AVAudioSettings
        name: '#{g[0]}'
        type: NSString
        methods:
            FormatID:
                name: format
                type: AudioFormat
                annotations: ['@WeaklyLinked']
            SampleRate:
                type: double
            NumberOfChannels:
                type: int
            BitDepth:
                name: linearPCMBitDepth
                type: int
            IsBigEndian:
                name: linearPCMBigEndian
                type: boolean
            IsFloat:
                name: linearPCMFloat
                type: boolean
            IsNonInterleaved:
                name: linearPCMNonInterleaved
                type: boolean
            ChannelLayout:
                type: AudioChannelLayout
                annotations: ['@WeaklyLinked']
    AVLinearPCM(.*).*:
        dictionary: AVAudioSettings
        name: '#{g[0]}'
        type: NSString

    # VideoSettings
    AVMediaType(.*):
        enum: AVMediaType
        name: '#{g[0]}'
        type: NSString
    AVVideoCleanAperture(.+)Key:
        dictionary: AVVideoCleanAperture
        name: '#{g[0]}'
        type: NSString
        methods:
            Width:
                type: long
            Height:
                type: long
            HorizontalOffset:
                type: long
            VerticalOffset:
                type: long
    AVVideo(AverageBitRate|Quality|MaxKeyFrameInterval|MaxKeyFrameIntervalDuration)Key:
        dictionary: AVVideoCompressionSettings
        name: '#{g[0]}'
        type: NSString
        methods:
            AverageBitRate:
                type: double
            Quality:
                type: double
            MaxKeyFrameInterval:
                type: double
            MaxKeyFrameIntervalDuration:
                type: double
    AVVideoPixelAspectRatio(.+)Key:
        class: AVPixelAspectRatio
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    AVVideo(.*)Key:
        dictionary: AVVideoSettings
        name: '#{g[0]}'
        type: NSString
        methods:
            Codec:
                type: AVVideoCodecType
            Width:
                type: long
            Height:
                type: long
            CleanAperture:
                type: AVVideoCleanAperture
            ScalingMode:
                type: AVVideoScalingMode
            CompressionSettings:
                type: AVVideoCompressionSettings
            AllowFrameReordering:
                name: allowsFrameReordering
                type: boolean
            ProfileLevel:
                type: AVVideoProfileLevel
            H264EntropyMode:
                type: AVVideoH264EntropyMode
            ExpectedSourceFrameRate:
                type: double
            AverageNonDroppableFrameRate:
                type: double
    AVVideoCodec(.*):
        exclude: true
    AVVideoScalingMode(.*):
        enum: AVVideoScalingMode
        name: '#{g[0]}'
        type: NSString
    AVVideoProfileLevel(.*):
        enum: AVVideoProfileLevel
        name: '#{g[0]}'
        type: NSString
    AVVideoH264EntropyMode(.*):
        enum: AVVideoH264EntropyMode
        name: '#{g[0]}'
        type: NSString
    AVCaptureDeviceType(.*):
        class: AVCaptureDeviceType
        name: '#{g[0]}'
    AVVideoColorPrimaries_(.*):
        class: AVVideoColorPrimaries
        name: '#{g[0]}'
    AVVideoTransferFunction_(.*):
        class: AVVideoTransferFunction
        name: '#{g[0]}'
    AVVideoYCbCrMatrix_(.*):
        class: AVVideoYCbCrMatrix
        name: '#{g[0]}'
    AVContentKey(.*):
        class: AVContentKey
        name: '#{g[0]}'
    AVSampleBufferRenderSynchronizer(.*)Notification:
        class: AVSampleBufferRenderSynchronizer
        name: '#{g[0]}Notification'
    AVCaptureSessionInterruptionSystemPressureStateKey:
        class: AVCaptureSession
        name: 'InterruptionSystemPressureStateKey'
    AVPlayerAvailableHDRModesDidChangeNotification:
        class: AVPlayer
        name: AvailableHDRModesDidChangeNotification
    AVRouteDetectorMultipleRoutesDetectedDidChangeNotification:
        class: AVRouteDetector
        name: MultipleRoutesDetectedDidChangeNotification
    AVSampleBufferAudioRenderer(.*)Notification:
        class: AVSampleBufferAudioRenderer
        name: '#{g[0]}'
        static_class: Notifications
    AVAudioFileTypeKey:
        class: AVAudioFile
        name: TypeKey
    AVSampleBufferAudioRendererFlushTimeKey:
        class: AVSampleBufferAudioRenderer
        name: FlushTimeKey
    #ios13
    AVAudioUnitComponentManagerRegistrationsChangedNotification:
        class: AVAudioUnitComponentManager
        name: registrationsChangedNotification
        type: NSString
    AVFragmentedMovieTrack(.*)Notification:
        class: AVFragmentedMovieTrack
        static_class: Notifications
        name: '#{g[0]}'
        type: NSString
    AVFragmentedMovie(.*)Notification:
        class: AVFragmentedMovie
        static_class: Notifications
        name: '#{g[0]}'
        type: NSString
    AVMovieReferenceRestrictionsKey:
        class: AVMovie
        name: referenceRestrictionsKey
        type: NSString
    AVPlayer(.*)Notification:
        class: AVPlayer
        static_class: Notifications
        name: '#{g[0]}'
        type: NSString
    AVExtendedNoteOnEvent(DefaultInstrument):
        name: '#{g[0]}'
        class: AVExtendedNoteOnEvent
    AVPlayer(.*)Key:
        name: '#{g[0]}'
        class: AVPlayer
        static_class: Keys
    AVPlaybackCoordinator(.*)Notification:
        class: AVPlaybackCoordinator
        static_class: Notifications
        name: '#{g[0]}'
        type: NSString
    AVMovie(.*)Key:
        class: AVMovie
        static_class: Keys
        name: '#{g[0]}'
        type: NSString
    AVAudioSession(.*)Key:
        class: AVAudioSession
        static_class: Keys
        name: '#{g[0]}'
        type: NSString
    AVSampleBufferVideoRenderer(.*)Notification:
        class: AVSampleBufferVideoRenderer
        static_class: Notifications
        name: '#{g[0]}'
        type: NSString
    AVSampleBufferVideoRenderer(.*)Key:
        class: AVSampleBufferVideoRenderer
        static_class: Keys
        name: '#{g[0]}'
        type: NSString
    AVAudioApplication(.*)Notification:
        class: AVAudioApplication
        static_class: Notifications
        name: '#{g[0]}'
        type: NSString
    AVAudioApplication(.*)Key:
        class: AVAudioApplication
        static_class: Keys
        name: '#{g[0]}'
        type: NSString


    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?AV.*):
        class: FIXME
        name: 'Value__#{g[0]}'

constants:
    AVAudioSessionInterruptionFlags_ShouldResume:
        exclude: true
    AVAudioSessionSetActiveFlags_NotifyOthersOnDeactivation:
        exclude: true
    (AVAUDIOFORMAT_HAVE_CMFORMATDESCRIPTION|AVAUDIOENGINE_HAVE_MUSICPLAYER|AVAUDIOUNIT_HAVE_AUDIOUNIT|AVAUDIOIONODE_HAVE_AUDIOUNIT|AVAUDIOUNITCOMPONENT_HAVE_AUDIOCOMPONENT):
        exclude: true
    AVMusicTrack(LoopCountForever):
        exclude: true
    AVAudioSessionErrorInsufficientPriority: # replaced with AVAudioSessionErrorCodeInsufficientPriority
        exclude: true
    AVAUDIONODE_HAVE_AUAUDIOUNIT:
        exclude: true
    AVAUDIOENGINE_HAVE_AUAUDIOUNIT:
        exclude: true
    AVF_DEPRECATED_FOR_SWIFT_ONLY:
        exclude: true
    AVMusicTimeStampEndOfTrack:
        exclude: true

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?AV.*):
        class: AVFoundation
        name: 'Constant__#{g[0]}'
