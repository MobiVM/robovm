package: org.robovm.apple.foundation
include: [corefoundation, uikit, coretext, coreanimation, coredata, coregraphics, coremedia, security, dispatch]
library: Foundation
framework: Foundation
path_match: ^.*/usr/include/objc/.*$
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/Foundation.framework/Headers/Foundation.h
typedefs:
    BOOL: boolean
    NSInteger: MachineSInt
    NSUInteger: MachineUInt
    CFTypeID: MachineUInt
    CFOptionFlags: MachineUInt
    CFHashCode: MachineUInt
    CFIndex: MachineSInt
    _NSZone: NSZone
    id: NSObject
    'id *': NSObject
    Class: Class<?>
    ObjCClass: Class<?>
    SEL: Selector
    'void *': VoidPtr
    'char *': BytePtr
    'unsigned char *': BytePtr
    'BOOL *': BooleanPtr
    'int *': IntPtr
    'int16_t * *': ShortPtr.ShortPtrPtr
    'int32_t * *': IntPtr.IntPtrPtr
    'unsigned int *': IntPtr
    'unsigned long *': MachineSizedUIntPtr
    'NSInteger *': MachineSizedSIntPtr
    'NSUInteger *': MachineSizedUIntPtr
    'long long *': LongPtr
    'unsigned long long *': LongPtr
    'float *': FloatPtr
    'float * *': FloatPtr.FloatPtrPtr
    'CGFloat *': MachineSizedFloatPtr
    'double *': DoublePtr
    'NSTimeInterval *': DoublePtr
    'Protocol *': ObjCProtocol
    'NSString *': String
    'NSString **': NSString.NSStringPtr
    'NSArray *': NSArray<?>
    'NSArray **': NSArray.NSArrayPtr<?>
    'NSMutableArray *': NSMutableArray<?>
    'NSMutableArray **': NSMutableArray.NSMutableArrayPtr<?>
    'NSDictionary *': 'NSDictionary<?, ?>'
    'NSDictionary **': 'NSDictionary.NSDictionaryPtr<?, ?>'
    'NSMutableDictionary *': 'NSMutableDictionary<?, ?>'
    'NSMutableDictionary **': 'NSMutableDictionary.NSMutableDictionaryPtr<?, ?>'
    'NSSet *': NSSet<?>
    'NSSet **': NSSet.NSSetPtr<?>
    'NSMutableSet *': NSMutableSet<?>
    'NSMutableSet **': NSMutableSet.NSMutableSetPtr<?>
    'NSOrderedSet *': NSOrderedSet<?>
    'NSOrderedSet **': NSOrderedSet.NSOrderedSetPtr<?>
    'NSMutableOrderedSet *': NSMutableOrderedSet<?>
    'NSMutableOrderedSet **': NSMutableOrderedSet.NSMutableOrderedSetPtr<?>
    'NSEnumerator *': NSEnumerator<?>
    NSPropertyListReadOptions: NSPropertyListMutabilityOptions
    # bellow defines to fight current typedef expand issue
    NSURLResourceKey: NSString
    NSAttributedStringKey: NSString
    NSFileProviderServiceName: NSString
    NSUserActivityPersistentIdentifier: NSString # since ios12

generic_typedefs:
    'NSString *': NSString

structdefs:
    vector_char16: 'VectorChar16'
    vector_uchar16: 'VectorChar16'
    vector_ushort2: 'VectorShort2'
    vector_short2: 'VectorShort2'
    vector_ushort3: 'VectorShort3'
    vector_short3: 'VectorShort3'
    vector_ushort4: 'VectorShort4'
    vector_short4: 'VectorShort4'
    vector_uint2: 'VectorInt2'
    vector_int2: 'VectorInt2'
    vector_uint3: 'VectorInt3'
    vector_int3: 'VectorInt3'
    vector_uint4: 'VectorInt4'
    vector_int4: 'VectorInt4'
    vector_float2: 'VectorFloat2'
    vector_float3: 'VectorFloat3'
    vector_float4: 'VectorFloat4'
    vector_double2: 'VectorDouble2'
    vector_double3: 'VectorDouble3'
    vector_double4: 'VectorDouble4'
    simd_float2: 'VectorFloat2'
    simd_float3: 'VectorFloat3'
    simd_float4: 'VectorFloat4'
    simd_quatf: 'VectorFloat4'
    simd_quatd: 'VectorDouble4'
    simd_double2: 'VectorDouble2'
    matrix_float2x2: 'MatrixFloat2x4'
    matrix_float3x2: 'MatrixFloat3x4'
    matrix_float4x2: 'MatrixFloat4x4'
    matrix_float2x3: 'MatrixFloat2x4'
    matrix_float3x3: 'MatrixFloat3x4'
    matrix_float4x3: 'MatrixFloat4x4'
    matrix_float2x4: 'MatrixFloat2x4'
    matrix_float3x4: 'MatrixFloat3x4'
    matrix_float4x4: 'MatrixFloat4x4'
    simd_float4x4: 'MatrixFloat4x4'
    simd_float3x3: 'MatrixFloat3x3'
    matrix_double4x4: 'MatrixDouble4x4'

private_typedefs:
    'void (^)(id _Nullable, NSRange, BOOL * _Nonnull)': '@Block("(,@ByVal,)") VoidBlock3<NSObject, NSRange, BooleanPtr>'
    'void (^)(id, NSUInteger, BOOL *)': '@Block("(,@MachineSizedUInt,)") VoidBlock3<NSObject, Long, BooleanPtr>'
    'void (^)(NSDictionary<NSString *,id> * _Nonnull, NSRange, BOOL * _Nonnull)': '@Block("(,@ByVal,)") VoidBlock3<NSDictionary<NSString, ?>, NSRange, BooleanPtr>'

enums:
    NSActivityOptions: {}
    NSAttributedStringEnumerationOptions: {}
    NSBinarySearchingOptions: {}
    NSBundleExecutableArchitectureType: { first: NSBundleExecutableArchitectureI386 }
    NSByteCountFormatterCountStyle: {}
    NSByteCountFormatterUnits: { skip_none: true }
    NSCalculationError: {}
    NSCalendarOptions: {}
    NSCalendarUnit: {prefix: NSCalendarUnit, ignore: '^.+CalendarUnit$'}
    NSCocoaErrorCode: {first: NSFileNoSuchFileError, suffix: Error}
    NSComparisonPredicateModifier: { suffix: PredicateModifier }
    NSComparisonPredicateOptions: { suffix: PredicateOption }
    NSComparisonResult: {}
    NSCompoundPredicateType: { suffix: PredicateType }
    NSDataBase64DecodingOptions: { prefix: NSDataBase64Decoding }
    NSDataBase64EncodingOptions: {}
    NSDataReadingOptions: { prefix: NSDataReading, ignore: '^(NSDataReadingMapped|NSMappedRead|NSUncachedRead)$'}
    NSDataSearchOptions: {}
    NSDataWritingOptions: { prefix: NSDataWriting, ignore: NSAtomicWrite }
    NSDateComponentsFormatterUnitsStyle: {}
    NSDateComponentsFormatterZeroFormattingBehavior: {}
    NSDateFormatterBehavior: {}
    NSDateFormatterStyle: { suffix: Style }
    NSDateIntervalFormatterStyle: { suffix: Style }
    NSDecodingFailurePolicy: {}
    NSDirectoryEnumerationOptions: {}
    NSEnergyFormatterUnit: {}
    NSEnumerationOptions: { bits: true }
    NSExpressionType: { suffix: ExpressionType }
    NSFileCoordinatorReadingOptions: {}
    NSFileCoordinatorWritingOptions: {}
    NSFileManagerItemReplacementOptions: {}
    NSFileManagerUnmountOptions: {}
    NSFileVersionAddingOptions: { prefix: NSFileVersionAdding }
    NSFileVersionReplacingOptions: { prefix: NSFileVersionReplacing }
    NSFileWrapperReadingOptions: {}
    NSFileWrapperWritingOptions: {}
    NSFormattingContext: {}
    NSFormattingUnitStyle: {}
    NSHTTPCookieAcceptPolicy: {}
    NSItemProviderErrorCode: { suffix: Error }
    NSISO8601DateFormatOptions: {}
    NSJSONReadingOptions: {}
    NSJSONWritingOptions: { prefix: NSJSONWriting }
    NSKeyValueChange: {}
    NSKeyValueObservingOptions: {}
    NSKeyValueSetMutationKind: { suffix: SetMutation }
    NSLengthFormatterUnit: {}
    NSLinguisticTaggerOptions: {}
    NSLocaleLanguageDirection: {}
    NSMachPortRights: { first: NSMachPortDeallocateNone }
    NSMassFormatterUnit: {}
    NSMatchingFlags: {}
    NSMatchingOptions: {}
    NSMeasurementFormatterUnitOptions: {bits: true}
    NSNetServiceOptions: {}
    NSNetServiceErrorCode: { first: NSNetServicesUnknownError, suffix: Error }
    NSNotificationCoalescing: { bits: true }
    NSNumberFormatterBehavior: {}
    NSNumberFormatterPadPosition: {}
    NSNumberFormatterRoundingMode: {}
    NSNumberFormatterStyle: { suffix: Style }
    # attached marshaller as enum is used as NSUinteger, check [NSProcessInfo operatingSystem]
    NSOperatingSystem: { first: NSWindowsNTOperatingSystem, suffix: OperatingSystem, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    NSOperationQueuePriority: {}
    NSPersonNameComponentsFormatterStyle: {}
    NSPersonNameComponentsFormatterOptions: {prefix: NSPersonNameComponentsFormatter}
    NSProcessInfoThermalState: {}
    NSPointerFunctionsOptions: { name: NSHashTableOptions, bits: true}
    NSPostingStyle: {}
    NSPredicateOperatorType: { suffix: PredicateOperatorType }
    NSPropertyListFormat: { suffix: Format }
    NSPropertyListMutabilityOptions: {}
    NSQualityOfService: {}
    NSRegularExpressionOptions: {}
    NSRoundingMode: {}
    NSSearchPathDirectory: {}
    NSSearchPathDomainMask: {}
    NSSortOptions: { bits: true }
    NSStreamEvent: {}
    NSStreamStatus: {}
    NSStringCompareOptions: { suffix: Search }
    NSStringEncodingConversionOptions: {}
    NSStringEncoding: { first: NSASCIIStringEncoding, suffix: StringEncoding }
    NSStringEncoding2: {first: NSProprietaryStringEncoding, merge_with: NSStringEncoding, prefix: NS, suffix: StringEncoding }
    NSStringEnumerationOptions: {skip_none: true}
    NSTextCheckingType: {}
    NSTimeZoneNameStyle: {}
    NSUbiquitousKeyValueStoreChangeReason: { first: NSUbiquitousKeyValueStoreServerChange }
    NSURLBookmarkCreationOptions: {}
    NSURLBookmarkResolutionOptions: {prefix: NSURLBookmarkResolution}
    NSURLCacheStoragePolicy: {}
    NSURLCredentialPersistence: {}
    NSURLErrorCode: { first: NSURLErrorUnknown }
    NSURLErrorCancelledReason: { first: NSURLErrorCancelledReasonUserForceQuitApplication }
    NSURLRelationship: {}
    NSURLRequestCachePolicy: {}
    NSURLRequestNetworkServiceType: {}
    NSURLSessionAuthChallengeDisposition: {}
    NSURLSessionResponseDisposition: {}
    NSURLSessionTaskState: {}
    NSURLSessionTaskMetricsResourceFetchType: {}
    NSVolumeEnumerationOptions: {}
    NSXMLParserErrorCode: { first: NSXMLParserInternalError, suffix: Error }
    NSXMLParserExternalEntityResolvingPolicy: {}
    NSItemProviderRepresentationVisibility: {} #since 11.0
    NSItemProviderFileOptions: {prefix: NSItemProviderFileOption} #since 11.0
    NSXPCConnectionOptions: {prefix: NSXPCConnection} #since 6.0
    NSLinguisticTaggerUnit: {}
    NSURLSessionMultipathServiceType: {} #since 11.0
    NSURLSessionDelayedRequestDisposition: {prefix: NSURLSessionDelayedRequest} #since 11.0

    NSCollectionChangeType: {prefix: NSCollectionChange} #since 13.0
    NSOrderedCollectionDifferenceCalculationOptions: {prefix: NSOrderedCollectionDifferenceCalculation} #since 13.0
    NSDataCompressionAlgorithm: {} #since 13.0
    NSRelativeDateTimeFormatterStyle: {} #since 13.0
    NSRelativeDateTimeFormatterUnitsStyle: {} #since 13.0
    NSURLErrorNetworkUnavailableReason: {} #since 13.0
    NSURLSessionWebSocketMessageType: {} #since 13.0
    NSURLSessionWebSocketCloseCode: {} #since 13.0
    NSURLSessionTaskMetricsDomainResolutionProtocol: {} #since 14.0
    NSTextCheckingTypes: {prefix: NSTextChecking, name: NSTextCheckingTypes}

    NSInlinePresentationIntent: { } #since 15.0
    NSAttributedStringMarkdownParsingFailurePolicy: { prefix: NSAttributedStringMarkdownParsingFailureReturn } #since 15.0
    NSAttributedStringMarkdownInterpretedSyntax: { } #since 15.0
    NSAttributedStringFormattingOptions: { prefix: NSAttributedStringFormatting }
    NSPresentationIntentKind: { } #since 15.0
    NSPresentationIntentTableColumnAlignment: { } #since 15.0
    NSGrammaticalGender: { } #since 15.0
    NSGrammaticalPartOfSpeech: { } #since 15.0
    NSGrammaticalNumber: { } #since 15.0
    NSURLRequestAttribution: { } #since 15.0

    NSGrammaticalCase: {} #since 17.0
    NSGrammaticalPronounType: {} #since 17.0
    NSGrammaticalPerson: {} #since 17.0
    NSGrammaticalDetermination: {} #since 17.0
    NSGrammaticalDefiniteness: {} #since 17.0

    IGNORED1: {first: NS_UnknownByteOrder, exclude: true}  # ignored same as constants
    IGNORED2: {first: NSWrapCalendarComponents, exclude: true} # deprecated
    IGNORED3: {first: NSDateComponentUndefined, exclude: true} # ignored as seems to be constant only
    IGNORED4: {first: NSTextCheckingAllSystemTypes, exclude: true}
categories:
    NSErrorRecoveryAttempting@NSObject: {protocol: true}

classes:
    NSRange: {}
    NSDecimal: {}
    NSZone:
        annotations: ['@Marshaler(NSString.AsStringMarshaler.class)']
    NSFastEnumerationState: {}
    NSOperatingSystemVersion: {}

    # These classes do not exist in Foundation. We use them to hold global values related to the
    # NSKeyValueCoding and NSKeyValueObserving informal protocols.
    NSKeyValueOperator: { visibility: 'public final' }

    NS.*Internal: { exclude: true }

    NSCocoaError:
        extends: NSError
        annotations: ['@StronglyLinked']
    NSPOSIXError:
        extends: NSError
        annotations: ['@StronglyLinked']
    NSMachError:
        extends: NSError
        annotations: ['@StronglyLinked']
    NSCarbonError:
        extends: NSError
        annotations: ['@StronglyLinked']
    NSItemProviderError:
        extends: NSError
        annotations: ['@StronglyLinked']
    NSStreamSocketSSLError:
        extends: NSError
        annotations: ['@StronglyLinked']
    NSStreamSOCKSError:
        extends: NSError
        annotations: ['@StronglyLinked']
    NSURLError:
        extends: NSError
        annotations: ['@StronglyLinked']
    NSXMLParserError:
        extends: NSError
        annotations: ['@StronglyLinked']

    NSArray: # DONE
        protocols: [NSFastEnumeration, NSPropertyList, List<T>]
        properties:
            'count':
                visibility: protected
            'firstObject':
                name: first
                omit_prefix: true
                type: T
            'lastObject':
                name: last
                omit_prefix: true
                type: T
            'description':
                exclude: true
        methods:
            '-init':
                name: init
            '-initWithArray:':
                name: init
                visibility: protected
                constructor: false
            '-initWithObjects:count:':
                name: init
                visibility: protected
                constructor: false
                parameters:
                    objects:
                        type: '@Pointer long'
            '-containsObject:':
                trim_after_first_colon: true
                visibility: protected
            '-objectAtIndex:':
                name: getObjectAt
                visibility: protected
                return_type: T
            '-indexOfObject:':
                trim_after_first_colon: true
                visibility: protected
            '-subarrayWithRange:':
                name: getSubarray
                visibility: protected
                return_type: NSArray<T>
            '+arrayWithContentsOfFile:':
                name: readFile
                visibility: protected
                return_type: NSArray<?>
            '+arrayWithContentsOfURL:':
                name: read
                return_type: NSArray<?>
            '-writeToFile:atomically:':
                name: writeFile
                visibility: protected
                parameters:
                    useAuxiliaryFile:
                        name: atomically
            '-writeToURL:atomically:':
                name: write
            '-addObserver:toObjectsAtIndexes:forKeyPath:options:context:':
                name: addObserver
            '-removeObserver:fromObjectsAtIndexes:forKeyPath:context:':
                name: removeObserver
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSAssertionHandler: {exclude: true}
    NSAttributedString: # DONE
        annotations: ['@WeaklyLinked']
        properties:
            'length':
                omit_prefix: true
        methods:
            '-initWithString:':
                name: init
            '-initWithAttributedString:':
                name: init
            '-initWithContentsOfMarkdownFileAtURL:options:baseURL:error:':
                name: init
                throws: NSErrorException
            '-initWithMarkdown:options:baseURL:error:':
                name: init
                throws: NSErrorException
            '-initWithMarkdownString:options:baseURL:error:':
                name: init
                throws: NSErrorException
            '-attribute:atIndex:effectiveRange:':
                name: getAttribute
                parameters:
                    attrName:
                        type: NSString
            '-attribute:atIndex:longestEffectiveRange:inRange:':
                name: getAttribute
                parameters:
                    attrName:
                        type: NSString
            '-attributesAtIndex:effectiveRange:':
                name: getAttributesDictionary
                return_type: 'NSDictionary<NSString, ?>'
            '-attributesAtIndex:longestEffectiveRange:inRange:':
                name: getAttributesDictionary
                return_type: 'NSDictionary<NSString, ?>'
            '-attributedSubstringFromRange:':
                name: substring
            '-initWithString:attributes:':
                name: init
                parameters:
                    attrs:
                        type: 'NSDictionary<NSString, ?>'
            '-enumerateAttributesInRange:options:usingBlock:':
                name: enumerateAttributes
            '-enumerateAttribute:inRange:options:usingBlock:':
                name: enumerateAttribute
                parameters:
                    attrName:
                        type: NSString
            '-isEqualToAttributedString:':
                name: equalsTo
    NSAutoreleasePool: # DONE
        methods:
            '-drain': {}
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSBlockOperation: # DONE
        skip_def_constructor: true
        properties:
            'executionBlocks':
                exclude: true # We cannot marshal NSArray<BlockType>
        methods:
            '+blockOperationWithBlock:':
                name: create
                constructor: true
            '-addExecutionBlock:':
                trim_after_first_colon: true
    NSBundle: # DONE
        properties:
            'executableArchitectures':
                type: List<NSBundleExecutableArchitectureType>
                marshaler: NSBundleExecutableArchitectureType.AsListMarshaler
            '(preferredLocalizations|localizations)':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            '(infoDictionary|localizedInfoDictionary)':
                type: 'NSDictionary<NSString, ?>'
            '(allBundles|allFrameworks)':
                type: NSArray<NSBundle>
        methods:
            '+mainBundle':
                property: true
            '+pathForResource:ofType:inDirectory:':
                name: findResourcePathInBundle
            '+pathsForResourcesOfType:inDirectory:':
                name: findResourcesPathsInBundle
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '+URLForResource:withExtension:subdirectory:inBundleWithURL:':
                name: findResourceURLInBundle
            '+URLsForResourcesWithExtension:subdirectory:inBundleWithURL:':
                name: findResourceURLsInBundle
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '+preferredLocalizationsFromArray:.*':
                name: getPreferredLocalizations
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
                parameters:
                    localizationsArray:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
                    preferencesArray:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-pathForAuxiliaryExecutable:':
                name: findAuxiliaryExecutablePath
            '-pathForResource:ofType:':
                name: findResourcePath
            '-pathForResource:ofType:inDirectory:forLocalization:':
                name: findResourcePath
            '-pathForResource:ofType:inDirectory:':
                name: findResourcePath
            '-pathsForResourcesOfType:inDirectory:':
                name: findResourcesPaths
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '-pathsForResourcesOfType:inDirectory:forLocalization:':
                name: findResourcesPaths
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '-classNamed:':
                name: getClassNamed
            '-loadAndReturnError:':
                name: load
                throws: NSErrorException
            '-localizedStringForKey:value:table:':
                name: getLocalizedString
            '-objectForInfoDictionaryKey:':
                name: getInfoDictionaryObject
            '-preflightAndReturnError:':
                name: preflight
                throws: NSErrorException
            '-URLForAuxiliaryExecutable:':
                name: findAuxiliaryExecutableURL
            '-URLForResource.*':
                name: findResourceURL
            '-URLsForResources.*':
                name: findResourceURLs
                return_type: NSArray<NSURL>
            '+bundleForClass:':
                name: getBundle
            '+bundleWithIdentifier:':
                name: getBundle
            '-initWithPath:':
                name: init
                constructor: false
            '-initWithURL:':
                name: init
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSBundleResourceRequest: # DONE
        properties:
            'tags':
                type: Set<String>
                marshaler: NSSet.AsStringSetMarshaler
        methods:
            '-init.*':
                name: init
                parameters:
                    tags:
                        type: Set<String>
                        marshaler: NSSet.AsStringSetMarshaler
            '-beginAccessingResourcesWithCompletionHandler:':
                name: beginAccessingResources
            '-conditionallyBeginAccessingResourcesWithCompletionHandler:':
                name: conditionallyBeginAccessingResources
    NSByteCountFormatter: # DONE
        properties:
            'zeroPadsFractionDigits':
                getter: zeroPadsFractionDigits
        methods:
            '+stringFromByteCount:countStyle:':
                name: format
            '-stringFromByteCount:':
                name: format
            '+stringFromMeasurement:countStyle:':
                name: format
    NSCache: # DONE
        methods:
            '-objectForKey:':
                name: get
            '-removeObjectForKey:':
                name: remove
            '-setObject:forKey:':
                trim_after_first_colon: true
                visibility: protected
            '-setObject:forKey:cost:':
                trim_after_first_colon: true
                visibility: protected
            '-removeAllObjects':
                name: clear
    NSCachedURLResponse: # DONE
        methods:
            '-storagePolicy':
                property: true
                return_type: NSURLCacheStoragePolicy
            '-initWithResponse:data:userInfo:storagePolicy:':
                name: init
                parameters:
                    storagePolicy:
                        type: NSURLCacheStoragePolicy
            '-init.*':
                name: init
    NSCalendar: # DONE
        properties:
            'calendarIdentifier':
                type: NSCalendarIdentifier
            '.*Symbols':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '+currentCalendar':
                property: true
                return_type: NSCalendar
            '+autoupdatingCurrentCalendar':
                property: true
                return_type: NSCalendar
            '-initWithCalendarIdentifier:':
                name: init
                parameters:
                    ident:
                        type: NSCalendarIdentifier
            '-maximumRangeOfUnit:':
                name: getMaximumRange
            '-minimumRangeOfUnit:':
                name: getMinimumRange
            '-ordinalityOfUnit:inUnit:forDate:':
                name: getOrdinality
            '-rangeOfUnit:inUnit:forDate:':
                name: getRange
            '-rangeOfUnit:startDate:interval:forDate:':
                name: getRange
                visibility: protected
            '-components:fromDate:':
                name: getComponents
            '-components:fromDate:toDate:options:':
                name: getComponents
            '-dateByAddingComponents:toDate:options:':
                name: newDateByAddingComponents
            '-dateFromComponents:':
                name: newDateFromComponents
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSCharacterSet: # DONE
        skip_handle_constructor: false
        methods:
            '-init.*':
                name: init
            '+.*CharacterSet':
                property: true
                return_type: NSCharacterSet
            '+characterSetWithContentsOfFile:':
                name: createWithFile
                visibility: private
                return_type: '@Pointer long'
            '+characterSetWithBitmapRepresentation:':
                name: create
                constructor: true
            '+characterSetWithCharactersInString:':
                name: create
                constructor: true
            '+characterSetWithRange:':
                name: create
                constructor: true
            '-characterIsMember:':
                name: isMember
            '-longCharacterIsMember:':
                name: isMember
            '-hasMemberInPlane:':
                trim_after_first_colon: true
            '-isSupersetOfSet:':
                name: isSuperset
    NSCoder: # DONE
        properties:
            'allowedClasses':
                type: List<ObjCClass>
                marshaler: NSArray.AsListMarshaler
        methods:
            '-decodeArrayOfObjCType:count:at:': {exclude: true}
            '-decodeValueOfObjCType:at:': {exclude: true}
            '-decodeValueOfObjCType:at:size:': {exclude: true}
            '-encodeArrayOfObjCType:count:at:': {exclude: true}
            '-encodeValueOfObjCType:at:': {exclude: true}
            '-encodeValuesOfObjCTypes:': {exclude: true}
            '-containsValueForKey:':
                name: containsValue
            '-(decode[a-zA-Z0-9]+)ForKey:':
                name: '#{g[0]}0'
                visibility: protected
            '-decodeBytesForKey:returnedLength:':
                name: decodeBytes0
                visibility: protected
                return_type: BytePtr
            '-decodeBytesWithReturnedLength:':
                name: decodeBytes0
                visibility: protected
                return_type: BytePtr
            '-decodeObjectOfClass:forKey:':
                name: decodeObject0
                visibility: protected # reordering parameters
                parameters:
                    aClass:
                        type: 'Class<? extends NSObject>'
            '-decodeObjectOfClasses:forKey:':
                name: decodeObject0
                visibility: protected # reordering parameters
                parameters:
                    classes:
                        type: List<ObjCClass>
                        marshaler: NSArray.AsListMarshaler
            '-decodeTopLevelObject.*rror:':
                name: decodeTopLevelObject
                throws: NSErrorException
                parameters:
                    aClass:
                        type: 'Class<? extends NSObject>'
            '-(encode[a-zA-Z0-9]+):forKey:':
                name: '#{g[0]}0'
                visibility: protected # reordering parameters
            '-encode[a-zA-Z0-9]+Object:':
                trim_after_first_colon: true
            '-(encodeBytes):length:':
                name: '#{g[0]}0'
                visibility: protected
                parameters:
                    byteaddr:
                        type: '@Pointer long'
            '-(encodeBytes):length:forKey:':
                name: '#{g[0]}0'
                visibility: protected # reordering parameters
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-encodeObject:':
                trim_after_first_colon: true
            '-versionForClassName:':
                name: getVersionForClassName
            '-objectZone':
                property: true
            '-systemVersion':
                property: true
            '-failWithError:':
                name: fail
            '-decodeArrayOfObjectsOfClass:forKey:':
                name: decodeArray
                visibility: protected
            '-decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:':
                name: decodeDictionary
                visibility: protected
            '-decodeArrayOfObjectsOfClasses:forKey:':
                name: decodeArray
                visibility: protected
            '-decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:':
                name: decodeDictionary
                visibility: protected
    NSComparisonPredicate: # DONE
        methods:
            '-init.*':
                name: init
            '+predicateWithLeftExpression:rightExpression:modifier:type:options:': {exclude: true}
            '+predicateWithLeftExpression:rightExpression:customSelector:': {exclude: true}
    NSCompoundPredicate: # DONE
        properties:
            'subpredicates':
                type: NSArray<NSPredicate>
        methods:
            '+andPredicateWithSubpredicates:':
                name: createAndPredicate
                parameters:
                    subpredicates:
                        type: NSArray<NSPredicate>
            '+orPredicateWithSubpredicates:':
                name: createOrPredicate
                parameters:
                    subpredicates:
                        type: NSArray<NSPredicate>
            '+notPredicateWithSubpredicate:':
                name: createNotPredicate
            '-initWithType:subpredicates:':
                name: init
                parameters:
                    subpredicates:
                        type: NSArray<NSPredicate>
            '-compoundPredicateType':
                property: true
    NSCondition: # DONE
        methods:
            '-wait':
                name: await
            '-waitUntilDate:':
                name: await
    NSConditionLock: # DONE
        methods:
            '-init.*':
                name: init
            '-lock.*':
                name: lock
            '-unlock.*':
                name: unlock
            '-tryLockWhenCondition:':
                name: tryLock
    NSCountedSet: # DONE
        methods:
            '-countForObject:':
                trim_after_first_colon: true
                visibility: protected
    NSData: # DONE
        protocols: [NSPropertyList]
        properties:
            'bytes':
                name: bytes0
                visibility: protected
                type: '@Pointer long'
            'description':
                exclude: true
        methods:
            '-initWithData:':
                name: init
            '-initWithBase64EncodedData:options:':
                name: init
                constructor: false
            '-initWithBase64EncodedString:options:':
                name: init
                constructor: false
            '-initWithBytes:length:':
                name: init
                constructor: false
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-initWithBytesNoCopy:length:freeWhenDone:':
                name: init
                constructor: false
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-getBytes:length:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    buffer:
                        type: '@Pointer long'
            '-subdataWithRange:':
                name: getSubdata
            '-rangeOfData:options:range:':
                name: find
            '-writeToFile:options:error:':
                name: writeFile
                throws: NSErrorException
                visibility: protected
            '-writeToFile.*':
                name: writeFile
                visibility: protected
                parameters:
                    useAuxiliaryFile:
                        name: atomically
            '-writeToURL:atomically:':
                name: write
            '-writeToURL:options:error:':
                name: write
                throws: NSErrorException
            '-writeToURL.*':
                name: write
                visibility: protected
            '-base64EncodedDataWithOptions:':
                name: toBase64EncodedData
            '-base64EncodedStringWithOptions:':
                name: toBase64EncodedString
            '+dataWithContentsOfURL:':
                name: read
            '+dataWithContentsOfURL:options:error:':
                name: read
                throws: NSErrorException
            '+dataWithContentsOfFile:options:error:':
                name: readFile
                throws: NSErrorException
                visibility: protected
            '+dataWithContentsOfFile:.*':
                name: readFile
                visibility: protected
            '+dataWithContentsOfMappedFile:':
                name: readMappedFile
                visibility: protected
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSDataDetector: # DONE
        skip_def_constructor: true
        properties:
            'checkingTypes':
                type: NSTextCheckingType
        methods:
            '+dataDetectorWithTypes:error:': {exclude: true}
            '-initWithTypes:error:':
                name: init
                throws: NSErrorException
            '-initWithPattern:options:error:':
                name: init
                throws: NSErrorException
    NSDate: # DONE
        protocols: [NSPropertyList]
        properties:
            'description':
                exclude: true
            '+timeIntervalSinceReferenceDate': {exclude: true}
        methods:
            '+distant.*':
                property: true
                return_type: NSDate
            '+date(WithTimeIntervalSinceNow):':
                name: 'create#{g[0]}'
            '+date(WithTimeIntervalSinceReferenceDate):':
                name: 'create#{g[0]}'
            '+date(WithTimeIntervalSince1970):':
                name: 'create#{g[0]}'
            '+dateWithTimeInterval:sinceDate:':
                name: 'createWithTimeIntervalSinceDate'
            '+date':
                name: now
            '-initWithTimeIntervalSince1970:':
                name: init
            '-init': {}
            '-init.*': {exclude: true}
            '-timeIntervalSinceDate:':
                name: getTimeIntervalSince
            '-addTimeInterval:': {exclude: true}
            '-compare:':
                trim_after_first_colon: true
            '-dateByAddingTimeInterval:':
                name: newDateByAddingTimeInterval
                return_type: NSDate
            '-isEqualToDate:':
                name: equalsTo
            '-descriptionWithLocale:':
                name: toString
                parameters:
                    locale:
                        type: NSLocale
            '-earlierDate:':
                trim_after_first_colon: true
            '-laterDate:':
                trim_after_first_colon: true
    NSDateComponents: # DONE
        methods:
            '-(week)':
                property: true
            '-setValue:forComponent:':
                trim_after_first_colon: true
                visibility: protected
            '-valueForComponent:':
                name: getValue
            '-isValidDateInCalendar:':
                trim_after_first_colon: true
    NSDateComponentsFormatter: # DONE
        methods:
            '-stringForObjectValue:':
                name: format
            '-stringFromDateComponents:':
                name: format
            '-stringFromDate:toDate:':
                name: format
            '-stringFromTimeInterval:':
                name: format
            '-.*':
                exclude: true
            '+.*':
                exclude: true
    NSDateFormatter: # DONE
        properties:
            '.*Symbols':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-getObjectValue:forString:range:error:': {exclude: true}
            '+defaultFormatterBehavior':
                property: true
            '+dateFormatFromTemplate:options:locale:':
                name: getDateFormatFromTemplate
            '+localizedStringFromDate:dateStyle:timeStyle:':
                name: format
            '-stringFromDate:':
                name: format
            '-dateFromString:':
                name: parse
            '-setLocalizedDateFormatFromTemplate:':
                name: setLocalizedDateFormat
    NSDateInterval: # DONE
        methods:
            '-init.*':
                name: init
            '-compare:':
                trim_after_first_colon: true
            '-isEqualToDateInterval:':
                name: equalsTo
            '-intersectsDateInterval:':
                name: intersects
            '-intersectionWithDateInterval:':
                name: getIntersection
            '-containsDate:':
                trim_after_first_colon: true
    NSDateIntervalFormatter: # DONE
        methods:
            '-stringFromDate:toDate:':
                name: format
            '-stringFromDateInterval:':
                name: format
    NSDecimalNumber: # DONE
        skip_def_constructor: true
        properties:
            'decimalValue':
                exclude: true
            'objCType':
                exclude: true
            'doubleValue':
                exclude: true
            'maximumDecimalNumber':
                name: max
            'minimumDecimalNumber':
                name: min
            'notANumber':
                name: NaN
            'zero':
                getter: zero
            'one':
                getter: one
        methods:
            '+decimalNumber.*': {exclude: true}
            '-compare:': {exclude: true}
            '-descriptionWithLocale:': {exclude: true}
            '-decimalNumberByAdding:.*':
                name: add
            '-decimalNumberBySubtracting:.*':
                name: subtract
            '-decimalNumberByMultiplyingBy:.*':
                name: multiply
            '-decimalNumberByDividingBy:.*':
                name: divide
            '-decimalNumberByRaisingToPower:.*':
                name: raise
            '-decimalNumberByMultiplyingByPowerOf10:.*':
                name: multiplyByPowerOf10
            '-decimalNumberByRoundingAccordingToBehavior:':
                name: round
            '-initWithString:locale:':
                name: init
                parameters:
                    locale:
                        type: NSLocale
            '-initWithMantissa:exponent:isNegative:':
                name: init
            '-initWithDecimal:':
                name: init
            '-initWithString:':
                name: init
    NSDecimalNumberHandler: # DONE
        skip_def_constructor: true
        methods:
            '-init.*':
                name: init
            '+decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:': {exclude: true}
            '+defaultDecimalNumberHandler':
                property: true
                return_type: NSDecimalNumberHandler
    NSDictionary: # DONE
        protocols: [NSPropertyList, NSFastEnumeration, 'Map<K, V>']
        template_parameters:
            ObjectType: V
        properties:
            'count':
                visibility: protected
            'allKeys':
                visibility: protected
                type: NSArray<K>
            'allValues':
                visibility: protected
                type: NSArray<V>
            'description':
                exclude: true
            'descriptionInStringsFileFormat':
                name: toFileFormatString
                omit_prefix: true
        methods:
            '+dictionaryWithContentsOfFile:':
                name: read
                visibility: protected
                return_type: 'NSDictionary<?, ?>'
            '+dictionaryWithContentsOfURL:':
                name: read
                return_type: 'NSDictionary<?, ?>'
            '-initWithDictionary:':
                name: init
                visibility: protected
                constructor: false
                return_type: '@Pointer long'
            '-init':
                name: init
            '-initWithObjects:forKeys:':
                name: init
                visibility: protected
                constructor: false
                return_type: '@Pointer long'
            '-objectForKey:':
                name: getObject
                visibility: protected
                return_type: V
                parameters:
                    aKey:
                        type: K
            '-isEqualToDictionary:':
                name: equalsTo
                visibility: protected
            '-writeToFile:atomically:':
                name: writeFile
                visibility: protected
                parameters:
                    useAuxiliaryFile:
                        name: atomically
            '-writeToURL:atomically:':
                name: write
            '-descriptionInStringsFileFormat':
                name: toStringsFileFormat
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSDimension: # DONE
        methods:
            '-init.*':
                name: init
            '+baseUnit':
                property: true
    NSDirectoryEnumerator: # DONE
        skip_def_constructor: true
        properties:
            '(fileAttributes|directoryAttributes)':
                type: NSFileAttributes
    NSEnergyFormatter: # DONE
        methods:
            '-stringFromValue:unit:':
                name: format
            '-stringFromJoules:':
                name: formatJoules
            '-unitStringFromValue:unit:':
                name: formatUnit
            '-unitStringFromJoules:usedUnit:':
                name: formatUnitJoules
                visibility: protected
            '-getObjectValue:forString:errorDescription:':
                exclude: true
    NSEnumerator: # DONE
        properties:
            'allObjects':
                type: NSArray<T>
        methods:
            '-nextObject':
                return_type: T
    NSError: # DONE
        skip_def_constructor: true
        properties:
            'localizedRecoveryOptions':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'userInfo':
                type: NSErrorUserInfo
            'recoveryAttempter':
                type: NSErrorRecoveryAttempting
        methods:
            '+errorWithDomain:code:userInfo:':
                exclude: true
            '-initWithDomain:code:userInfo:':
                name: init
                parameters:
                    domain:
                        type: String
                    dict:
                        type: NSErrorUserInfo
            '+setUserInfoValueProviderForDomain:provider:':
                name: setUserInfoValueProvider
                parameters:
                    provider:
                        type: '@Block Block2<NSError, String, NSObject>'
            '+userInfoValueProviderForDomain:':
                name: getUserInfoValueProvider
                return_type: '@Block Block2<NSError, String, NSObject>'
    NSException: # DONE
        skip_def_constructor: true
        properties:
            'callStackSymbols':
                type: NSArray<NSString>
            'callStackReturnAddresses':
                type: NSArray<NSNumber>
        methods:
            '-init.*':
                name: init
            '+exceptionWithName:reason:userInfo:': {exclude: true}
    NSExpression: # DONE
        skip_handle_constructor: false
        properties:
            'expressionBlock':
                type: '@Block Block3<NSObject, NSArray<NSExpression>, NSMutableDictionary<?, ?>, NSObject>'
        methods:
            '-init.*':
                name: init
            '+expressionForBlock:arguments:':
                name: createForBlock
                parameters:
                    block:
                        type: '@Block Block3<NSObject, NSArray<NSExpression>, NSMutableDictionary<?, ?>, NSObject>'
            '+expression(For.*?)(:.*)?':
                name: 'create#{g[0]}'
            '+expressionWithFormat:argumentArray:':
                name: create
                constructor: true
            '-expressionValueWithObject:context:':
                name: evaluate
    NSExtensionContext: # DONE
        properties:
            'inputItems':
                type: NSArray<NSExtensionItem>
        methods:
            '-completeRequestReturningItems:completionHandler:':
                name: completeRequest
                parameters:
                    items:
                        type: NSArray<NSExtensionItem>
            '-cancelRequestWithError:':
                name: cancelRequest
            '-openURL:completionHandler:':
                name: openURL
    NSExtensionItem: {} # DONE
    NSFileAccessIntent: # DONE
        methods:
            '+readingIntentWithURL:options:':
                name: createReadingIntent
            '+writingIntentWithURL:options:':
                name: createWritingIntent
    NSFileCoordinator: # DONE
        properties:
            'filePresenters':
                type: List<NSFilePresenter>
                marshaler: NSArray.AsListMarshaler
        methods:
            '-init.*':
                name: init
            '-coordinateAccessWithIntents:queue:byAccessor:':
                name: coordinateAccessWithIntents
                parameters:
                    intents:
                        type: NSArray<NSFileAccessIntent>
            '-coordinateReadingItemAtURL:options:error:byAccessor:':
                name: coordinateReadingItem
                visibility: protected # throws NSErrorException
            '-coordinateWritingItemAtURL:options:error:byAccessor:':
                name: coordinateWritingItem
                visibility: protected # throws NSErrorException
            '-coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:':
                name: coordinateReadingItem
                visibility: protected # throws NSErrorException
            '-coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:':
                name: coordinateWritingItem
                visibility: protected # throws NSErrorException
            '-prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:':
                name: prepareForReadingItems
                visibility: protected # throws NSErrorException
                parameters:
                    readingURLs:
                        type: NSArray<NSURL>
                    writingURLs:
                        type: NSArray<NSURL>
            '-itemAtURL:willMoveToURL:':
                name: itemAtURLWillMoveToURL
            '-itemAtURL:didMoveToURL:':
                name: itemAtURLDidMoveToURL
            '-itemAtURL:didChangeUbiquityAttributes:':
                name: itemAtURLDidChangeUbiquityAttributes
            '+addFilePresenter:':
                trim_after_first_colon: true
            '+removeFilePresenter:':
                trim_after_first_colon: true
    NSFileHandle: # DONE
        properties:
            'fileHandleWith(.*)':
                name: '#{g[0]}'
        methods:
            '-init.*':
                name: init
            '-readDataOfLength:':
                name: readData
            '-writeData:':
                trim_after_first_colon: true
            '-seekToFileOffset:':
                trim_after_first_colon: true
            '-truncateFileAtOffset:':
                name: truncateFile
            '+fileHandleForReadingAtPath:':
                name: createForReading
                return_type: NSFileHandle
            '+fileHandleForWritingAtPath:':
                name: createForWriting
                return_type: NSFileHandle
            '+fileHandleForUpdatingAtPath:':
                name: createForUpdating
                return_type: NSFileHandle
            '+fileHandleForReadingFromURL:error:':
                name: createForReading
                throws: NSErrorException
                return_type: NSFileHandle
            '+fileHandleForWritingToURL:error:':
                name: createForWriting
                throws: NSErrorException
                return_type: NSFileHandle
            '+fileHandleForUpdatingURL:error:':
                name: createForUpdating
                throws: NSErrorException
                return_type: NSFileHandle
            '-readInBackgroundAndNotifyForModes:':
                name: readInBackgroundAndNotify
                parameters:
                    modes:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-readToEndOfFileInBackgroundAndNotifyForModes:':
                name: readToEndOfFileInBackgroundAndNotify
                parameters:
                    modes:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-acceptConnectionInBackgroundAndNotifyForModes:':
                name: acceptConnectionInBackgroundAndNotify
                parameters:
                    modes:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-waitForDataInBackgroundAndNotifyForModes:':
                name: waitForDataInBackgroundAndNotify
                parameters:
                    modes:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-readDataToEndOfFileAndReturnError:':
                name: readDataToEndOfFileEx
                throws: NSErrorException
            '-readDataUpToLength:error:':
                name: readDataUpToLengthEx
                throws: NSErrorException
            '-writeData:error:':
                name: writeDataEx
                throws: NSErrorException
            '-getOffset:error:':
                name: getOffsetEx
                throws: NSErrorException
            '-seekToEndReturningOffset:error:':
                name: seekToEndReturningOffsetEx
                throws: NSErrorException
            '-seekToOffset:error:':
                name: seekToOffsetEx
                throws: NSErrorException
            '-truncateAtOffset:error:':
                name: truncateAtOffsetEx
                throws: NSErrorException
    NSFileManager: # DONE
        properties:
            'delegate':
                type: NSFileManagerDelegate
            'ubiquityIdentityToken':
                type: NSObject
        methods:
            '-mountedVolumeURLsIncludingResourceValuesForKeys:options:':
                name: getMountedVolumeURLsIncludingResourceValues
                return_type: NSArray<NSURL>
                visibility: protected
                parameters:
                    propertyKeys:
                        type: List<NSURLFileSystemProperty>
                        marshaler: NSURLFileSystemProperty.AsListMarshaler
            '-contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:':
                name: getContentsOfDirectoryAtURL
                return_type: NSArray<NSURL>
                throws: NSErrorException
                parameters:
                    keys:
                        type: List<NSURLFileSystemProperty>
                        marshaler: NSURLFileSystemProperty.AsListMarshaler
            '-URLsForDirectory:inDomains:':
                name: getURLsForDirectory
                return_type: NSArray<NSURL>
            '-URLForDirectory:inDomain:appropriateForURL:create:error:':
                name: getURLForDirectory
                throws: NSErrorException
            '-createDirectoryAtURL:withIntermediateDirectories:attributes:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    attributes:
                        type: NSFileAttributes
            '-createSymbolicLinkAtURL:withDestinationURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-setAttributes:ofItemAtPath:error:':
                name: setAttributesForItem
                throws: NSErrorException
                parameters:
                    attributes:
                        type: NSFileAttributes
            '-createDirectoryAtPath:withIntermediateDirectories:attributes:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    attributes:
                        type: NSFileAttributes
            '-contentsOfDirectoryAtPath:error:':
                name: getContentsOfDirectoryAtPath
                return_type: NSArray<NSURL>
                throws: NSErrorException
            '-subpathsOfDirectoryAtPath:error:':
                name: getSubpathsOfDirectoryAtPath
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
                throws: NSErrorException
            '-attributesOfItemAtPath:error:':
                name: getAttributesOfItemAtPath
                return_type: NSFileAttributes
                throws: NSErrorException
            '-attributesOfFileSystemForPath:error:':
                name: getAttributesOfFileSystemAtPath
                return_type: NSFileSystemAttributes
                throws: NSErrorException
            '-createSymbolicLinkAtPath:withDestinationPath:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-destinationOfSymbolicLinkAtPath:error:':
                name: getDestinationOfSymbolicLinkAtPath
                throws: NSErrorException
            '-copyItemAtPath:toPath:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-moveItemAtPath:toPath:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-linkItemAtPath:toPath:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-removeItemAtPath:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-copyItemAtURL:toURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-moveItemAtURL:toURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-linkItemAtURL:toURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-removeItemAtURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-fileAttributesAtPath:traverseLink:':
                exclude: true
            '-changeFileAttributes:atPath:':
                exclude: true
            '-directoryContentsAtPath:':
                exclude: true
            '-fileSystemAttributesAtPath:':
                exclude: true
            '-pathContentOfSymbolicLinkAtPath:':
                exclude: true
            '-createSymbolicLinkAtPath:pathContent:':
                exclude: true
            '-createDirectoryAtPath:attributes:':
                exclude: true
            '-changeCurrentDirectoryPath:':
                trim_after_first_colon: true
            '-fileExistsAtPath:':
                name: fileExists
            '-fileExistsAtPath:isDirectory:':
                name: fileExists
                visibility: protected
            '-isReadableFileAtPath:':
                name: fileIsReadable
            '-isWritableFileAtPath:':
                name: fileIsWritable
            '-isExecutableFileAtPath:':
                name: fileIsExecutable
            '-isDeletableFileAtPath:':
                name: fileIsDeletable
            '-contentsEqualAtPath:andPath:':
                name: contentsAtPathEqual
            '-displayNameAtPath:':
                name: getDisplayNameAtPath
            '-componentsToDisplayForPath:':
                name: getComponentsToDisplayForPath
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '-enumeratorAtPath:':
                name: getEnumeratorAtPath
            '-enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:':
                name: getEnumeratorAtURL
                visibility: protected
                return_type: NSDirectoryEnumerator # no generics atm
                parameters:
                    keys:
                        type: List<NSURLFileSystemProperty>
                        marshaler: NSURLFileSystemProperty.AsListMarshaler
            '-subpathsAtPath:':
                name: getSubpathsAtPath
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '-contentsAtPath:':
                name: getContentsAtPath
            '-createFileAtPath:contents:attributes:':
                name: createFileAtPath
                parameters:
                    attr:
                        type: NSFileAttributes
            '-fileSystemRepresentationWithPath:':
                name: getFileSystemRepresentationForPath
                return_type: String
                return_marshaler: StringMarshalers.AsDefaultCharsetZMarshaler
            '-stringWithFileSystemRepresentation:length:':
                name: getPathForFileSystemRepresentation
            '-replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:':
                name: replaceItemAtURL
                throws: NSErrorException
            '-setUbiquitous:itemAtURL:destinationURL:error:':
                name: setUbiquitousItemAtURL
                throws: NSErrorException
            '-isUbiquitousItemAtURL:':
                trim_after_first_colon: true
            '-startDownloadingUbiquitousItemAtURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-evictUbiquitousItemAtURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-URLForUbiquityContainerIdentifier:':
                name: getURLForUbiquityContainerIdentifier
            '-URLForPublishingUbiquitousItemAtURL:expirationDate:error:':
                name: getURLForPublishingUbiquitousItemAtURL
                throws: NSErrorException
            '-containerURLForSecurityApplicationGroupIdentifier:':
                name: getContainerURLForSecurityApplication
            '+defaultManager':
                property: true
            '-getRelationship:ofDirectoryAtURL:toItemAtURL:error:':
                name: getRelationshipOfDirectoryToItem
                throws: NSErrorException
                visibility: protected
            '-getRelationship:ofDirectory:inDomain:toItemAtURL:error:':
                name: getRelationshipOfDirectoryToItem
                throws: NSErrorException
                visibility: protected
            '-trashItemAtURL:resultingItemURL:error:':
                throws: NSErrorException
                name: trashItemAtURL
            '-getFileProviderServicesForItemAtURL:completionHandler:':
                trim_after_first_colon: true
    NSFileVersion: # DONE
        methods:
            '-replaceItemAtURL:options:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-removeAndReturnError:':
                name: remove
                throws: NSErrorException
            '+currentVersionOfItemAtURL:':
                name: getCurrentItemVersionAtURL
            '+otherVersionsOfItemAtURL:':
                name: getOtherItemVersionsAtURL
                return_type: NSArray<NSFileVersion>
            '+unresolvedConflictVersionsOfItemAtURL:':
                name: getUnresolvedConflictItemVersionsAtURL
                return_type: NSArray<NSFileVersion>
            '+versionOfItemAtURL:forPersistentIdentifier:':
                name: getItemVersionAtURL
            '+getNonlocalVersionsOfItemAtURL:completionHandler:':
                name: getNonlocalItemVersionsAtURL
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<NSArray<NSFileVersion>, NSError>'
            '+removeOtherVersionsOfItemAtURL:error:':
                name: removeOtherItemVersionsAtURL
                throws: NSErrorException
    NSFileWrapper: # DONE
        properties:
            'fileAttributes':
                type: NSFileAttributes
            'fileWrappers':
                type: 'Map<String, NSFileWrapper>'
                marshaler: NSDictionary.AsStringMapMarshaler
        methods:
            '-initWithURL:options:error:':
                name: init
                throws: NSErrorException
            '-initDirectoryWithFileWrappers:':
                name: init
                parameters:
                    childrenByPreferredName:
                        type: 'Map<String, NSFileWrapper>'
                        marshaler: NSDictionary.AsStringMapMarshaler
            '-initWithSerializedRepresentation:':
                name: initSerialized
                constructor: false
            '-init.*':
                name: init
            '-serializedRepresentation':
                name: serialize
            '-matchesContentsOfURL:':
                trim_after_first_colon: true
            '-readFromURL:options:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-writeToURL:options:originalContentsURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-addFileWrapper:':
                trim_after_first_colon: true
            '-addRegularFileWithContents:preferredFilename:':
                name: addRegularFile
            '-removeFileWrapper:':
                trim_after_first_colon: true
            '-keyForFileWrapper:':
                name: getKeyForFileWrapper
    NSFormatter: # DONE
        methods:
            '.*':
                exclude: true
    NSHashTable: # DONE
        properties:
            'pointerFunctions':
                exclude: true
            'count':
                visibility: protected
            'allObjects':
                name: values
                type: NSArray<T>
            'anyObject':
                name: any
                omit_prefix: true
                type: T
            'setRepresentation':
                name: asSet
                omit_prefix: true
                type: NSSet<T>
        methods:
            '-initWithPointerFunctions:capacity:':
                exclude: true
            '-initWithOptions:capacity:':
                name: init
                parameters:
                    options:
                        type: NSHashTableOptions
            '-member:':
                name: isMember
                visibility: protected
            '-objectEnumerator':
                property: true
                visibility: private
                return_type: NSEnumerator<T>
            '-addObject:':
                trim_after_first_colon: true
                visibility: private
            '-removeObject:':
                trim_after_first_colon: true
                visibility: private
            '-removeAllObjects':
                trim_after_first_colon: true
                visibility: private
            '-containsObject:':
                trim_after_first_colon: true
                visibility: private
            '-intersectsHashTable:':
                name: intersects
                parameters:
                    other:
                        type: NSHashTable<T>
            '-isEqualToHashTable:':
                name: equalsTo
                parameters:
                    other:
                        type: NSHashTable<T>
            '-isSubsetOfHashTable:':
                name: isSubsetOf
                parameters:
                    other:
                        type: NSHashTable<T>
            '-intersectHashTable:':
                name: intersect
                parameters:
                    other:
                        type: NSHashTable<T>
            '-unionHashTable:':
                name: union
                parameters:
                    other:
                        type: NSHashTable<T>
            '-minusHashTable:':
                name: minus
                parameters:
                    other:
                        type: NSHashTable<T>
            '+hashTableWithOptions:':
                exclude: true
            '+weakObjectsHashTable':
                exclude: true
    NSHTTPCookie: # DONE
        properties:
            'properties':
                type: NSHTTPCookieAttributes
            'portList':
                type: List<Integer>
                marshaler: NSArray.AsIntegerListMarshaler
        methods:
            '-initWithProperties:':
                name: init
                parameters:
                    properties:
                        type: NSHTTPCookieAttributes
            '+cookieWithProperties:':
                exclude: true
            '+requestHeaderFieldsWithCookies:':
                name: getRequestHeaderFieldsWithCookies
                return_type: 'Map<String, String>'
                return_marshaler: NSDictionary.AsStringStringMapMarshaler
                parameters:
                    cookies:
                        type: NSArray<NSHTTPCookie>
            '+cookiesWithResponseHeaderFields:forURL:':
                name: getCookiesWithResponseHeaderFields
                return_type: NSArray<NSHTTPCookie>
                parameters:
                    headerFields:
                        type: 'Map<String, String>'
                        marshaler: NSDictionary.AsStringStringMapMarshaler
                    URL:
                        name: url
    NSHTTPCookieStorage: # DONE
        properties:
            'cookies':
                type: NSArray<NSHTTPCookie>
        methods:
            '-deleteCookie:':
                trim_after_first_colon: true
            '-cookiesForURL:':
                name: getCookiesForURL
                return_type: NSArray<NSHTTPCookie>
            '-setCookies:forURL:mainDocumentURL:':
                name: setCookiesForURL
                parameters:
                    cookies:
                        type: NSArray<NSHTTPCookie>
            '-sortedCookiesUsingDescriptors:':
                name: getSortedCookies
                return_type: NSArray<NSHTTPCookie>
                parameters:
                    sortOrder:
                        type: NSArray<NSSortDescriptor>
            '+sharedHTTPCookieStorage':
                property: true
            '-storeCookies:forTask:':
                name: storeCookiesForTask
                parameters:
                    cookies:
                        type: NSArray<NSHTTPCookie>
            '-removeCookiesSinceDate:':
                trim_after_first_colon: true
            '-getCookiesForTask:completionHandler:':
                trim_after_first_colon: true
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock1<NSArray<NSHTTPCookie>>'
            '+sharedCookieStorageForGroupContainerIdentifier:':
                name: getSharedCookieStorageForGroupContainer
    NSHTTPURLResponse: # DONE
        properties:
            'allHeaderFields':
                type: 'Map<String, String>'
                marshaler: NSDictionary.AsStringStringMapMarshaler
        methods:
            '-initWithURL:statusCode:HTTPVersion:headerFields:':
                name: init
                parameters:
                    headerFields:
                        type: 'Map<String, String>'
                        marshaler: NSDictionary.AsStringStringMapMarshaler
            '+localizedStringForStatusCode:':
                name: getLocalizedStatusCode
    NSIndexPath: # DONE
        methods:
            '+indexPathWithIndex:': {exclude: true}
            '+indexPathWithIndexes:length:': {exclude: true}
            '-indexAtPosition:':
                name: getIndexAt
            '-indexPathByAddingIndex:':
                name: addIndex
            '-indexPathByRemovingLastIndex':
                name: removeLastIndex
            '-compare:':
                trim_after_first_colon: true
            '-getIndexes.*':
                trim_after_first_colon: true
                visibility: private
            '-initWithIndexes:length:':
                name: init
                constructor: false
                visibility: private
            '-init.*':
                name: init
    NSIndexSet: # DONE
        properties:
            'count':
                name: size
                omit_prefix: true
            'firstIndex':
                name: first
                omit_prefix: true
            'lastIndex':
                name: last
                omit_prefix: true
        methods:
            '-init.*':
                name: init
            '-isEqualToIndexSet:':
                name: equalsTo
            '-indexGreaterThanIndex:':
                name: greaterThan
            '-indexLessThanIndex:':
                name: lessThan
            '-indexGreaterThanOrEqualToIndex:':
                name: greaterThanOrEqual
            '-indexLessThanOrEqualToIndex:':
                name: lessThanOrEqual
            '-getIndexes:maxCount:inIndexRange:':
                name: getIndexes
                visibility: protected
            '-countOfIndexesInRange:':
                name: getIndexCountInRange
            '-containsIndex:':
                trim_after_first_colon: true
            '-containsIndexesInRange:':
                trim_after_first_colon: true
            '-containsIndexes:':
                trim_after_first_colon: true
            '-intersectsIndexesInRange:':
                trim_after_first_colon: true
            '-enumerateIndexesUsingBlock:':
                name: enumerateIndexes
            '-enumerateIndexesWithOptions:usingBlock:':
                name: enumerateIndexes
            '-enumerateIndexesInRange:options:usingBlock:':
                name: enumerateIndexesInRange
            '-indexPassingTest:':
                name: getIndexPassingTest
                parameters:
                    predicate:
                        type: '@Block("(@MachineSizedUInt,)") Block2<Long, BooleanPtr, Boolean>'
            '-indexWithOptions:passingTest:':
                name: getIndexPassingTest
                parameters:
                    predicate:
                        type: '@Block("(@MachineSizedUInt,)") Block2<Long, BooleanPtr, Boolean>'
            '-indexInRange:options:passingTest:':
                name: getIndexInRangePassingTest
                parameters:
                    predicate:
                        type: '@Block("(@MachineSizedUInt,)") Block2<Long, BooleanPtr, Boolean>'
            '-indexesPassingTest:':
                name: getIndexesPassingTest
                parameters:
                    predicate:
                        type: '@Block("(@MachineSizedUInt,)") Block2<Long, BooleanPtr, Boolean>'
            '-indexesWithOptions:passingTest:':
                name: getIndexesPassingTest
                parameters:
                    predicate:
                        type: '@Block("(@MachineSizedUInt,)") Block2<Long, BooleanPtr, Boolean>'
            '-indexesInRange:options:passingTest:':
                name: getIndexesInRangePassingTest
                parameters:
                    predicate:
                        type: '@Block("(@MachineSizedUInt,)") Block2<Long, BooleanPtr, Boolean>'
            '-enumerateRangesUsingBlock:':
                name: enumerateRanges
            '-enumerateRangesWithOptions:usingBlock:':
                name: enumerateRanges
            '-enumerateRangesInRange:options:usingBlock:':
                name: enumerateRangesInRange
            '+indexSet.*':
                exclude: true
    NSInputStream: # DONE
        methods:
            '-init.*':
                name: init
            '-read:maxLength:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    buffer:
                        type: '@Pointer long'
            '-getBuffer:length:':
                exclude: true
            '+inputStreamWith.*':
                exclude: true
    NSInvocation: # DONE
        properties:
            'argumentsRetained':
                omit_prefix: true
        methods:
            '-getReturnValue:':
                trim_after_first_colon: true
            '-setReturnValue:': {}
            '-getArgument:atIndex:':
                trim_after_first_colon: true
            '-setArgument:atIndex:':
                trim_after_first_colon: true
            '-invokeWithTarget:':
                name: invoke
            '+invocationWithMethodSignature:':
                name: create
                constructor: true
    NSInvocationOperation: # DONE
        methods:
            '-init.*':
                name: init
    NSISO8601DateFormatter: # DONE
        methods:
            '-stringFromDate:':
                name: format
            '-dateFromString:':
                name: parse
            '+stringFromDate:timeZone:formatOptions:':
                name: format
    NSItemProvider: # DONE
        properties:
            'registeredTypeIdentifiers':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'previewImageHandler':
                type: '@Block("(@Block,,)") VoidBlock3<VoidBlock2<NSObject, NSError>, ObjCClass, NSDictionary<?, ?>>' # todo dictionary marshaling
        methods:
            '-initWithItem:typeIdentifier:':
                name: init
                parameters:
                    item:
                        type: NSObject
            '-init.*':
                name: init
            '-registerItemForTypeIdentifier:loadHandler:':
                trim_after_first_colon: true
                parameters:
                    loadHandler:
                        type: '@Block("(@Block,,)") VoidBlock3<VoidBlock2<NSObject, NSError>, ObjCClass, NSDictionary<?, ?>>' # todo dictionary marshaling
            '-registerDataRepresentationForTypeIdentifier:visibility:loadHandler:':
                trim_after_first_colon: true
            '-registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:':
                trim_after_first_colon: true
            '-registeredTypeIdentifiersWithFileOptions:':
                name: getRegisteredTypeIdentifiers
            '-hasItemConformingToTypeIdentifier:':
                trim_after_first_colon: true
            '-hasRepresentationConformingToTypeIdentifier:fileOptions:':
                trim_after_first_colon: true
            '-loadItemForTypeIdentifier:options:completionHandler:':
                trim_after_first_colon: true
                parameters:
                    options:
                        type: NSItemProviderOptions
                    completionHandler:
                        type: '@Block VoidBlock2<NSObject, NSError>'
            '-loadPreviewImageWithOptions:completionHandler:':
                name: loadPreviewImage
                parameters:
                    options:
                        type: NSItemProviderOptions
                    completionHandler:
                        type: '@Block VoidBlock2<NSObject, NSError>'
            '-loadDataRepresentationForTypeIdentifier:completionHandler:':
                trim_after_first_colon: true
            '-loadFileRepresentationForTypeIdentifier:completionHandler:':
                trim_after_first_colon: true
            '-loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:':
                trim_after_first_colon: true
            '-registerObject:visibility:':
                trim_after_first_colon: true
            '-registerObjectOfClass:visibility:loadHandler:':
                trim_after_first_colon: true
            '-loadObjectOfClass:completionHandler:':
                trim_after_first_colon: true
    NSJSONSerialization: # DONE
        methods:
            '+isValidJSONObject:':
                trim_after_first_colon: true
            '+dataWithJSONObject:options:error:':
                name: createJSONData
                throws: NSErrorException
            '+JSONObjectWithData:options:error:':
                name: createJSONObject
                throws: NSErrorException
            '+writeJSONObject:toStream:options:error:':
                name: writeJSONObject
                throws: NSErrorException
            '+JSONObjectWithStream:options:error:':
                name: readJSONObject
                throws: NSErrorException
    NSKeyedArchiver: # DONE
        methods:
            '-init.*':
                name: init
            '-encode.*': {exclude: true}
            '+archivedDataWithRootObject:':
                name: archive
            '+archiveRootObject:toFile:':
                trim_after_first_colon: true
                visibility: private
            '+archivedDataWithRootObject:requiringSecureCoding:error:':
                trim_after_first_colon: true
            '+classNameForClass:':
                name: getDefaultClassNameForClass
                parameters:
                    cls:
                        type: 'Class<? extends NSObject>'
            '+setClassName:forClass:':
                name: setDefaultClassNameForClass
                parameters:
                    cls:
                        type: 'Class<? extends NSObject>'
            '-classNameForClass:':
                name: getClassNameForClass
                parameters:
                    cls:
                        type: 'Class<? extends NSObject>'
            '-setClassName:forClass:':
                name: setClassNameForClass
                parameters:
                    cls:
                        type: 'Class<? extends NSObject>'
    NSKeyedUnarchiver: # DONE
        methods:
            '-init.*':
                name: init
            '-decode.*': {exclude: true}
            '-containsValueForKey:': {exclude: true}
            '+unarchiveObjectWithData:':
                name: unarchive
            '+unarchiveObjectWithFile:':
                name: unarchiveObject
                visibility: private
            '+unarchivedObjectOfClass:fromData:error:':
                name: unarchivedObject
                visibility: private
            '+unarchivedObjectOfClasses:fromData:error:':
                name: unarchivedObject
                visibility: private
            '+unarchiveTopLevelObjectWithData:error:':
                throws: NSErrorException
                name: unarchiveTopLevelObject
            '+classForClassName:':
                name: getDefaultClassForClassName
                return_type: 'Class<? extends NSObject>'
            '+setClass:forClassName:':
                name: setDefaultClassForClassName
                parameters:
                    cls:
                        type: 'Class<? extends NSObject>'
            '-classForClassName:':
                name: getClassForClassName
                return_type: 'Class<? extends NSObject>'
            '-setClass:forClassName:':
                name: setClassForClassName
                parameters:
                    cls:
                        type: 'Class<? extends NSObject>'
            '+unarchivedArrayOfObjectsOfClass:fromData:error:':
                name: unarchivedArray
            '+unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:':
                name: unarchivedDictionary
            '+unarchivedArrayOfObjectsOfClasses:fromData:error:':
                name: unarchivedArray
            '+unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:':
                name: unarchivedDictionary
    NSLengthFormatter: # DONE
        methods:
            '-stringFromValue:unit:':
                name: format
            '-stringFromMeters:':
                name: formatMeters
            '-unitStringFromValue:unit:':
                name: formatUnit
            '-unitStringFromMeters:usedUnit:':
                name: formatUnitMeters
                visibility: protected
            '-getObjectValue:forString:errorDescription:':
                exclude: true
    NSLinguisticTagger: # DONE
        properties:
            'tagSchemes':
                type: List<NSLinguisticTagScheme>
                marshaler: NSArray.AsListMarshaler
        methods:
            '-initWithTagSchemes:options:':
                name: init
                parameters:
                    tagSchemes:
                        type: List<NSLinguisticTagScheme>
                        marshaler: NSArray.AsListMarshaler
                    opts:
                        type: NSLinguisticTaggerOptions
            '-setOrthography:range:':
                trim_after_first_colon: true
            '-orthographyAtIndex:effectiveRange:':
                name: getOrthography
            '-stringEditedInRange:changeInLength:':
                trim_after_first_colon: true
            '-enumerateTagsInRange:scheme:options:usingBlock:':
                trim_after_first_colon: true
                parameters:
                    block:
                        type: '@Block("(,@ByVal,@ByVal,)") VoidBlock4<NSLinguisticTag, NSRange, NSRange, BooleanPtr>'
                    tagScheme:
                        type: NSLinguisticTagScheme
            '-sentenceRangeForRange:':
                name: getSentenceRange
            '-tagAtIndex:scheme:tokenRange:sentenceRange:':
                name: getTag
                returnt_type: NSLinguisticTag
                parameters:
                    tagScheme:
                        type: NSLinguisticTagScheme
            '-tagsInRange:scheme:options:tokenRanges:':
                name: getTags
                visibility: protected
                return_type: List<NSLinguisticTag>
                return_marshaler: NSArray.AsListMarshaler
                parameters:
                    tagScheme:
                        type: NSLinguisticTagScheme
            '-possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:':
                name: getPossibleTags
                visibility: protected
                return_type: List<NSLinguisticTag>
                return_marshaler: NSArray.AsListMarshaler
                parameters:
                    tagScheme:
                        type: NSLinguisticTagScheme
            '+availableTagSchemesForLanguage:':
                name: getAvailableTagSchemes
                return_type: List<NSLinguisticTagScheme>
                return_marshaler: NSArray.AsListMarshaler
            '-tokenRangeAtIndex:unit:':
                trim_after_first_colon: true
            '-enumerateTagsInRange:unit:scheme:options:usingBlock:':
                name: enumerateTagsInRange
            '-tagAtIndex:unit:scheme:tokenRange:':
                trim_after_first_colon: true
            '-tagsInRange:unit:scheme:options:tokenRanges:':
                trim_after_first_colon: true
            '+availableTagSchemesForUnit:language:':
                trim_after_first_colon: true
            '+tagForString:atIndex:unit:scheme:orthography:tokenRange:':
                trim_after_first_colon: true
            '+tagsForString:range:unit:scheme:options:orthography:tokenRanges:':
                trim_after_first_colon: true
            '+enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:':
                trim_after_first_colon: true
    NSLocale: # DONE
        skip_def_constructor: true
        properties:
            '(localeIdentifier|languageCode|countryCode|scriptCode|variantCode|exemplarCharacterSet|collationIdentifier|usesMetricSystem|decimalSeparator|groupingSeparator|currencySymbol|currencyCode|collatorIdentifier|quotationBeginDelimiter|quotationEndDelimiter|alternateQuotationBeginDelimiter|alternateQuotationEndDelimiter)':
                name: '#{g[0]}0'
                visibility: private
            '(ISO.*|availableLocaleIdentifiers|commonISOCurrencyCodes|preferredLanguages)':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '+canonical(.*Identifier)FromString:':
                property: true
                name: 'getCanonical#{g[0]}'
            '+characterDirectionForLanguage:':
                name: getCharacterDirection
            '+lineDirectionForLanguage:':
                name: getLineDirection
            '+componentsFromLocaleIdentifier:':
                name: getComponentsFromLocaleIdentifier
                return_type: NSLocaleComponents
            '+localeIdentifierFromComponents:':
                name: getLocaleIdentifierFromComponents
                parameters:
                    dict:
                        type: NSLocaleComponents
            '+localeIdentifierFromWindowsLocaleCode:':
                name: getLocaleIdentifierFromWindowsLocaleCode
            '+windowsLocaleCodeFromLocaleIdentifier:':
                name: getWindowsLocaleCodeFromLocaleIdentifier
            '-displayNameForKey:value:':
                name: getComponentDisplayName
                parameters:
                    key:
                        type: NSLocaleComponent
            '-objectForKey:':
                name: getComponent
                parameters:
                    key:
                        type: NSLocaleComponent
            '-initWithLocaleIdentifier:':
                name: init
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSLock: # DONE
        methods:
            '-lockBeforeDate:':
                name: lockBefore
    NSMachPort: # DONE
        methods:
            '-delegate':
                name: getMachDelegate
            '-setDelegate:':
                trim_after_first_colon: true
            '-scheduleInRunLoop:forMode:':
                trim_after_first_colon: true
            '-removeFromRunLoop:forMode:':
                trim_after_first_colon: true
            '-initWithMachPort:options:':
                name: init
                parameters:
                    f:
                        type: NSMachPortRights
            '-init.*':
                name: init
            '+portWith.*':
                exclude: true
    NSMapTable: # DONE
        template_parameters:
            ObjectType: V
        properties:
            '(keyPointerFunctions|valuePointerFunctions)':
                exclude: true
            'count':
                visibility: protected
        methods:
            '-initWithKeyOptions:valueOptions:capacity:':
                name: init
                parameters:
                    keyOptions:
                        type: NSMapTableOptions
                    valueOptions:
                        type: NSMapTableOptions
            '-initWithKeyPointerFunctions:valuePointerFunctions:capacity:':
                exclude: true
            '-objectForKey:':
                name: getObject
                visibility: protected
            '-removeObjectForKey:':
                name: removeObject
                visibility: protected
            '-setObject:forKey:':
                trim_after_first_colon: true
                visibility: protected
            '-keyEnumerator':
                property: true
                visibility: protected
                return_type: NSEnumerator<K>
            '-objectEnumerator':
                property: true
                visibility: protected
                return_type: NSEnumerator<V>
            '-removeAllObjects':
                visibility: protected
            '-dictionaryRepresentation':
                name: asDictionary
                return_type: 'NSDictionary<K, V>'
            '+mapTableWithKeyOptions:valueOptions:':
                exclude: true
            '+.*':
                exclude: true
    NSMassFormatter: # DONE
        methods:
            '-stringFromValue:unit:':
                name: format
            '-stringFromKilograms:':
                name: formatKilograms
            '-unitStringFromValue:unit:':
                name: formatUnit
            '-unitStringFromKilograms:usedUnit:':
                name: formatUnitKilograms
                visibility: protected
            '-getObjectValue:forString:errorDescription:':
                exclude: true
    NSMeasurement: # DONE
        template_parameters:
            UnitType: T
        methods:
            '-initWithDoubleValue:unit:':
                name: init
            '-canBeConvertedToUnit:':
                trim_after_first_colon: true
            '-measurementByConvertingToUnit:':
                name: convertToUnit
            '-measurementByAddingMeasurement:':
                name: add
            '-measurementBySubtractingMeasurement:':
                name: substract
    NSMeasurementFormatter: # DONE
        methods:
            '-stringFromMeasurement:':
                name: format
            '-stringFromUnit:':
                name: format
    NSMessagePort: {} # DONE
    NSMetadataItem: # DONE
        properties:
            'attributes':
                type: List<NSMetadataItemAttribute>
                marshaler: NSMetadataItemAttribute.AsListMarshaler
        methods:
            '-valueForAttribute:':
                name: getValue
                parameters:
                    key:
                        type: NSMetadataItemAttribute
            '-valuesForAttributes:':
                name: getValues
                return_type: NSMetadataItemAttributes
                parameters:
                    keys:
                        type: List<NSMetadataItemAttribute>
                        marshaler: NSMetadataItemAttribute.AsListMarshaler
    NSMetadataQuery: # DONE
        properties:
            'sortDescriptors':
                type: NSArray<NSSortDescriptor>
            '(valueListAttributes|groupingAttributes)':
                type: List<NSMetadataItemAttribute>
                marshaler: NSMetadataItemAttribute.AsListMarshaler
            'searchScopes':
                name: searchScopes0
                visibility: protected
            'searchItems':
                name: searchItems0
                visibility: protected
            'results':
                type: NSArray<NSMetadataItem>
            'valueLists':
                name: valueLists0
                type: 'NSDictionary<NSString, NSMetadataQueryAttributeValueTuple>'
                visibility: protected
            'groupedResults':
                type: NSArray<NSMetadataQueryResultGroup>
        methods:
            '-resultAtIndex:':
                name: getResult
                return_type: NSMetadataItem
            '-enumerateResults.*':
                name: enumerateResults
                parameters:
                    block:
                        type: '@Block("(,@MachineSizedUInt,)") VoidBlock3<NSMetadataItem, Long, BooleanPtr>'
            '-indexOfResult:':
                trim_after_first_colon: true
                parameters:
                    result:
                        type: NSMetadataItem
            '-valueOfAttribute:forResultAtIndex:':
                name: getValueForResult
                parameters:
                    attrName:
                        type: NSMetadataItemAttribute
    NSMetadataQueryAttributeValueTuple: # DONE
        properties:
            'attribute':
                type: NSMetadataItemAttribute
    NSMetadataQueryResultGroup: # DONE
        properties:
            'attribute':
                type: NSMetadataItemAttribute
            'subgroups':
                type: NSArray<NSMetadataQueryResultGroup>
            'results':
                type: NSArray<NSMetadataItem>
        methods:
            '-resultAtIndex:':
                name: getResult
                return_type: NSMetadataItem
    NSMethodSignature: # DONE
        properties:
            'methodReturnType':
                type: String
                marshaler: StringMarshalers.AsDefaultCharsetZMarshaler
        methods:
            '-getArgumentTypeAtIndex:':
                name: getArgumentType
                return_type: String
                return_marshaler: StringMarshalers.AsDefaultCharsetZMarshaler
            '+signatureWithObjCTypes:':
                name: create
                constructor: true
                parameters:
                    types:
                        type: String
                        marshaler: StringMarshalers.AsDefaultCharsetZMarshaler
    NSMutableArray: # DONE
        methods:
            '-init': {}
            '-initWithCapacity:':
                name: init
            '-removeObjectAtIndex:':
                name: removeObject
                visibility: protected
            '-removeAllObjects':
                visibility: protected
            '-replaceObjectAtIndex:withObject:':
                name: replaceObject
                visibility: protected
            '-insertObject:atIndex:':
                name: insertObject
                visibility: protected
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSMutableAttributedString: # DONE
        annotations: ['@WeaklyLinked']
        methods:
            '-replaceCharactersInRange:withString:':
                name: replace
            '-setAttributes:range:':
                trim_after_first_colon: true
                parameters:
                    attrs:
                        type: 'NSDictionary<NSString, ?>'
            '-addAttribute:value:range:':
                trim_after_first_colon: true
                parameters:
                    name:
                        type: NSString
            '-addAttributes:range:':
                trim_after_first_colon: true
                parameters:
                    attrs:
                        type: 'NSDictionary<NSString, ?>'
            '-removeAttribute:range:':
                trim_after_first_colon: true
                parameters:
                    name:
                        type: NSString
            '-replaceCharactersInRange:withAttributedString:':
                name: replace
            '-insertAttributedString:atIndex:':
                name: insert
            '-appendAttributedString:':
                name: append
            '-deleteCharactersInRange:':
                name: delete
            '-setAttributedString:':
                trim_after_first_colon: true
    NSMutableCharacterSet: # DONE
        methods:
            '-addCharacters.*':
                name: addCharacters
            '-removeCharacters.*':
                name: removeCharacters
            '-formUnionWithCharacterSet:':
                name: formUnion
            '-formIntersectionWithCharacterSet:':
                name: formIntersection
            '+.*CharacterSet':
                property: true
                return_type: NSMutableCharacterSet
            '+characterSetWithContentsOfFile:':
                name: createWithFile
                visibility: private
                return_type: '@Pointer long'
            '+characterSetWith.*':
                name: create
                constructor: true
    NSMutableData: # DONE
        properties:
            'mutableBytes':
                visibility: protected
                type: '@Pointer long'
            'length':
                exclude: true
        methods:
            '-initWithCapacity:':
                name: init
            '-increaseLengthBy:':
                name: increaseLength
            '-appendBytes:length:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-appendData:':
                name: append
            '-replaceBytesInRange:withBytes:':
                name: replaceBytes
                visibility: protected
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-replaceBytesInRange:withBytes:length:':
                name: replaceBytes
                visibility: protected
                parameters:
                    replacementBytes:
                        type: '@Pointer long'
            '-resetBytesInRange:':
                name: reset
            '-setData:':
                name: setData
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSMutableDictionary: # DONE
        skip_def_constructor: true
        template_parameters:
            ObjectType: V
        methods:
            '-setObject:forKey:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    aKey:
                        type: NSObject
            '-removeAllObjects':
                visibility: protected
            '-removeObjectForKey:':
                name: removeObject
                visibility: protected
            '-initWithCapacity:':
                name: init
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSMutableIndexSet: # DONE
        methods:
            '-addIndexes:':
                trim_after_first_colon: true
            '-removeIndexes:':
                trim_after_first_colon: true
            '-addIndex:':
                trim_after_first_colon: true
            '-removeIndex:':
                trim_after_first_colon: true
            '-addIndexesInRange:':
                name: addIndexes
            '-removeIndexesInRange:':
                name: removeIndexes
            '-shiftIndexesStartingAtIndex:by:':
                name: shiftIndexes
    NSMutableOrderedSet: # DONE
        methods:
            '-init': {}
            '-initWithCapacity:':
                name: init
            '-removeObjectAtIndex:':
                name: removeObject
                visibility: protected
            '-removeAllObjects':
                visibility: protected
            '-replaceObjectAtIndex:withObject:':
                name: replaceObject
                visibility: protected
            '-insertObject:atIndex:':
                trim_after_first_colon: true
                visibility: protected
            '-removeObject:':
                trim_after_first_colon: true
                visibility: protected
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSMutableSet: # DONE
        methods:
            '-addObject:':
                trim_after_first_colon: true
                visibility: protected
            '-removeObject:':
                trim_after_first_colon: true
                visibility: protected
            '-removeAllObjects':
                trim_after_first_colon: true
                visibility: protected
            '-init': {}
            '-initWithCapacity:':
                name: init
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSMutableString: # DONE
        methods:
            '-initWithCapacity:':
                name: init
            '-replaceCharactersInRange:withString:':
                name: replaceCharacters
            '-insertString:atIndex:':
                name: insert
            '-deleteCharactersInRange:':
                name: deleteCharacters
            '-appendString:':
                name: append
            '-replaceOccurrencesOfString:withString:options:range:':
                name: replaceAll
            '-applyTransform:reverse:range:updatedRange:':
                trim_after_first_colon: true
            '+stringWithCapacity:':
                exclude: true
    NSMutableURLRequest: # DONE
        properties:
            'HTTPShouldHandleCookies':
                name: shouldHandleHTTPCookies
            'HTTPShouldUsePipelining':
                name: shouldUseHTTPPipelining
            'allHTTPHeaderFields':
                type: 'Map<String, String>'
                marshaler: NSDictionary.AsStringStringMapMarshaler
        methods:
            '-setValue:forHTTPHeaderField:':
                name: setHTTPHeaderField0 # We change the order of arguments as in Java it's natural to specify the key as the first and the value as the second parameter.
                visibility: protected
            '-addValue:forHTTPHeaderField:':
                name: addHTTPHeaderField0
                visibility: protected
    NSNetService: # DONE
        properties:
            'addresses':
                type: NSArray<NSData>
        methods:
            '-init.*':
                name: init
            '-scheduleInRunLoop:forMode:':
                trim_after_first_colon: true
            '-removeFromRunLoop:forMode:':
                trim_after_first_colon: true
            '-publishWithOptions:':
                name: publish
            '-resolveWithTimeout:':
                name: resolve
            '-getInputStream:outputStream:':
                name: getStreams
                visibility: protected
            '-setTXTRecordData:':
                trim_after_first_colon: true
            '-TXTRecordData':
                property: true
            '+dictionaryFromTXTRecordData:':
                name: getDictionaryFromTXTRecordData
                return_type: 'NSDictionary<NSString, NSData>'
            '+dataFromTXTRecordDictionary:':
                name: getDataFromTXTRecordDictionary
                parameters:
                    txtDictionary:
                        type: 'NSDictionary<NSString, NSData>'
    NSNetServiceBrowser: # DONE
        methods:
            '-scheduleInRunLoop:forMode:':
                trim_after_first_colon: true
            '-removeFromRunLoop:forMode:':
                trim_after_first_colon: true
            '-searchForServicesOfType:inDomain:':
                name: searchForServices
    NSNotification: # DONE
        skip_def_constructor: true
        properties:
            'name':
                type: String
        methods:
            '+notificationWithName:object:.*': {exclude: true}
            '-init': {exclude: true}
            '-initWithName:object:userInfo:':
                name: init
                parameters:
                    name:
                        type: NSString
                    object:
                        type: NSObject
            '-init.*':
                name: init
    NSNotificationCenter: # DONE
        methods:
            '+defaultCenter':
                property: true
            '-addObserver:selector:name:object:':
                trim_after_first_colon: true
                parameters:
                    aName:
                        name: name
                        type: NSString
            '-addObserverForName:object:queue:usingBlock:':
                name: addObserver
                parameters:
                    name:
                        type: NSString
            '-removeObserver:':
                trim_after_first_colon: true
            '-removeObserver:name:object:':
                trim_after_first_colon: true
                parameters:
                    aName:
                        name: name
                        type: NSString
            '-postNotification:':
                trim_after_first_colon: true
            '-postNotificationName:object:':
                name: postNotification
                parameters:
                    aName:
                        name: name
                        type: NSString
            '-postNotificationName:object:userInfo:':
                name: postNotification
                parameters:
                    aName:
                        name: name
                        type: NSString
                    aUserInfo:
                        name: userInfo
    NSNotificationQueue: # DONE
        skip_def_constructor: true
        methods:
            '-init.':
                name: init
            '-init.*':
                name: init
            '+defaultQueue':
                property: true
                return_type: NSNotificationQueue
            '-dequeueNotificationsMatching:coalesceMask:':
                trim_after_first_colon: true
                parameters:
                    coalesceMask:
                        type: NSNotificationCoalescing
            '-enqueueNotification:postingStyle:':
                trim_after_first_colon: true
            '-enqueueNotification:postingStyle:coalesceMask:forModes:':
                trim_after_first_colon: true
                parameters:
                    coalesceMask:
                        type: NSNotificationCoalescing
                    modes:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
    NSNull: # DONE
        skip_def_constructor: true
        methods:
            '+null':
                name: getNull
    NSNumber: # DONE
        skip_def_constructor: true
        protocols: [NSPropertyList]
        properties:
            'boolValue':
                name: booleanValue
                omit_prefix: true
            'charValue':
                name: byteValue
                omit_prefix: true
            '(short|int|float|double|string|decimal)Value':
                omit_prefix: true
            'unsignedShortValue':
                name: charValue
                type: char
                omit_prefix: true
            'longLongValue':
                name: longValue
                omit_prefix: true
            'longValue':
                exclude: true
            'integerValue':
                exclude: true
            'unsigned.*Value':
                exclude: true
        methods:
            '+numberWithBool:':
                name: valueOf
            '+numberWithChar:':
                name: valueOf
            '+numberWithDouble:':
                name: valueOf
            '+numberWithFloat:':
                name: valueOf
            '+numberWithInt:':
                name: valueOf
            '+numberWithShort:':
                name: valueOf
            '+numberWithUnsignedShort:':
                name: valueOf
                parameters:
                    value:
                        type: char
            '+numberWithLongLong:':
                name: valueOf
            '+numberWith.*':
                exclude: true
            '-compare:':
                trim_after_first_colon: true
            '-isEqualToNumber:':
                name: equalsTo
            '-descriptionWithLocale:':
                name: toString
                parameters:
                    locale:
                        type: NSLocale
            '-init.*':
                exclude: true
    NSNumberFormatter: # DONE
        properties:
            'textAttributesForNil':
                name: textAttributesDictionaryForNull
                type: 'NSDictionary<?, ?>'
            'textAttributesForNotANumber':
                name: textAttributesDictionaryForNaN
                type: 'NSDictionary<?, ?>'
            'textAttributesFor(.*)':
                name: 'textAttributesDictionaryFor#{g[0]}'
                type: 'NSDictionary<?, ?>'
            'nilSymbol':
                name: nullSymbol
            'notANumberSymbol':
                name: NaNSymbol
        methods:
            '-getObjectValue:forString:range:error:':
                exclude: true
            '-stringFromNumber:':
                name: format
            '-numberFromString:':
                name: parse
            '+localizedStringFromNumber:numberStyle:':
                name: formatLocalized
            '+defaultFormatterBehavior':
                property: true
    NSObject: # DONE
        skip_def_constructor: true
        skip_skip_init_constructor: true
        properties:
            'classForCoder':
                type: 'Class<? extends NSObject>'
            'classForKeyedArchiver':
                type: 'Class<? extends NSObject>'
            'accessInstanceVariablesDirectly':
                exclude: true
        methods_private:
            '-init':
                visibility: private
                constructor: false
        methods:
            '-init': {}
            '-copy': {}
            '-mutableCopy': {}
            '-performSelectorInBackground:withObject:':
                name: performSelectorInBackground
                visibility: 'public final'
            '-cancelPreviousPerformRequests.*':
                name: cancelPreviousPerformRequests
            '-addObserver:forKeyPath:options:context:':
                trim_after_first_colon: true
                visibility: private
            '-removeObserver:forKeyPath:context:':
                trim_after_first_colon: true
                visibility: private
            '-didChange:values.*':
                name: didChangeValues
                visibility: private # argument order changed
            '-didChangeValue.*':
                name: didChangeValue
            '-willChange:values.*':
                name: willChangeValues
                visibility: private # argument order changed
            '-willChangeValue.*':
                name: willChangeValue
            '-observeValueForKeyPath:ofObject:change:context:':
                # We have a non-native version of this
                exclude: true
            '-performSelector:withObject:afterDelay:inModes:':
                trim_after_first_colon: true
                visibility: 'public final'
            '-performSelector:withObject:afterDelay:':
                trim_after_first_colon: true
                visibility: 'public final'
            '-performSelectorOnMainThread:withObject:waitUntilDone:modes:':
                trim_after_first_colon: true
                visibility: 'public final'
            '-performSelectorOnMainThread:withObject:waitUntilDone:':
                trim_after_first_colon: true
                visibility: 'public final'
            '-performSelector:onThread:withObject:waitUntilDone:modes:':
                trim_after_first_colon: true
                visibility: 'public final'
            '-performSelector:onThread:withObject:waitUntilDone:':
                trim_after_first_colon: true
                visibility: 'public final'
            '\+.*': { exclude: true }
            '-.*': { exclude: true }
    NSOperation: # DONE
        skip_handle_constructor: false
        properties:
            'dependencies':
                type: NSArray<NSOperation>
            'cancelled':
                name: isCancelled
        methods:
            '-addDependency:':
                trim_after_first_colon: true
            '-removeDependency:':
                trim_after_first_colon: true
    NSOperationQueue: # DONE
        properties:
            'operations':
                type: NSArray<NSOperation>
            'underlyingQueue':
                annotations: ['@WeaklyLinked']
        methods:
            '+currentQueue':
                property: true
                return_type: NSOperationQueue
            '+mainQueue':
                property: true
                return_type: NSOperationQueue
            '-addOperation:':
                trim_after_first_colon: true
            '-addOperations:waitUntilFinished:':
                trim_after_first_colon: true
                parameters:
                    ops:
                        type: NSArray<NSOperation>
            '-addOperationWithBlock:':
                name: addOperation
    NSOrderedSet: # DONE
        protocols: [NSFastEnumeration, Set<T>, List<T>]
        properties:
            'count':
                visibility: protected
            'firstObject':
                name: first
                type: T
            'lastObject':
                name: last
                type: T
            'reversedOrderedSet':
                type: NSOrderedSet<T>
            'array':
                type: NSArray<T>
            'set':
                type: NSSet<T>
            'description':
                exclude: true
        methods:
            '-init': {}
            '-initWithArray:':
                name: init
                constructor: false
            '-initWithOrderedSet:':
                name: init
                constructor: false
            '-initWithObjects:count:':
                name: init
                constructor: false
                parameters:
                    objects:
                        type: '@Pointer long'
            '-objectEnumerator':
                visibility: protected
                return_type: NSEnumerator<T>
            '-containsObject:':
                trim_after_first_colon: true
                visibility: protected
            '-objectAtIndex:':
                name: getObjectAt
                visibility: protected
                return_type: T
            '-objectsAtIndexes:':
                name: getObjectsAt
                visibility: protected
                return_type: NSArray<T>
            '-indexOfObject:':
                trim_after_first_colon: true
                visibility: protected
            '-subarrayWithRange:':
                name: getSubarray
                visibility: protected
                return_type: NSOrderedSet<T>
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSOrthography: # DONE
        properties:
            'languageMap':
                type: 'Map<String, List<String>>'
                marshaler: NSOrthography.LanguageMapMarshaler
            'allScripts':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'allLanguages':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-languagesForScript:':
                name: getLanguagesForScript
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '-dominantLanguageForScript:':
                name: getDominantLanguageForScript
            '-initWithDominantScript:languageMap:':
                name: init
                parameters:
                    map:
                        type: 'Map<String, List<String>>'
                        marshaler: NSOrthography.LanguageMapMarshaler
            '-init.*':
                name: init
            '+orthographyWithDominantScript:languageMap:':
                exclude: true
    NSOutputStream: # DONE
        skip_def_constructor: true
        methods:
            '-initToBuffer:capacity:':
                name: init
                constructor: false
                parameters:
                    buffer:
                        type: '@Pointer long'
            '-write:maxLength:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    buffer:
                        type: '@Pointer long'
            '-init': {exclude: true}
            '-init.*':
                name: init
            '+outputStream.*': {exclude: true}
    NSPersonNameComponents: {} # DONE
    NSPersonNameComponentsFormatter: # DONE
        methods:
            '-stringFromPersonNameComponents:':
                name: format
            '-annotatedStringFromPersonNameComponents:':
                name: formatAnnotated
            '-getObjectValue:forString:errorDescription:':
                exclude: true
            '+localizedStringFromPersonNameComponents:style:options:':
                name: formatLocalized
            '-personNameComponentsFromString:':
                name: parse
    NSPipe: # DONE
        methods:
            '+pipe':
                exclude: true
    NSPointerArray: { exclude: true }
    NSPointerFunctions: { exclude: true }
    NSPort: # DONE
        methods:
            '-delegate':
                property: true
            '-scheduleInRunLoop:forMode:':
                trim_after_first_colon: true
            '-removeFromRunLoop:forMode:':
                trim_after_first_colon: true
            '-sendBeforeDate.*':
                name: send
            '+port':
                exclude: true
    NSPortMessage: # DONE
        extends: NSObject
    NSPredicate: # DONE
        methods:
            '+predicateWithBlock:':
                name: create
                constructor: true
                parameters:
                    block:
                        type: '@Block Block2<NSObject, NSDictionary<NSString, ?>, Boolean>'
            '+predicateWithFormat:argumentArray:':
                name: create
                constructor: true
            '+predicateWithValue:':
                name: create
                constructor: true
            '-evaluateWithObject:':
                name: evaluate
            '-evaluateWithObject:substitutionVariables:':
                name: evaluate
                parameters:
                    bindings:
                        name: variables
                        type: 'NSDictionary<NSString, ?>'
            '-predicateFormat':
                property: true
            '-predicateWithSubstitutionVariables:':
                name: newPredicate
                parameters:
                    variables:
                        type: 'NSDictionary<NSString, ?>'
    NSProcessInfo: # DONE
        skip_def_constructor: true
        properties:
            'environment':
                type: 'Map<String, NSObject>'
                marshaler: NSDictionary.AsStringMapMarshaler
            'arguments':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'processInfo':
                name: sharedProcessInfo
        methods:
            '-operatingSystem':
                property: true
                return_type: NSOperatingSystem
            '-operatingSystemName':
                property: true
            '-beginActivityWithOptions:reason:':
                name: beginActivity
            '-endActivity:':
                trim_after_first_colon: true
            '-performActivityWithOptions:reason:usingBlock:':
                name: performActivity
            '-isOperatingSystemAtLeastVersion:':
                trim_after_first_colon: true
            '-performExpiringActivityWithReason:usingBlock:':
                name: performExpiringActivity
    NSProgress: # DONE
        properties:
            'kind':
                type: NSProgressKind
            'userInfo':
                type: NSProgressUserInfo
        methods:
            '-initWithParent:userInfo:':
                name: init
                parameters:
                    userInfoOrNil:
                        type: NSProgressUserInfo
            '-addChild:withPendingUnitCount:':
                trim_after_first_colon: true
            '-becomeCurrentWithPendingUnitCount:':
                name: becomeCurrent
            '-setUserInfoObject:forKey:':
                name: setUserInfoObject
                visibility: protected
                parameters:
                    key:
                        type: NSString
            '+currentProgress':
                property: true
            '+progressWithTotalUnitCount:':
                name: create
                constructor: true
            '+discreteProgressWithTotalUnitCount:':
                name: createDiscrete
                visibility: protected
                return_type: '@Pointer long'
            '+progressWithTotalUnitCount:parent:pendingUnitCount:':
                name: create
                constructor: true
            '-performAsCurrentWithPendingUnitCount:usingBlock:':
                name: performAsCurrent
    NSPropertyListSerialization: # DONE
        methods:
            '+propertyList:isValidForFormat:':
                name: isPropertyListValidForFormat
                parameters:
                    plist:
                        type: NSPropertyList
            '+dataWithPropertyList:format:options:error:':
                name: getDataFromPropertyList
                throws: NSErrorException
                parameters:
                    plist:
                        type: NSPropertyList
            '+writePropertyList:toStream:format:options:error:':
                name: writePropertyListToStream
                throws: NSErrorException
                parameters:
                    plist:
                        type: NSPropertyList
            '+propertyListWithData:options:format:error:':
                name: getPropertyListFromData
                return_type: NSPropertyList
                throws: NSErrorException
                visibility: protected
            '+propertyListWithStream:options:format:error:':
                name: getPropertyListFromStream
                return_type: NSPropertyList
                throws: NSErrorException
                visibility: protected
            '+dataFromPropertyList:format:errorDescription:':
                name: getDataFromPropertyList
                visibility: protected
            '+propertyListFromData:mutabilityOption:format:errorDescription:':
                name: getPropertyListFromData
                return_type: NSPropertyList
                visibility: protected
    NSProxy: { exclude: true }
    NSRecursiveLock: # DONE
        methods:
            '-lock.*':
                name: lock
    NSRegularExpression: # DONE
        skip_def_constructor: true
        methods:
            '-initWithPattern:options:error:':
                name: init
                throws: NSErrorException
            '+regularExpressionWithPattern:options:error:': {exclude: true}
            '+escapedPatternForString:':
                name: getEscapedPattern
            '+escapedTemplateForString:':
                name: getEscapedTemplate
            '-enumerateMatchesInString:options:range:usingBlock:':
                name: enumerateMatches
            '-firstMatchInString:options:range:':
                name: getFirstMatch
            '-matchesInString:options:range:':
                name: getMatches
                return_type: NSArray<NSTextCheckingResult>
            '-numberOfMatchesInString:options:range:':
                name: getNumberOfMatches
            '-rangeOfFirstMatchInString:options:range:':
                name: getRangeOfFirstMatch
            '-replaceMatchesInString:options:range:withTemplate:':
                name: replaceMatches
            '-replacementStringForResult:inString:offset:template:':
                name: getReplacementString
            '-stringByReplacingMatchesInString:options:range:withTemplate:':
                name: newStringByReplacingMatches
    NSRunLoop: # DONE
        properties:
            'currentRunLoop':
                name: current
            'mainRunLoop':
                name: main
        methods:
            '-runMode:beforeDate:':
                name: runUntil
            '-runUntilDate:':
                name: runUntil
            '-performSelector:target:argument:order:modes:':
                name: perform
                parameters:
                    modes:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-cancelPerformSelectorsWithTarget:':
                name: cancel
            '-cancelPerformSelector:target:argument:':
                name: cancel
            '-addPort:forMode:':
                name: addPort0
                visibility: private
            '-removePort:forMode:':
                name: removePort0
                visibility: private
            '-getCFRunLoop':
                name: asCFRunLoop
                annotations: ['@WeaklyLinked']
            '-addTimer:forMode:':
                name: addTimer0
                visibility: private
            '-limitDateForMode:':
                name: getDateLimit
            '-acceptInputForMode:beforeDate:':
                name: acceptInputUntil
            '-performBlock:':
                name: perform
            '-performInModes:block:':
                name: perform
                parameters:
                    modes:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
    NSScanner: # DONE
        properties:
            'locale':
                type: NSLocale
        methods:
            '-init.*':
                name: init
            '+scannerWithString:':
                exclude: true
            '+localizedScannerWithString:':
                name: createLocalized
                return_type: NSScanner
            '-scanDecimal:':
                trim_after_first_colon: true
                visibility: private
                parameters:
                    dcm:
                        type: NSDecimal.NSDecimalPtr
            '-scan.*':
                trim_after_first_colon: true
                visibility: private
    NSSet: # DONE
        protocols: [NSFastEnumeration, Set<T>]
        properties:
            'count':
                visibility: protected
            'allObjects':
                name: values
                type: NSArray<T>
            'description':
                exclude: true
        methods:
            '-init': {}
            '-initWithArray:':
                name: init
                constructor: false
            '-initWithSet:':
                name: init
                constructor: false
            '-initWithObjects:count:':
                name: init
                constructor: false
                parameters:
                    objects:
                        type: '@Pointer long'
            '-member:':
                name: isMember
                visibility: protected
            '-objectEnumerator':
                visibility: protected
                return_type: NSEnumerator<T>
            '-anyObject':
                name: any
                return_type: T
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSSortDescriptor: # DONE
        properties:
            'comparator':
                type: '@Block Block2<NSObject, NSObject, NSComparisonResult>'
            'reversedSortDescriptor':
                type: NSSortDescriptor
        methods:
            '-initWithKey:ascending:':
                name: init
            '-initWithKey:ascending:selector:':
                name: init
            '-initWithKey:ascending:comparator:':
                name: init
                parameters:
                    cmptr:
                        type: '@Block Block2<NSObject, NSObject, NSComparisonResult>'
            '-compareObject:toObject:':
                name: compare
            '+.*':
                exclude: true
    NSStream: # DONE
        methods:
            '-propertyForKey:':
                name: getProperty
                parameters:
                    key:
                        type: NSStreamProperty
            '-setProperty:forKey:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    key:
                        type: NSStreamProperty
            '-removeFromRunLoop:forMode:':
                trim_after_first_colon: true
            '-scheduleInRunLoop:forMode:':
                trim_after_first_colon: true
            '+getStreamsToHostWithName:port:inputStream:outputStream:':
                name: getStreamsToHost
                visibility: protected
            '+getBoundStreamsWithBufferSize:inputStream:outputStream:':
                name: getBoundStreams
                visibility: protected
    NSString: # DONE
        protocols: [NSPropertyList]
        annotations: ['@WeaklyLinked']
        properties:
            'length':
                omit_prefix: true
                visibility: protected
            '.*':
                exclude: true
        methods:
            '+stringWithCharacters:length:':
                name: create
                visibility: protected
                return_type: '@Pointer long'
                parameters:
                    characters:
                        type: '@Pointer long'
            '-initWithCharacters:length:':
                name: init
                constructor: false
                visibility: protected
                parameters:
                    characters:
                        type: '@Pointer long'
            '-initWithData:encoding:':
                name: init
            '-initWithContentsOfURL:encoding:error:':
                name: init
                throws: NSErrorException
            '-initWithContentsOfFile:encoding:error:':
                name: init
                throws: NSErrorException
            '-init': {}
            '-init.*': { exclude: true }
            '-characterAtIndex:':
                name: getCharactersAt
                visibility: protected
            '-getCharacters:range:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    buffer:
                        type: '@Pointer long'
            '+stringWithContentsOfURL:encoding:error:':
                name: readURL
                throws: NSErrorException
                return_type: String
            '+stringWithContentsOfFile:encoding:error:':
                name: readFile
                throws: NSErrorException
                return_type: String
            '-(hasPrefix|hasSuffix):':
                trim_after_first_colon: true
            '-dataUsingEncoding:.*':
                name: toData
            '-writeToURL:atomically:encoding:error:':
                name: writeURL
                throws: NSErrorException
                parameters:
                    useAuxiliaryFile:
                        name: atomically
            '-writeToFile:atomically:encoding:error:':
                name: writeFile
                throws: NSErrorException
                parameters:
                    useAuxiliaryFile:
                        name: atomically
            '-stringByAppendingPathComponent:':
                name: appendPathComponent
            '-stringByAppendingPathExtension:':
                name: appendPathExtension
            '-stringByAddingPercentEncodingWithAllowedCharacters:':
                name: addPercentEncoding
            '-stringByAddingPercentEscapesUsingEncoding:':
                name: addPercentEscapes
            '-stringByReplacingPercentEscapesUsingEncoding:':
                name: replacePercentEscapes
            '-.*':
                exclude: true
            '+.*':
                exclude: true
    NSTextCheckingResult: # DONE
        properties:
            'grammarDetails':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'components':
                type: NSTextCheckingTransitComponents
            'alternativeStrings':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'addressComponents':
                type: NSTextCheckingAddressComponents
        methods:
            '-rangeAtIndex:':
                name: getRangeAt
            '-rangeWithName:':
                name: getRange
            '-resultByAdjustingRangesWithOffset:':
                name: newResultByAdjustingRanges
            '+orthographyCheckingResultWithRange:orthography:':
                name: getOrthographyCheckingResult
            '+spellCheckingResultWithRange:':
                name: getSpellCheckingResult
            '+grammarCheckingResultWithRange:details:':
                name: getGrammarCheckingResult
                parameters:
                    details:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '+dateCheckingResultWithRange:date:':
                name: getDateCheckingResult
            '+dateCheckingResultWithRange:date:timeZone:duration:':
                name: getDateCheckingResult
            '+addressCheckingResultWithRange:components:':
                name: getAddressCheckingResult
                parameters:
                    components:
                        type: NSTextCheckingAddressComponents
            '+linkCheckingResultWithRange:URL:':
                name: getLinkCheckingResult
            '+quoteCheckingResultWithRange:replacementString:':
                name: getQuoteCheckingResult
            '+dashCheckingResultWithRange:replacementString:':
                name: getDashCheckingResult
            '+replacementCheckingResultWithRange:replacementString:':
                name: getReplacementCheckingResult
            '+correctionCheckingResultWithRange:replacementString:':
                name: getCorrectionCheckingResult
            '+correctionCheckingResultWithRange:replacementString:alternativeStrings:':
                name: getCorrectionCheckingResult
                parameters:
                    alternativeStrings:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '+regularExpressionCheckingResultWithRanges:count:regularExpression:':
                name: getRegularExpressionCheckingResult
                visibility: protected
            '+phoneNumberCheckingResultWithRange:phoneNumber:':
                name: getPhoneNumberCheckingResult
            '+transitInformationCheckingResultWithRange:components:':
                name: getTransitInformationCheckingResult
                parameters:
                    components:
                        type: NSTextCheckingTransitComponents
    NSThread: # DONE
        properties:
            'threadPriority':
                exclude: true
            'cancelled':
                name: isCancelled
            'callStackReturnAddresses':
                type: NSArray<NSNumber>
            'callStackSymbols':
                type: NSArray<NSString>
            '+isMainThread':
                name: isCurrentThreadMainThread
        methods:
            '-init': {exclude: true}
            '-init.*':
                name: init
            '+sleepForTimeInterval:':
                name: sleep
            '+sleepUntilDate:':
                name: sleep
            '+detachNewThreadSelector:toTarget:withObject:':
                name: detachNewThread
            '+detachNewThreadWithBlock:':
                name: detachNewThread
            '+threadPriority':
                property: true
            '+setThreadPriority:':
                trim_after_first_colon: true
            '+currentThread':
                property: true
            '+mainThread':
                property: true
    NSTimer: # DONE
        methods:
            '-initWithFireDate:interval:target:selector:userInfo:repeats:':
                name: init
                parameters:
                    date:
                        name: fireDate
                    ti:
                        name: timeInterval
                    t:
                        name: target
                    s:
                        name: selector
                    ui:
                        name: userInfo
                    rep:
                        name: repeats
            '-initWithFireDate:interval:repeats:block:':
                name: init
            '+timerWithTimeInterval:invocation:repeats:':
                name: create
                visibility: private
                return_type: '@Pointer long'
                parameters:
                    ti:
                        name: timeInterval
                    yesOrNo:
                        name: repeats
            '+scheduledTimerWithTimeInterval:invocation:repeats:':
                name: createScheduled
                visibility: private
                return_type: '@Pointer long'
                parameters:
                    ti:
                        name: timeInterval
                    yesOrNo:
                        name: repeats
            '+timerWithTimeInterval:target:selector:userInfo:repeats:':
                name: create
                visibility: private
                return_type: '@Pointer long'
                parameters:
                    ti:
                        name: timeInterval
                    aTarget:
                        name: target
                    aSelector:
                        name: selector
                    yesOrNo:
                        name: repeats
            '+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:':
                name: createScheduled
                visibility: private
                return_type: '@Pointer long'
                parameters:
                    ti:
                        name: timeInterval
                    aTarget:
                        name: target
                    aSelector:
                        name: selector
                    yesOrNo:
                        name: repeats
            '+timerWithTimeInterval:repeats:block:':
                name: create
                visibility: private
                return_type: '@Pointer long'
            '+scheduledTimerWithTimeInterval:repeats:block:':
                name: createScheduled
                visibility: private
                return_type: '@Pointer long'
    NSTimeZone: # DONE
        properties:
            'description':
                exclude: true
            'knownTimeZoneNames':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'abbreviationDictionary':
                type: Map<String, String>
                marshaler: NSDictionary.AsStringStringMapMarshaler
        methods:
            '-init.*':
                name: init
            '-secondsFromGMTForDate:':
                name: getSecondsFromGMTForDate
            '-abbreviationForDate:':
                name: getAbbreviationForDate
            '-isDaylightSavingTimeForDate:':
                name: isDaylightSavingTimeForDate
            '-daylightSavingTimeOffsetForDate:':
                name: getDaylightSavingTimeOffsetForDate
            '-nextDaylightSavingTimeTransitionAfterDate:':
                name: getNextDaylightSavingTimeTransitionAfterDate
            '-isEqualToTimeZone:':
                name: equalsTo
            '-localizedName:locale:':
                name: getLocalizedName
            '+abbreviationDictionary':
                exclude: true
            '+(systemTimeZone|defaultTimeZone|localTimeZone|timeZoneDataVersion)':
                property: true
            '+timeZoneWithName:.*':
                name: fromName
                return_type: NSTimeZone
            '+timeZoneForSecondsFromGMT:':
                name: fromGMTSecondsOffset
                return_type: NSTimeZone
            '+timeZoneWithAbbreviation:':
                name: fromAbbreviation
                return_type: NSTimeZone
    NSUbiquitousKeyValueStore: # DONE
        properties:
            'dictionaryRepresentation':
                name: asDictionary
                omit_prefix: true
                type: 'NSDictionary<NSString, ?>'
        methods:
            '-objectForKey:':
                name: get
            '-setDictionary:forKey:':
                name: setDictionary
                visibility: protected
                parameters:
                    aDictionary:
                        type: 'NSDictionary<NSString, ?>'
            '-set(.*):forKey:':
                name: 'set#{g[0]}'
                visibility: protected
            '-removeObjectForKey:':
                name: remove
            '-stringForKey:':
                name: getString
            '-arrayForKey:':
                name: getArray
            '-dictionaryForKey:':
                name: getDictionary
                return_type: 'NSDictionary<NSString, ?>'
            '-dataForKey:':
                name: getData
            '-longLongForKey:':
                name: getLong
            '-doubleForKey:':
                name: getDouble
            '-boolForKey:':
                name: getBoolean
            '+defaultStore':
                property: true
    NSUndoManager: # DONE
        properties:
            'runLoopModes':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'undoActionIsDiscardable':
                name: undoActionDiscardable
            'redoActionIsDiscardable':
                name: redoActionDiscardable
        methods:
            '-removeAllActionsWithTarget:':
                name: removeAllActions
            '-registerUndoWithTarget:selector:object:':
                name: registerUndo
            '-registerUndoWithTarget:handler:':
                name: registerUndo
                parameters:
                    undoHandler:
                        type: '@Block VoidBlock1<NSObject>'
            '-prepareWithInvocationTarget:':
                name: prepareWithInvocation
            '-undoMenuTitleForUndoActionName:':
                name: getUndoMenuTitle
            '-redoMenuTitleForUndoActionName:':
                name: getRedoMenuTitle
    NSUnit: # DONE
        methods:
            '-init.*':
                name: init
    NSUnitAcceleration: {} # DONE
    NSUnitAngle: {} # DONE
    NSUnitArea: {} # DONE
    NSUnitConcentrationMass: # DONE
        methods:
            '+millimolesPerLiterWithGramsPerMole:':
                name: convertGramsPerMoleToMillimolesPerLiter
    NSUnitConverter: # DONE
        methods:
            '-baseUnitValueFromValue:':
                name: convertToBaseUnit
            '-valueFromBaseUnitValue:':
                name: convertFromBaseUnit
    NSUnitConverterLinear: # DONE
        methods:
            '-init.*':
                name: init
    NSUnitDispersion: {} # DONE
    NSUnitDuration: {} # DONE
    NSUnitElectricCharge: {} # DONE
    NSUnitElectricCurrent: {} # DONE
    NSUnitElectricPotentialDifference: {} # DONE
    NSUnitElectricResistance: {} # DONE
    NSUnitEnergy: {} # DONE
    NSUnitFrequency: {} # DONE
    NSUnitFuelEfficiency: {} # DONE
    NSUnitIlluminance: {} # DONE
    NSUnitLength: {} # DONE
    NSUnitMass: {} # DONE
    NSUnitPower: {} # DONE
    NSUnitPressure: {} # DONE
    NSUnitSpeed: {} # DONE
    NSUnitTemperature: {} # DONE
    NSUnitVolume: {} # DONE
    NSURL: # DONE
        properties:
            'fileSystemRepresentation':
                exclude: true
            'pathComponents':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '+bookmarkDataWithContentsOfURL:error:':
                name: createBookmarkData
                throws: NSErrorException
            '+resourceValuesForKeys:fromBookmarkData:':
                name: getResourceValuesFromBookmarkData
                return_type: NSURLProperties
                parameters:
                    keys:
                        type: List<NSURLProperty>
                        marshaler: NSURLProperty.AsListMarshaler
            '+writeBookmarkData:toURL:options:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    options:
                        type: NSURLBookmarkCreationOptions
            '-fileReferenceURL':
                property: true
            '-initAbsoluteURLWithDataRepresentation:relativeToURL:':
                constructor: false
                name: initAbsoluteURL
            '-initFileURLWithPath:.*':
                constructor: false
                name: initFileURL
            '-getResourceValue:forKey:error:':
                trim_after_first_colon: true
                visibility: private
                parameters:
                    value:
                        type: NSObject.NSObjectPtr
                    key:
                        type: NSString
            '-resourceValuesForKeys:error:':
                name: getResourceValues
                throws: NSErrorException
                return_type: NSURLProperties
                parameters:
                    keys:
                        type: List<NSURLProperty>
                        marshaler: NSURLProperty.AsListMarshaler
            '-setResourceValue:forKey:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    key:
                        type: NSString
            '-setResourceValues:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    keyedValues:
                        type: NSURLProperties
            '-removeCachedResourceValueForKey:':
                name: removeCachedResourceValue
                visibility: protected
                parameters:
                    key:
                        type: NSString
            '-setTemporaryResourceValue:forKey:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    key:
                        type: NSString
            '-getFileSystemRepresentation:maxLength:':
                trim_after_first_colon: true
            '-checkResourceIsReachableAndReturnError:':
                name: checkResourceIsReachable
                throws: NSErrorException
            '-initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:':
                name: init
                throws: NSErrorException
            '-bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:':
                name: toBookmarkData
                throws: NSErrorException
                parameters:
                    keys:
                        type: List<NSURLProperty>
                        marshaler: NSURLProperty.AsListMarshaler
            '+fileURL.*': {exclude: true}
            '+URL.*': {exclude: true}
            '+absoluteURLWithDataRepresentation:relativeToURL:':
                exclude: true
            '-(URLBy.*?)(:.*)?':
                name: 'new#{g[0]}'
            '-getPromisedItemResourceValue:forKey:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    key:
                        type: NSString
                    value:
                        type: NSObject.NSObjectPtr
            '-promisedItemResourceValuesForKeys:error:':
                name: getPromisedItemResourceValues
                return_type: NSURLProperties
                throws: NSErrorException
                parameters:
                    keys:
                        type: List<NSURLProperty>
                        marshaler: NSURLProperty.AsListMarshaler
            '-checkPromisedItemIsReachableAndReturnError:':
                name: isPromisedItemReachable
                throws: NSErrorException
            '-initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:':
                exclude: true
            '-init.*':
                name: init
    NSURLAuthenticationChallenge: # DONE
        methods:
            '-initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:':
                name: init
            '-initWithAuthenticationChallenge:sender:':
                name: init
    NSURLCache: # DONE
        methods:
            '-init.*':
                name: init
            '-cachedResponseForRequest:':
                name: getCachedResponse
            '-storeCachedResponse:forRequest:':
                trim_after_first_colon: true
            '-removeCachedResponseForRequest:':
                name: removeCachedResponse
            '+sharedURLCache':
                property: true
            '-removeCachedResponsesSinceDate:':
                trim_after_first_colon: true
            '-storeCachedResponse:forDataTask:':
                trim_after_first_colon: true
            '-getCachedResponseForDataTask:completionHandler:':
                name: getCachedResponse
            '-removeCachedResponseForDataTask:':
                name: removeCachedResponse
    NSURLConnection: # DONE
        methods:
            '-init.*':
                name: init
                parameters:
                    delegate:
                        type: NSURLConnectionDelegate
            '+connectionWithRequest:delegate:':
                exclude: true
            '+sendAsynchronousRequest:queue:completionHandler:':
                trim_after_first_colon: true
            '+sendSynchronousRequest:returningResponse:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '+canHandleRequest:':
                trim_after_first_colon: true
            '-scheduleInRunLoop:forMode:':
                trim_after_first_colon: true
            '-unscheduleFromRunLoop:forMode:':
                trim_after_first_colon: true
    NSURLCredential: # DONE
        properties:
            'certificates':
                type: List<SecCertificate>
                marshaler: NSArray.AsListMarshaler
            'identity':
                annotations: ['@WeaklyLinked']
        methods:
            '+credential.*':
                exclude: true
            '-initWithIdentity:certificates:persistence:':
                name: init
                annotations: ['@WeaklyLinked']
                parameters:
                    certArray:
                        type: List<SecCertificate>
                        marshaler: NSArray.AsListMarshaler
            '-init.*':
                name: init
                annotations: ['@WeaklyLinked']
    NSURLCredentialStorage: # DONE
        properties:
            'allCredentials':
                type: 'Map<String, NSURLCredential>'
                marshaler: NSDictionary.AsStringMapMarshaler
        methods:
            '-credentialsForProtectionSpace:':
                name: getCredentials
                return_type: 'Map<String, NSURLCredential>'
                return_marshaler: NSDictionary.AsStringMapMarshaler
            '-setCredential:forProtectionSpace:':
                trim_after_first_colon: true
            '-removeCredential:forProtectionSpace:':
                trim_after_first_colon: true
            '-removeCredential:forProtectionSpace:options:':
                trim_after_first_colon: true
                parameters:
                    options:
                        type: NSURLCredentialStorageRemovalOptions
            '-defaultCredentialForProtectionSpace:':
                name: getDefaultCredential
            '-setDefaultCredential:forProtectionSpace:':
                trim_after_first_colon: true
            '+sharedCredentialStorage':
                property: true
            '-getCredentialsForProtectionSpace:task:completionHandler:':
                name: getCredentials
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock1<NSDictionary<NSString, NSURLCredential>>'
            '-setCredential:forProtectionSpace:task:':
                trim_after_first_colon: true
            '-removeCredential:forProtectionSpace:options:task:':
                trim_after_first_colon: true
                parameters:
                    options:
                        type: NSURLCredentialStorageRemovalOptions
            '-getDefaultCredentialForProtectionSpace:task:completionHandler:':
                name: getDefaultCredential
            '-setDefaultCredential:forProtectionSpace:task:':
                trim_after_first_colon: true
    NSURLProtectionSpace: # DONE
        properties:
            'isProxy':
                name: proxy
            'authenticationMethod':
                type: NSURLAuthenticationMethod
            'distinguishedNames':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'protocol':
                type: NSURLProtectionSpaceProtocol
            'proxyType':
                type: NSURLProtectionSpaceProxyType
            'serverTrust':
                annotations: ['@WeaklyLinked']
        methods:
            '-initWithHost:port:protocol:realm:authenticationMethod:':
                name: init
                constructor: false
                parameters:
                    protocol:
                        type: NSURLProtectionSpaceProtocol
                    authenticationMethod:
                        type: NSURLAuthenticationMethod
            '-initWithProxyHost:port:type:realm:authenticationMethod:':
                name: init
                constructor: false
                parameters:
                    type:
                        type: NSURLProtectionSpaceProxyType
                    authenticationMethod:
                        type: NSURLAuthenticationMethod
    NSURLProtocol: # DONE
        methods:
            '-init.*':
                name: init
            '+canonicalRequestForRequest:':
                name: newCanonicalRequest
            '+requestIsCacheEquivalent:toRequest:':
                name: requestIsCacheEquivalent
            '+propertyForKey:inRequest:':
                name: getPropertyInRequest
            '+setProperty:forKey:inRequest:':
                name: setPropertyInRequest
                visibility: protected # We change the order of the arguments
            '+removePropertyForKey:inRequest:':
                name: removePropertyInRequest
            '+registerClass:':
                trim_after_first_colon: true
                parameters:
                    protocolClass:
                        type: 'Class<? extends NSURLProtocol>'
            '+unregisterClass:':
                trim_after_first_colon: true
                parameters:
                    protocolClass:
                        type: 'Class<? extends NSURLProtocol>'
            '+canInitWithTask:':
                name: canInitWithTask
            '+canInitWithRequest:':
                name: canInitWithRequest
    NSURLRequest: # DONE
        properties:
            'allHTTPHeaderFields':
                type: 'Map<String, String>'
                marshaler: NSDictionary.AsStringStringMapMarshaler
            'HTTPShouldHandleCookies':
                name: shouldHandleHTTPCookies
                omit_prefix: true
            'HTTPShouldUsePipelining':
                name: shouldUseHTTPPipelining
                omit_prefix: true
        methods:
            '-init.*':
                name: init
            '-valueForHTTPHeaderField:':
                name: getHTTPHeaderFieldValue
            '+requestWithURL.*':
                exclude: true
    NSURLResponse: # DONE
        methods:
            '-init.*':
                name: init
    NSURLSession: # DONE
        skip_handle_constructor: false
        methods:
            '-getTasksWithCompletionHandler:':
                name: getTasks
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock3<NSArray<NSURLSessionDataTask>, NSArray<NSURLSessionUploadTask>, NSArray<NSURLSessionDownloadTask>>'
            '-getAllTasksWithCompletionHandler:':
                name: getAllTasks
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock1<NSArray<NSURLSessionTask>>'
            '-resetWithCompletionHandler:':
                name: reset
            '-flushWithCompletionHandler:':
                name: flush
            '-dataTaskWithRequest:':
                name: newDataTask
            '-dataTaskWithURL:':
                name: newDataTask
            '-uploadTaskWithRequest:fromFile:':
                name: newUploadTask
            '-uploadTaskWithRequest:fromData:':
                name: newUploadTask
            '-uploadTaskWithStreamedRequest:':
                name: newStreamedUploadTask
            '-downloadTaskWithRequest:':
                name: newDownloadTask
            '-downloadTaskWithURL:':
                name: newDownloadTask
            '-downloadTaskWithResumeData:':
                name: newDownloadTask
            '-streamTask.*':
                name: newStreamTask
            '+sharedSession':
                property: true
            '+new':
                exclude: true
            '+sessionWithConfiguration:':
                name: create
                constructor: true
            '+sessionWithConfiguration:delegate:delegateQueue:':
                name: create
                constructor: true
            '-dataTaskWithRequest:completionHandler:':
                name: newDataTask
            '-dataTaskWithURL:completionHandler:':
                name: newDataTask
            '-uploadTaskWithRequest:fromFile:completionHandler:':
                name: newUploadTask
            '-uploadTaskWithRequest:fromData:completionHandler:':
                name: newUploadTask
            '-uploadTaskWithResumeData:':
                name: newUploadTask
            '-uploadTaskWithResumeData:completionHandler:':
                name: newUploadTask
            '-downloadTaskWithRequest:completionHandler:':
                name: newDownloadTask
            '-downloadTaskWithURL:completionHandler:':
                name: newDownloadTask
            '-downloadTaskWithResumeData:completionHandler:':
                name: newDownloadTask
            '-dataTaskWithHTTPGetRequest:':
                name: newHTTPGetDataTask
            '-dataTaskWithHTTPGetRequest:completionHandler:':
                name: newHTTPGetDataTask
            '-webSocketTaskWithURL:':
                name: newWebSocket
            '-webSocketTaskWithURL:protocols:':
                name: newWebSocket
            '-webSocketTaskWithRequest:':
                name: newWebSocket
    NSURLSessionConfiguration: # DONE
        properties:
            '(TLSMinimumSupportedProtocol|TLSMaximumSupportedProtocol)':
                annotations: ['@WeaklyLinked']
            'sessionSendsLaunchEvents':
                name: sendsLaunchEvents
            'HTTPShouldUsePipelining':
                name: shouldUseHTTPPipelining
            'HTTPShouldSetCookies':
                name: shouldSetHTTPCookies
            'HTTPMaximumConnectionsPerHost':
                name: maximumHTTPConnectionsPerHost
            'connectionProxyDictionary':
                name: connectionProxy
                type: CFProxy
            'HTTPAdditionalHeaders':
                name: getAdditionalHTTPHeaders
                type: 'Map<String, String>'
                marshaler: NSDictionary.AsStringStringMapMarshaler
            'protocolClasses':
                type: List<ObjCClass>
                marshaler: NSArray.AsListMarshaler
        methods:
            '+(defaultSessionConfiguration|ephemeralSessionConfiguration)':
                property: true
            '+backgroundSessionConfiguration:':
                name: getBackgroundSessionConfiguration7 # deprecated
            '+backgroundSessionConfigurationWithIdentifier:':
                name: getBackgroundSessionConfiguration
            '+new':
                exclude: true
    NSURLSessionDataTask:
        methods:
            '+new':
                exclude: true
    NSURLSessionDownloadTask: # DONE
        methods:
            '-cancelByProducingResumeData:':
                trim_after_first_colon: true
    NSURLSessionStreamTask: # DONE
        methods:
            '-readDataOfMinLength:maxLength:timeout:completionHandler:':
                name: readData
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock3<NSData, Boolean, NSError>'
            '-writeData:timeout:completionHandler:':
                name: writeData
    NSURLSessionTask:
        methods:
            '+new':
                scope: global
                exclude: true
    NSURLSessionTaskMetrics:
        methods:
            '+new':
                exclude: true
    NSURLSessionTaskTransactionMetrics:
        methods:
            '+new':
                exclude: true
    NSURLSessionUploadTask: {} # DONE
    NSUserActivity: # DONE
        properties:
            '(requiredUserInfoKeys|keywords)':
                type: Set<String>
                marshaler: NSSet.AsStringSetMarshaler
        methods:
            '-init.*':
                name: init
            '-addUserInfoEntriesFromDictionary:':
                name: addUserInfoEntries
            '-getContinuationStreamsWithCompletionHandler:':
                name: getContinuationStreams
            '+deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:':
                name: deleteSavedUserActivities
            '+deleteAllSavedUserActivitiesWithCompletionHandler:':
                name: deleteAllSavedUserActivities

    NSUserDefaults: # DONE
        properties:
            'volatileDomainNames':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-objectForKey:':
                name: get
            '-removeObjectForKey:':
                name: remove
            '-stringForKey:':
                name: getString
            '-arrayForKey:':
                name: getArray
            '-dictionaryForKey:':
                name: getDictionary
                return_type: 'NSDictionary<NSString, ?>'
            '-dataForKey:':
                name: getData
            '-stringArrayForKey:':
                name: getStringArray
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '-integerForKey:':
                name: getLong
            '-floatForKey:':
                name: getFloat
            '-doubleForKey:':
                name: getDouble
            '-boolForKey:':
                name: getBoolean
            '-URLForKey:':
                name: getURL
            '-set.*':
                trim_after_first_colon: true
                visibility: protected
            '-registerDefaults:':
                trim_after_first_colon: true
                parameters:
                    registrationDictionary:
                        type: 'NSDictionary<NSString, ?>'
            '-addSuiteNamed:':
                name: addSuite
            '-removeSuiteNamed:':
                name: removeSuite
            '-dictionaryRepresentation':
                name: asDictionary
                return_type: 'NSDictionary<NSString, ?>'
            '-volatileDomainForName:':
                name: getVolatileDomain
                return_type: 'NSDictionary<NSString, ?>'
            '-setVolatileDomain:forName:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    domain:
                        type: 'NSDictionary<NSString, ?>'
            '-removeVolatileDomainForName:':
                name: removeVolatileDomain
            '-persistentDomainNames':
                property: true
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler
            '-persistentDomainForName:':
                name: getPersistentDomain
                return_type: 'NSDictionary<NSString, ?>'
            '-setPersistentDomain:forName:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    domain:
                        type: 'NSDictionary<NSString, ?>'
            '-removePersistentDomainForName:':
                name: removePersistentDomain
            '-objectIsForcedForKey.*':
                name: isObjectForced
            '+standardUserDefaults':
                property: true
            '-init': {}
            '-init.*':
                exclude: true
    NSUUID: # DONE
        properties:
            'UUIDString':
                name: asString
                omit_prefix: true
        methods:
            '-init': {}
            '-initWithUUIDString:':
                name: init
                constructor: false
            '-initWithUUIDBytes:':
                name: init
                constructor: false
                parameters:
                    bytes:
                        type: '@Pointer long'
            '-getUUIDBytes:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    uuid:
                        type: '@Pointer long'
            '+.*': {exclude: true}
            '-.*': {exclude: true}
    NSValue: # DONE
        annotations: ['@WeaklyLinked']
        skip_def_constructor: true
        properties:
            'nonretainedObjectValue':
                name: objectValue
                omit_prefix: true
            'rangeValue':
                omit_prefix: true
            'pointerValue':
                omit_prefix: true
                type: '@Pointer long'
            'objCType':
                type: String
                marshaler: StringMarshalers.AsAsciiZMarshaler
        methods:
            '-init.*':
                name: init
            '+value:withObjCType:':
                exclude: true
            '+valueWithNonretainedObject:':
                name: valueOf
            '+valueWithPointer:':
                name: valueOf
            '-pointerValue':
                name: pointerValue
            '+valueWithRange:':
                name: valueOf
            '+valueWithBytes:objCType:':
                name: valueOf
            '-initWithBytes:objCType:':
                scope: global
                exclude: true
            '-isEqualToValue:':
                name: equalsTo
            '-getValue:':
                name: getValue
                visibility: protected
            '-getValue:size:':
                trim_after_first_colon: true
                visibility: protected
    NSValueTransformer: # DONE
        methods:
            '-transformedValue:':
                name: getTransformedValue
            '-reverseTransformedValue:':
                trim_after_first_colon: true
            '+setValueTransformer:forName:':
                name: setValueTransformer
            '+valueTransformerForName:':
                name: getValueTransformer
            '+valueTransformerNames':
                name: getValueTransformers
                return_type: NSArray<NSValueTransformer>
            '+allowsReverseTransformation':
                property: true
            '+transformedValueClass':
                property: true
                return_type: 'Class<? extends NSObject>'
    NSXMLParser: # DONE
        properties:
            'allowedExternalEntityURLs':
                type: NSSet<NSURL>
        methods:
            '-init.*':
                name: init
    NSFileProviderService: #since 11.0
        methods:
            '-getFileProviderConnectionWithCompletionHandler:':
                name: getFileProviderConnection
    NSXPCConnection: #since 6.0
        properties:
            'remoteObjectProxy': # FIXME: that is stupid workaround to match NSXPCProxyCreating
                omit_prefix: true
        methods:
            '-initWithListenerEndpoint:':
                name: init
            '-remoteObjectProxyWithErrorHandler:':
                name: remoteObjectProxy
            '-synchronousRemoteObjectProxyWithErrorHandler:':
                name: synchronousRemoteObjectProxy
    NSXPCListener: {} #since 6.0
    NSXPCListenerEndpoint: {} #since 6.0
    NSXPCInterface: #since 6.0
        methods:
            '-setClasses:forSelector:argumentIndex:ofReply:':
                trim_after_first_colon: true
            '-classesForSelector:argumentIndex:ofReply:':
                name: getClassesForSelector
            '-setInterface:forSelector:argumentIndex:ofReply:':
                trim_after_first_colon: true
            '-interfaceForSelector:argumentIndex:ofReply:':
                name: getInterfaceForSelector
            '+interfaceWithProtocol:':
                constructor: true
                name: create
    NSURLComponents: #since 7.0
        methods:
            '-initWithURL:resolvingAgainstBaseURL:':
                name: init
            '-initWithString:':
                name: init
            '-initWithString:encodingInvalidCharacters:':
                name: init
            '+componentsWithURL:resolvingAgainstBaseURL:':
                exclude: true
            '+componentsWithString:':
                exclude: true
            '+componentsWithString:encodingInvalidCharacters:':
                exclude: true
    NSURLQueryItem:  #since 8.0
        methods:
            '-initWithName:value:':
                name: init
            '+queryItemWithName:value:':
                exclude: true
    # iOS13 bindings
    NSListFormatter: {} #since 13.0
    NSOrderedCollectionChange: #since 13.0
        methods:
            '-initWithObject:type:index:':
                name: init
            '-initWithObject:type:index:associatedIndex:':
                name: init
            '+changeWithObject:type:index:':
                exclude: true
            '+changeWithObject:type:index:associatedIndex:':
                exclude: true
    NSOrderedCollectionDifference: #since 13.0
        methods:
            '-initWithChanges:':
                name: init
            '-initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:':
                name: init
            '-initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:':
                name: init
            '-differenceByTransformingChangesWithBlock:':
                name: getDifferenceByTransformingChanges
    NSRelativeDateTimeFormatter: #since 13.0
        methods:
            '-localizedStringForDate:relativeToDate:':
                name: getLocalizedStringForDate
    NSURLSessionWebSocketMessage: #since 13.0
        methods:
            '-initWithData:':
                name: init
            '-initWithString:':
                name: init
    NSURLSessionWebSocketTask: #since 13.0
        methods:
            '-sendMessage:completionHandler:':
                name: sendMessage
            '-receiveMessageWithCompletionHandler:':
                name: receiveMessage
            '-sendPingWithPongReceiveHandler:':
                name: sendPing
            '-cancelWithCloseCode:reason:':
                name: cancel
    NSUnitInformationStorage: {} #since 13.0

    # classes that are not used in binding
    NSFileSecurity: {exclude: true}
    NSConstantString: {exclude: true}
    NSPurgeableData: {exclude: true}
    NSSimpleCString: {exclude: true}
    NSXPCCoder: {exclude: true}
    NSSecureUnarchiveFromDataTransformer: {exclude: true} #since 12.0
    NSAttributedStringMarkdownParsingOptions: {} #since 15.0
    NSInflectionRule: {} #since 15.0
    NSInflectionRuleExplicit: #since 15.0
        methods:
            '-initWithMorphology:':
                name: init
    NSMorphology: #since 15.0
        methods:
            '-setCustomPronoun:forLanguage:error:':
                name: setCustomPronoun
    NSMorphologyCustomPronoun: {} #since 15.0
    NSPresentationIntent: #since 15.0
        methods:
            '+paragraphIntentWithIdentity:nestedInsideIntent:':
                name: createParagraphIntent
            '+headerIntentWithIdentity:level:nestedInsideIntent:':
                name: createHeaderIntent
            '+codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:':
                name: createCodeBlockIntent
            '+thematicBreakIntentWithIdentity:nestedInsideIntent:':
                name: createThematicBreakIntent
            '+orderedListIntentWithIdentity:nestedInsideIntent:':
                name: createOrderedListIntent
            '+unorderedListIntentWithIdentity:nestedInsideIntent:':
                name: createUnorderedListIntent
            '+listItemIntentWithIdentity:ordinal:nestedInsideIntent:':
                name: createListItemIntent
            '+blockQuoteIntentWithIdentity:nestedInsideIntent:':
                name: createBlockQuoteIntent
            '+tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:':
                name: createTableIntent
            '+tableHeaderRowIntentWithIdentity:nestedInsideIntent:':
                name: createTableHeaderRowIntent
            '+tableRowIntentWithIdentity:row:nestedInsideIntent:':
                name: createTableRowIntent
            '+tableCellIntentWithIdentity:column:nestedInsideIntent:':
                name: createTableCellIntent
    NSAttributedStringMarkdownSourcePosition: #since 16.0
        methods:
            '-initWithStartLine:startColumn:endLine:endColumn:':
                name: init
    NSMorphologyPronoun: #since 17.0
        methods:
            '-initWithPronoun:morphology:dependentMorphology:':
                name: init
    NSTermOfAddress: #since 17.0
        methods:
            '+localizedForLanguageIdentifier:withPronouns:':
                constructor: true
                name: create
protocols:
    NSCacheDelegate: # DONE
        methods:
            '-cache:willEvictObject:':
                name: willEvictObject
    NSCoding: # DONE
        methods:
            '-initWithCoder:':
                name: init
                parameters:
                    0:
                        name: coder
            '-encodeWithCoder:':
                name: encode
                parameters:
                    0:
                        name: coder
    NSDecimalNumberBehaviors: # DONE
        methods:
            '-roundingMode':
                property: true
            '-scale':
                property: true
            '-exceptionDuringOperation:error:leftOperand:rightOperand:':
                trim_after_first_colon: true
    NSErrorRecoveryAttempting: # DONE
        methods:
            '-attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:':
                name: attemptRecoveryFromError
            '-attemptRecoveryFromError:optionIndex:':
                name: attemptRecoveryFromError
    NSExtensionRequestHandling: # DONE
        methods:
            '-beginRequestWithExtensionContext:':
                name: beginRequest
    NSFastEnumeration: # DONE
        properties:
            '.*':
                exclude: true
        methods:
            '-.*':
                exclude: true
            '+.*':
                exclude: true
    NSFileManagerDelegate: # DONE
        methods:
            '-fileManager:shouldCopyItemAtPath:toPath:':
                name: shouldCopyItemAtPath
            '-fileManager:shouldCopyItemAtURL:toURL:':
                name: shouldCopyItemAtURL
            '-fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:':
                name: shouldProceedCopyingItemAtPath
            '-fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:':
                name: shouldProceedCopyingItemAtURL
            '-fileManager:shouldMoveItemAtPath:toPath:':
                name: shouldMoveItemAtPath
            '-fileManager:shouldMoveItemAtURL:toURL:':
                name: shouldMoveItemAtURL
            '-fileManager:shouldProceedAfterError:movingItemAtPath:toPath:':
                name: shouldProceedMovingItemAtPath
            '-fileManager:shouldProceedAfterError:movingItemAtURL:toURL:':
                name: shouldProceedMovingItemAtURL
            '-fileManager:shouldLinkItemAtPath:toPath:':
                name: shouldLinkItemAtPath
            '-fileManager:shouldLinkItemAtURL:toURL:':
                name: shouldLinkItemAtURL
            '-fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:':
                name: shouldProceedLinkingItemAtPath
            '-fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:':
                name: shouldProceedLinkingItemAtURL
            '-fileManager:shouldRemoveItemAtPath:':
                name: shouldRemoveItemAtPath
            '-fileManager:shouldRemoveItemAtURL:':
                name: shouldRemoveItemAtURL
            '-fileManager:shouldProceedAfterError:removingItemAtPath:':
                name: shouldProceedRemovingItemAtPath
            '-fileManager:shouldProceedAfterError:removingItemAtURL:':
                name: shouldProceedRemovingItemAtURL
    NSFilePresenter: # DONE
        methods:
            '-relinquishPresentedItemToReader:':
                trim_after_first_colon: true
            '-relinquishPresentedItemToWriter:':
                trim_after_first_colon: true
            '-savePresentedItemChangesWithCompletionHandler:':
                name: savePresentedItemChanges
            '-accommodatePresentedItemDeletionWithCompletionHandler:':
                name: accommodatePresentedItemDeletion
            '-presentedItemDidMoveToURL:':
                trim_after_first_colon: true
            '-presentedItemDidGainVersion:':
                trim_after_first_colon: true
            '-presentedItemDidLoseVersion:':
                trim_after_first_colon: true
            '-presentedItemDidResolveConflictVersion:':
                trim_after_first_colon: true
            '-accommodatePresentedSubitemDeletionAtURL:completionHandler:':
                trim_after_first_colon: true
            '-presentedSubitemDidAppearAtURL:':
                trim_after_first_colon: true
            '-presentedSubitemAtURL:didMoveToURL:':
                name: presentedSubitemAtURLDidMoveToURL
            '-presentedSubitemDidChangeAtURL:':
                trim_after_first_colon: true
            '-presentedSubitemAtURL:didGainVersion:':
                name: presentedSubitemAtURLDidGainVersion
            '-presentedSubitemAtURL:didLoseVersion:':
                name: presentedSubitemAtURLDidLoseVersion
            '-presentedSubitemAtURL:didResolveConflictVersion:':
                name: presentedSubitemAtURLDidResolveConflictVersion
    NSKeyedArchiverDelegate: # DONE
        methods:
            '-archiver:willEncodeObject:':
                name: willEncodeObject
            '-archiver:didEncodeObject:':
                name: didEncodeObject
            '-archiver:willReplaceObject:withObject:':
                name: willReplaceObject
            '-archiverWillFinish:':
                name: willFinish
            '-archiverDidFinish:':
                name: didFinish
    NSKeyedUnarchiverDelegate: # DONE
        methods:
            '-unarchiver:cannotDecodeObjectOfClassName:originalClasses:':
                name: cannotDecodeObjectOfClassName
                return_type: 'Class<? extends NSObject>'
                parameters:
                    classNames:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-unarchiver:didDecodeObject:':
                name: didDecodeObject
            '-unarchiver:willReplaceObject:withObject:':
                name: willReplaceObject
            '-unarchiverWillFinish:':
                name: willFinish
            '-unarchiverDidFinish:':
                name: didFinish
    NSLocking: {} # DONE
    NSMachPortDelegate: # DONE
        methods:
            '-handleMachMessage:':
                trim_after_first_colon: true
    NSMetadataQueryDelegate: # DONE
        methods:
            '-metadataQuery:replacementObjectForResultObject:':
                name: getReplacementObject
            '-metadataQuery:replacementValueForAttribute:value:':
                name: getReplacementValue
                parameters:
                    attrName:
                        name: attribute
                        type: NSMetadataItemAttribute
    #    NSMutableCopying: {}
    NSNetServiceBrowserDelegate: # DONE
        methods:
            '-netServiceBrowserWillSearch:':
                name: willSearch
            '-netServiceBrowserDidStopSearch:':
                name: didStopSearch
            '-netServiceBrowser:didNotSearch:':
                name: didNotSearch
                parameters:
                    errorDict:
                        type: 'NSDictionary<NSString, NSNumber>'
            '-netServiceBrowser:didFindDomain:moreComing:':
                name: didFindDomain
            '-netServiceBrowser:didFindService:moreComing:':
                name: didFindService
            '-netServiceBrowser:didRemoveDomain:moreComing:':
                name: didRemoveDomain
            '-netServiceBrowser:didRemoveService:moreComing:':
                name: didRemoveService
    NSNetServiceDelegate: # DONE
        methods:
            '-netServiceWillPublish:':
                name: willPublish
            '-netServiceDidPublish:':
                name: didPublish
            '-netService:didNotPublish:':
                name: didNotPublish
                parameters:
                    errorDict:
                        type: NSNetServiceErrorUserInfo
            '-netServiceWillResolve:':
                name: willResolve
            '-netServiceDidResolveAddress:':
                name: didResolve
            '-netService:didNotResolve:':
                name: didNotResolve
                parameters:
                    errorDict:
                        type: NSNetServiceErrorUserInfo
            '-netServiceDidStop:':
                name: didStop
            '-netService:didUpdateTXTRecordData:':
                name: didUpdateTXTRecordData
            '-netService:didAcceptConnectionWithInputStream:outputStream:':
                name: didAcceptConnection
    NSObject: # DONE
        name: NSObjectProtocol
        protocols: [ObjCProtocol]
        skip_adapter: true
        properties:
            '.*': { exclude: true }
        methods:
            '\+.*': { exclude: true }
            '-.*': { exclude: true }
    NSPortDelegate: # DONE
        methods:
            '-handlePortMessage:':
                trim_after_first_colon: true
    NSProgressReporting: {} # DONE
    NSSecureCoding: {skip_adapter: true}
    NSStreamDelegate: # DONE
        methods:
            '-stream:handleEvent:':
                name: handleEvent
    NSURLAuthenticationChallengeSender: # DONE
        methods:
            '-useCredential:forAuthenticationChallenge:':
                trim_after_first_colon: true
            '-continueWithoutCredentialForAuthenticationChallenge:':
                name: continueWithoutCredential
            '-cancelAuthenticationChallenge:':
                name: cancel
            '-performDefaultHandlingForAuthenticationChallenge:':
                name: performDefaultHandling
            '-rejectProtectionSpaceAndContinueWithChallenge:':
                name: rejectProtectionSpaceAndContinue
    NSURLConnectionDataDelegate: # DONE
        methods:
            '-connection:willSendRequest:redirectResponse:':
                name: willSendRequest
            '-connection:didReceiveResponse:':
                name: didReceiveResponse
            '-connection:didReceiveData:':
                name: didReceiveData
            '-connection:needNewBodyStream:':
                name: needNewBodyStream
            '-connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:':
                name: didSendBodyData
            '-connection:willCacheResponse:':
                name: willCacheResponse
            '-connectionDidFinishLoading:':
                name: didFinishLoading
    NSURLConnectionDelegate: # DONE
        methods:
            '-connection:didFailWithError:':
                name: didFail
            '-connectionShouldUseCredentialStorage:':
                name: shouldUseCredentialStorage
            '-connection:willSendRequestForAuthenticationChallenge:':
                name: willSendRequestForAuthenticationChallenge
            '-connection:canAuthenticateAgainstProtectionSpace:':
                name: canAuthenticateAgainstProtectionSpace
            '-connection:didReceiveAuthenticationChallenge:':
                name: didReceiveAuthenticationChallenge
            '-connection:didCancelAuthenticationChallenge:':
                name: didCancelAuthenticationChallenge
    NSURLConnectionDownloadDelegate: # DONE
        methods:
            '-connection:didWriteData:totalBytesWritten:expectedTotalBytes:':
                name: didWriteData
            '-connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:':
                name: didResumeDownloading
            '-connectionDidFinishDownloading:destinationURL:':
                name: didFinishDownloading
    NSURLProtocolClient: # DONE
        methods:
            '-URLProtocol:wasRedirectedToRequest:redirectResponse:':
                name: wasRedirectedToRequest
            '-URLProtocol:cachedResponseIsValid:':
                name: cachedResponseIsValid
            '-URLProtocol:didReceiveResponse:cacheStoragePolicy:':
                name: didReceiveResponse
            '-URLProtocol:didLoadData:':
                name: didLoadData
            '-URLProtocolDidFinishLoading:':
                name: didFinishLoading
            '-URLProtocol:didFailWithError:':
                name: didFail
            '-URLProtocol:didReceiveAuthenticationChallenge:':
                name: didReceiveAuthenticationChallenge
            '-URLProtocol:didCancelAuthenticationChallenge:':
                name: didCancelAuthenticationChallenge
    NSURLSessionDataDelegate: # DONE
        methods:
            '-URLSession:dataTask:didReceiveResponse:completionHandler:':
                name: didReceiveResponse
            '-URLSession:dataTask:didBecomeDownloadTask:':
                name: didBecomeDownloadTask
            '-URLSession:dataTask:didBecomeStreamTask:':
                name: didBecomeStreamTask
            '-URLSession:dataTask:didReceiveData:':
                name: didReceiveData
            '-URLSession:dataTask:willCacheResponse:completionHandler:':
                name: willCacheResponse
    NSURLSessionDelegate: # DONE
        methods:
            '-URLSession:didBecomeInvalidWithError:':
                name: didBecomeInvalid
            '-URLSession:didReceiveChallenge:completionHandler:':
                name: didReceiveChallenge
            '-URLSessionDidFinishEventsForBackgroundURLSession:':
                name: didFinishEvents
    NSURLSessionDownloadDelegate: # DONE
        methods:
            '-URLSession:downloadTask:didFinishDownloadingToURL:':
                name: didFinishDownloading
            '-URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:':
                name: didWriteData
            '-URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:':
                name: didResume
    NSURLSessionStreamDelegate: # DONE
        methods:
            '-URLSession:readClosedForStreamTask:':
                name: readClosed
            '-URLSession:writeClosedForStreamTask:':
                name: writeClosed
            '-URLSession:betterRouteDiscoveredForStreamTask:':
                name: betterRouteDiscovered
            '-URLSession:streamTask:didBecomeInputStream:outputStream:':
                name: didFinish
    NSURLSessionTaskDelegate: # DONE
        methods:
            '-URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:':
                name: willPerformHTTPRedirection
            '-URLSession:task:didReceiveChallenge:completionHandler:':
                name: didReceiveChallenge
            '-URLSession:task:needNewBodyStream:':
                name: needNewBodyStream
            '-URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:':
                name: didSendBodyData
            '-URLSession:task:didCompleteWithError:':
                name: didComplete
            '-URLSession:task:didFinishCollectingMetrics:':
                name: didFinishCollectingMetrics
            '-URLSession:task:willBeginDelayedRequest:completionHandler:':
                name: willBeginDelayedRequest
            '-URLSession:taskIsWaitingForConnectivity:':
                name: taskIsWaitingForConnectivity
            '-URLSession:didCreateTask:':
                name: didCreateTask
            '-URLSession:task:needNewBodyStreamFromOffset:completionHandler:':
                name: needNewBodyStream
            '-URLSession:task:didReceiveInformationalResponse:':
                name: didReceiveInformationalResponse
    NSUserActivityDelegate: # DONE
        methods:
            '-userActivityWillSave:':
                name: willSave
            '-userActivityWasContinued:':
                name: wasContinued
            '-userActivity:didReceiveInputStream:outputStream:':
                name: didReceiveStreams
    NSXMLParserDelegate: # DONE
        methods:
            '-parserDidStartDocument:':
                name: didStartDocument
            '-parserDidEndDocument:':
                name: didEndDocument
            '-parser:foundNotationDeclarationWithName:publicID:systemID:':
                name: foundNotationDeclaration
            '-parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:':
                name: foundUnparsedEntityDeclaration
            '-parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:':
                name: foundAttributeDeclaration
            '-parser:foundElementDeclarationWithName:model:':
                name: foundElementDeclaration
            '-parser:foundInternalEntityDeclarationWithName:value:':
                name: foundInternalEntityDeclaration
            '-parser:foundExternalEntityDeclarationWithName:publicID:systemID:':
                name: foundExternalEntityDeclaration
            '-parser:didStartElement:namespaceURI:qualifiedName:attributes:':
                name: didStartElement
                parameters:
                    attributeDict:
                        type: 'Map<String, NSObject>'
                        marshaler: NSDictionary.AsStringMapMarshaler
            '-parser:didEndElement:namespaceURI:qualifiedName:':
                name: didEndElement
            '-parser:didStartMappingPrefix:toURI:':
                name: didStartMappingPrefix
            '-parser:didEndMappingPrefix:':
                name: didEndMappingPrefix
            '-parser:foundCharacters:':
                name: foundCharacters
            '-parser:foundIgnorableWhitespace:':
                name: foundIgnorableWhitespace
            '-parser:foundProcessingInstructionWithTarget:data:':
                name: foundProcessingInstruction
            '-parser:foundComment:':
                name: foundComment
            '-parser:foundCDATA:':
                name: foundCDATA
            '-parser:resolveExternalEntityName:systemID:':
                name: resolveExternalEntityName
            '-parser:parseErrorOccurred:':
                name: parseErrorOccurred
            '-parser:validationErrorOccurred:':
                name: validationErrorOccurred

    NSItemProviderReading: #since 11.0
        methods:
            '+objectWithItemProviderData:typeIdentifier:error:':
                throws: NSErrorException
                name: createProviderDataObject
    NSItemProviderWriting: #since 11.0
        properties:
            '+writableTypeIdentifiersForItemProvider':
                name: writableTypeIdentifiersForItemProvider0
        methods:
            '-itemProviderVisibilityForRepresentationWithTypeIdentifier:':
                name: getItemProviderVisibility
            '+itemProviderVisibilityForRepresentationWithTypeIdentifier:':
                name: getItemProviderVisibility0
            '-loadDataWithTypeIdentifier:forItemProviderCompletionHandler:':
                name: loadData
    NSXPCListenerDelegate:
        methods:
            '-listener:shouldAcceptNewConnection:':
                name: shouldAcceptNewConnection
    NSXPCProxyCreating:
        properties:
            '+writableTypeIdentifiersForItemProvider':
                name: writableTypeIdentifiersForItemProvider0
        methods:
            '-remoteObjectProxyWithErrorHandler:':
                name: remoteObjectProxy
            '-synchronousRemoteObjectProxyWithErrorHandler:':
                name: synchronousRemoteObjectProxy
    NSURLSessionWebSocketDelegate: #since 13.0
        methods:
            '-URLSession:webSocketTask:didOpenWithProtocol:':
                name: didOpen
            '-URLSession:webSocketTask:didCloseWithCode:reason:':
                name: didClose
    NSDiscardableContent: {}
    NSCopying: {exclude: true, skip_implements: true, skip_methods: true}
    NSMutableCopying: {exclude: true, skip_implements: true, skip_methods: true}
functions:
    NSAllocateObject:
        exclude: true
    NSCopyObject:
        exclude: true
    NSDeallocateObject:
        exclude: true
    NS(Class|Protocol|Selector)FromString:
        exclude: true
    NSStringFrom(Class|Protocol|Selector):
        exclude: true
    NSMakeCollectable:
        exclude: true
    NSGetSizeAndAlignment:
        exclude: true

    # NSDecimal
    NSDecimalString:
        class: NSDecimal
        name: toString
        static: true
        visibility: protected
    NSDecimalCopy:
        exclude: true
    NSDecimal(.*):
        class: NSDecimal
        name: '#{g[0]}'
        static: true

    # NSException
    NS(GetUncaughtExceptionHandler):
        exclude: true
    NS(.*UncaughtExceptionHandler):
        class: NSException
        name: '#{g[0]}'
        visibility: private

    NS(.*ExtraRefCount.*):
        exclude: true
    NS(ShouldRetainWithZone):
        exclude: true

    # NSPathUtilities
    NS(UserName|FullUserName|HomeDirectoryForUser|HomeDirectory|TemporaryDirectory|OpenStepRootDirectory):
        class: NSPathUtilities
        name: 'get#{g[0]}'
    NS(SearchPathForDirectoriesInDomains):
        class: NSPathUtilities
        name: 'get#{g[0]}'
        return_type: List<String>
        return_marshaler: NSArray.AsStringListMarshaler

    NS(Intersection|Union)Range:
        class: NSRange
        static: true
        name: '#{g[0]}'
    NSRangeFromString:
        class: NSRange
        name: fromString
    NSStringFromRange:
        class: NSRange
        static: true
        visibility: protected
        name: toString

    NSZoneName:
        class: NSZone
        name: getName
    NSSetZoneName:
        class: NSZone
        name: setName
    NS(Create|Recycle)Zone:
        class: NSZone
        name: '#{g[0]}'
    NS(DefaultMallocZone):
        class: NSZone
        name: 'get#{g[0]}'
    NSZone(.*):
        class: NSZone
        name: '#{g[0]}'
    NS((Allocate|Deallocate|Copy)MemoryPages):
        class: NSZone
        name: '#{g[0]}'
    NS((Log)?PageSize):
        class: NSZone
        name: 'get#{g[0]}'
    NS(.*PageSize):
        class: NSZone
        name: '#{g[0]}'
    NS(RealMemoryAvailable):
        class: NSZone
        name: 'get#{g[0]}'

    # exclude exposed low level NSTable api as it has little meaning for RoboVM
    NSFreeHashTable:
        exclude: true
    NSResetHashTable:
        exclude: true
    NSCompareHashTables:
        exclude: true
    NSCopyHashTableWithZone:
        exclude: true
    NSHashGet:
        exclude: true
    NSHashInsert:
        exclude: true
    NSHashInsertKnownAbsent:
        exclude: true
    NSHashInsertIfAbsent:
        exclude: true
    NSHashRemove:
        exclude: true
    NSEnumerateHashTable:
        exclude: true
    NSNextHashEnumeratorItem:
        exclude: true
    NSEndHashTableEnumeration:
        exclude: true
    NSCountHashTable:
        exclude: true
    NSStringFromHashTable:
        exclude: true
    NSAllHashTableObjects:
        exclude: true
    NSCreateHashTableWithZone:
        exclude: true
    NSCreateHashTable:
        exclude: true
    NSFreeMapTable:
        exclude: true
    NSResetMapTable:
        exclude: true
    NSCompareMapTables:
        exclude: true
    NSCopyMapTableWithZone:
        exclude: true
    NSMapMember:
        exclude: true
    NSMapGet:
        exclude: true
    NSMapInsert:
        exclude: true
    NSMapInsertKnownAbsent:
        exclude: true
    NSMapInsertIfAbsent:
        exclude: true
    NSMapRemove:
        exclude: true
    NSEnumerateMapTable:
        exclude: true
    NSNextMapEnumeratorPair:
        exclude: true
    NSEndMapTableEnumeration:
        exclude: true
    NSCountMapTable:
        exclude: true
    NSStringFromMapTable:
        exclude: true
    NSAllMapTableKeys:
        exclude: true
    NSAllMapTableValues:
        exclude: true
    NSCreateMapTableWithZone:
        exclude: true
    NSCreateMapTable:
        exclude: true

    # Make sure we don't miss any functions if new ones are introduced in a later Foundation
    (NS.*):
        name: 'Function__#{g[0]}'

values:
    NS.*Exception:
        exclude: true
    NSAssertionHandlerKey:
        exclude: true
    NSErrorFailingURLStringKey:
        exclude: true

    # NSError
    NSCocoaErrorDomain:
        class: NSCocoaError
        name: getClassDomain
    NSPOSIXErrorDomain:
        class: NSPOSIXError
        name: getClassDomain
    NSOSStatusErrorDomain:
        class: NSCarbonError
        name: getClassDomain
    NSMachErrorDomain:
        class: NSMachError
        name: getClassDomain
    NSItemProviderErrorDomain:
        class: NSItemProviderError
        name: getClassDomain
    NSStreamSocketSSLErrorDomain:
        class: NSStreamSocketSSLError
        name: getClassDomain
    NSStreamSOCKSErrorDomain:
        class: NSStreamSOCKSError
        name: getClassDomain
    NSURLErrorDomain:
        class: NSURLError
        name: getClassDomain
    NSXMLParserErrorDomain:
        class: NSXMLParserError
        name: getClassDomain

    NS(LocalizedDescription|UnderlyingError)Key:
        enum: NSCocoaErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    NS(FilePath|StringEncoding|URL|LocalizedFailureReason|LocalizedRecoverySuggestion|LocalizedFailure|DebugDescription)ErrorKey:
        enum: NSCocoaErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    NS(LocalizedRecoveryOptions|RecoveryAttempter|HelpAnchor)ErrorKey:
        enum: NSCocoaErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    NS(MultipleUnderlyingErrors)Key:
        enum: NSCocoaErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    NSURLError(FailingURL|FailingURLString|FailingURLPeerTrust)ErrorKey:
        enum: NSURLErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    NSURL(KeysOfUnsetValues)Key:
        enum: NSURLErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    NSURLError(BackgroundTaskCancelledReason|NetworkUnavailableReason)Key:
        enum: NSURLSessionErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    NSURLSession(DownloadTaskResumeData|UploadTaskResumeData):
        enum: NSURLSessionErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey

    # NSBundle
    NSBundle(DidLoadNotification):
        class: NSBundle
        name: '#{g[0]}'
        type: NSString
    NS(LoadedClasses):
        class: NSBundle
        name: '#{g[0]}Key'
        type: NSString
        visibility: protected

    # NSBundleResourceRequest
    NSBundleResourceRequestLoadingPriorityUrgent:
        class: NSBundleResourceRequest
        name: getUrgentLoadingPriority
    NSBundleResourceRequest(.*Notification):
        class: NSBundleResourceRequest
        name: '#{g[0]}'
        type: NSString

    # NSCalendar
    NSCalendarIdentifier(.*):
        enum: NSCalendarIdentifier
        name: '#{g[0]}'
        type: NSString
    NS.*Calendar: # NSCalendarIdentifier values should be used instead
        exclude: true
    NSCalendar(DayChangedNotification):
        class: NSCalendar
        name: '#{g[0]}'
        type: NSString

    # NSDate
    NS(SystemClockDidChangeNotification):
        class: NSDate
        name: '#{g[0]}'
        type: NSString

    # NSExtensionContext
    NS(ExtensionItemsAndErrorsKey):
        enum: NSExtensionContextErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    NSExtension(.*Notification):
        class: NSExtensionContext
        name: '#{g[0]}'
        type: NSString

    # NSExtensionItem
    NSExtensionItem(.*Key):
        class: NSExtensionItem
        name: '#{g[0]}'

    # NSFile
    NSFile(AppendOnly|Busy|CreationDate|DeviceIdentifier|ExtensionHidden|GroupOwnerAccountID|GroupOwnerAccountName|HFSCreatorCode|HFSTypeCode|Immutable|ModificationDate|OwnerAccountID|OwnerAccountName|PosixPermissions|ReferenceCount|Size|SystemFileNumber|Type|ProtectionKey):
        dictionary: NSFileAttributes
        enum: NSFileAttribute
        name: '#{g[0]}'
        type: NSString
        methods:
            Type:
                type: NSFileType
            Size:
                type: long
            ModificationDate:
                type: NSDate
            ReferenceCount:
                type: long
            DeviceIdentifier:
                type: long
            OwnerAccountName:
                type: String
            GroupOwnerAccountName:
                type: String
            PosixPermissions:
                type: short
            SystemFileNumber:
                type: long
            ExtensionHidden:
                type: boolean
            HFSCreatorCode:
                type: long
            HFSTypeCode:
                type: long
            Immutable:
                type: boolean
            AppendOnly:
                name: appendsOnly
                type: boolean
            CreationDate:
                type: NSDate
            OwnerAccountID:
                type: long
            GroupOwnerAccountID:
                type: long
            Busy:
                type: boolean
            ProtectionKey:
                name: protection
                type: NSFileProtection
    NSFileType(.*):
        enum: NSFileType
        name: '#{g[0]}'
        type: NSString
    NSFileProtection(.*):
        enum: NSFileProtection
        name: '#{g[0]}'
        type: NSString
    NSFileSystem(.*):
        dictionary: NSFileSystemAttributes
        enum: NSFileSystemAttribute
        name: '#{g[0]}'
        type: NSString
        methods:
            Size:
                type: long
            FreeSize:
                type: long
            Nodes:
                type: long
            FreeNodes:
                type: long
            Number:
                name: systemNumber
                type: long

    # NSFileHandle
    NSFileHandle(.*Notification):
        class: NSFileHandle
        name: '#{g[0]}'
        type: NSString
    NSFileHandle(Notification.*Item):
        class: NSFileHandle
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    NSFileHandleNotificationMonitorModes: # deprecated
        exclude: true

    # NSFileManager
    NS(UbiquityIdentityDidChangeNotification):
        class: NSFileManager
        name: '#{g[0]}'
        type: NSString

    # NSHTTPCookieStorage
    NSHTTPCookieManager(.*Notification):
        class: NSHTTPCookieStorage
        name: '#{g[0]}'
        type: NSString

    # NSHTTPCookie
    NSHTTPCookie(.*):
        dictionary: NSHTTPCookieAttributes
        enum: NSHTTPCookieAttribute
        name: '#{g[0]}'
        type: NSString
        methods:
            Comment:
                type: String
            CommentURL:
                type: NSURL
            Domain:
                type: String
            Expires:
                name: expireDate
                type: NSDate
            MaximumAge:
                type: int
            Name:
                type: String
            OriginURL:
                type: NSURL
            Path:
                type: String
            Port:
                type: String
            Value:
                type: String
            Version:
                type: int

    # NSItemProvider
    NSItemProvider(.*)Key:
        dictionary: NSItemProviderOptions
        name: '#{g[0]}'
        type: NSString
        methods:
            PreferredImageSize:
                type: CGSize
                hint: Struct<?>
                annotations: ['@WeaklyLinked']
    NSExtension(JavaScript.*Key):
        class: NSItemProvider
        name: '#{g[0]}'

    # NSKeyedArchiver
    NSKeyed(ArchiveRootObjectKey):
        class: NSKeyedArchiver
        name: '#{g[0]}'

    # NSKeyValueCoding
    NS(.*)KeyValueOperator:
        enum: NSKeyValueOperator
        name: '#{g[0]}'
        type: NSString

    # NSKeyValueObserving
    NSKeyValueChange(.*)Key:
        dictionary: NSKeyValueChangeInfo
        name: '#{g[0]}'
        type: NSString
        mutable: false
        methods:
            Kind:
                type: NSKeyValueChange
            New:
                type: NSObject
            Old:
                type: NSObject
            Indexes:
                type: NSIndexSet
            NotificationIsPrior:
                name: notificationSentPriorToChange
                type: boolean

    # NSLinguisticTagger
    NSLinguisticTagScheme(.*):
        enum: NSLinguisticTagScheme
        name: '#{g[0]}'
        type: NSString
    NSLinguisticTag(.*):
        enum: NSLinguisticTag
        name: '#{g[0]}'
        type: NSString

    # NSLocale
    NSLocale(.*):
        dictionary: NSLocaleComponents
        enum: NSLocaleComponent
        name: '#{g[0]}'
        type: NSString
    NS(CurrentLocaleDidChangeNotification):
        class: NSLocale
        name: '#{g[0]}'
        type: NSString

    # NSMetadataItem
    NSMetadataItem(.*)Key:
        dictionary: NSMetadataItemAttributes
        enum: NSMetadataItemAttribute
        name: '#{g[0]}'
        type: NSString
        mutable: false
        methods:
            FSName:
                type: String
            DisplayName:
                type: String
            URL:
                type: NSURL
            Path:
                type: String
            FSSize:
                type: long
            FSCreationDate:
                type: NSDate
            FSContentChangeDate:
                type: NSDate
            IsUbiquitous:
                type: boolean
            HasUnresolvedConflicts:
                type: boolean
            IsDownloaded:
                type: boolean
            DownloadingStatus:
                type: NSMetadataItemDownloadingStatus
            IsDownloading:
                type: boolean
            IsUploaded:
                type: boolean
            IsUploading:
                type: boolean
            PercentDownloaded:
                type: double
            PercentUploaded:
                type: double
            DownloadingError:
                type: NSError
            UploadingError:
                type: NSError
            ContentRelevance:
                type: double
            DownloadRequested:
                type: boolean
            IsExternalDocument:
                type: boolean
            ContainerDisplayName:
                type: String
            URLInLocalContainer:
                type: NSURL
            ContentType:
                type: String
            ContentTypeTree:
                type: List<String>
    NSMetadataUbiquitousItem(.*)Key:
        dictionary: NSMetadataItemAttributes
        enum: NSMetadataItemAttribute
        name: '#{g[0]}'
        type: NSString
        mutable: false
    NSMetadataUbiquitousItemDownloadingStatus(.*):
        enum: NSMetadataItemDownloadingStatus
        name: '#{g[0]}'
        type: NSString

    # NSNetService
    NSNetServices(Error.*):
        dictionary: NSNetServiceErrorUserInfo
        name: '#{g[0]}'
        type: NSString
        methods:
            ErrorCode:
                type: NSNetServiceErrorCode
            ErrorDomain:
                type: String

    # NSMetadataQuery
    NSMetadataQuery(.*)Scope:
        enum: NSMetadataQueryScope
        name: '#{g[0]}'
        type: NSString
    NSMetadataQuery(.*Notification):
        class: NSMetadataQuery
        name: '#{g[0]}'
        type: NSString
    NSMetadataQuery(.*)Key:
        dictionary: NSMetadataQueryUpdatedItems
        name: '#{g[0]}'
        type: NSString
        mutable: false
        methods:
            UpdateAddedItems:
                name: addedItems
                type: NSArray<NSMetadataItem>
            UpdateChangedItems:
                name: changedItems
                type: NSArray<NSMetadataItem>
            UpdateRemovedItems:
                name: removedItems
                type: NSArray<NSMetadataItem>
    NSMetadataQueryResult(ContentRelevance)Attribute:
        dictionary: NSMetadataItemAttributes
        enum: NSMetadataItemAttribute
        name: '#{g[0]}'
        type: NSString
        mutable: false

    # NSOperationQueue
    NSOperationQueue(DefaultMaxConcurrentOperationCount):
        class: NSOperationQueue
        name: 'get#{g[0]}'

    # NSPersonNameComponents
    NSPersonNameComponentKey:
        exclude: true # exclude for now
    NSPersonNameComponent(.*):
        enum: NSPersonNameComponent
        name: '#{g[0]}'
        type: NSString

    # NSPointerFunctions
    NSHashTable(.*):
        exclude: true
    NSMapTable(.*):
        exclude: true

    # NSPort
    NSPort(.*Notification):
        class: NSPort
        name: '#{g[0]}'
        type: NSString

    # NSProcessInfo
    NSProcessInfo(.*Notification):
        class: NSProcessInfo
        name: '#{g[0]}'
        type: NSString

    # NSProgress
    NSProgress(.*)Key:
        dictionary: NSProgressUserInfo
        enum: NSProgressUserInfoKey
        name: '#{g[0]}'
        type: NSString
        methods:
            EstimatedTimeRemaining:
                type: double
            Throughput:
                type: long
            FileOperationKind:
                type: NSProgressFileOperationKind
            FileURL:
                type: NSURL
            FileTotalCount:
                name: totalFileCount
                type: long
            FileCompletedCount:
                name: completedFileCount
                type: long
    NSProgressFileOperationKind(.*):
        enum: NSProgressFileOperationKind
        name: '#{g[0]}'
        type: NSString
    NSProgressKind(.*):
        enum: NSProgressKind
        name: '#{g[0]}'
        type: NSString

    # NSRunLoop
    NS(Default)RunLoopMode:
        enum: NSRunLoopMode
        name: '#{g[0]}'
        type: NSString
    NSRunLoop(Common)Modes:
        enum: NSRunLoopMode
        name: '#{g[0]}'
        type: NSString

    # NSStream
    NSStream(SOCKSProxyConfiguration)Key:
        enum: NSStreamProperty
        name: '#{g[0]}'
        type: NSString
    NSStreamSOCKSProxy(.*)Key:
        dictionary: NSStreamSOCKSProxyConfiguration
        name: '#{g[0]}'
        type: NSString
        methods:
            Host:
                type: String
            Port:
                type: int
            Version:
                type: NSStreamSOCKSProxyVersion
            User:
                type: String
            Password:
                type: String
    NSStream(.*)Key:
        enum: NSStreamProperty
        name: '#{g[0]}'
        type: NSString
    NSStream(NetworkServiceType):
        enum: NSStreamProperty
        name: '#{g[0]}'
        type: NSString
    NSStreamNetworkServiceType(.*):
        enum: NSStreamNetworkServiceType
        name: '#{g[0]}'
        type: NSString
    NSStreamSocketSecurityLevel(.*):
        enum: NSStreamSocketSecurityLevel
        name: '#{g[0]}'
        type: NSString
    NSStreamSOCKSProxyVersion(.*):
        enum: NSStreamSOCKSProxyVersion
        name: 'Version#{g[0]}'
        type: NSString

    # NSString
    NSStringEncodingDetection(.*Key*):
        exclude: true
    NSStringTransform(.*):
        enum: NSStringTransform
        name: '#{g[0]}'
        type: NSString

    # NSTextCheckingResult
    NSTextChecking(Airline|Flight)Key:
        dictionary: NSTextCheckingTransitComponents
        name: '#{g[0]}'
        type: NSString
        mutable: false
        methods:
            Airline:
                type: String
            Flight:
                type: String
    NSTextChecking(.*)Key:
        dictionary: NSTextCheckingAddressComponents
        name: '#{g[0]}'
        type: NSString
        mutable: false
        methods:
            Name:
                type: String
            JobTitle:
                type: String
            Organization:
                type: String
            Street:
                type: String
            City:
                type: String
            State:
                type: String
            ZIP:
                type: String
            Country:
                type: String
            Phone:
                type: String

    # NSThread
    NS(WillBecomeMultiThreadedNotification|DidBecomeSingleThreadedNotification):
        class: NSThread
        name: '#{g[0]}'
        type: NSString
    NSThread(WillExitNotification):
        class: NSThread
        name: '#{g[0]}'
        type: NSString

    # NSTimeZone
    NSSystemTimeZone(DidChangeNotification):
        class: NSTimeZone
        name: '#{g[0]}'
        type: NSString

    # NSUbiquitousKeyValueStore
    NSUbiquitousKeyValueStore(.*Notification):
        class: NSUbiquitousKeyValueStore
        name: '#{g[0]}'
        type: NSString
    NSUbiquitousKeyValueStore(Change.*Key):
        class: NSUbiquitousKeyValueStore
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # NSUndoManager
    NSUndoManager(.*Notification):
        class: NSUndoManager
        name: '#{g[0]}'
        type: NSString
    NSUndoManager(GroupIsDiscardableKey):
        class: NSUndoManager
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    NSUndo(CloseGroupingRunLoopOrdering):
        class: NSUndoManager
        name: 'get#{g[0]}'

    # NSURL
    NS(URLErrorBackgroundTaskCancelledReasonKey):
        name: '#{g[0]}'
        type: NSString
    NS(URLKeysOfUnsetValuesKey):
        name: '#{g[0]}'
        type: NSString
    NS(URLError.*Key):
        name: '#{g[0]}'
        type: NSString
    NSURL(FileResourceType|VolumeIdentifier|VolumeURL)Key:
        enum: NSURLFileSystemProperty
        name: '#{g[0]}'
        type: NSString
        extends: NSURLProperty
    NSURLFileResourceType(.*):
        enum: NSURLFileResourceType
        name: '#{g[0]}'
        type: NSString
    NSURL(FileSize|FileAllocatedSize|IsAliasFile|TotalFileAllocatedSize|TotalFileSize)Key:
        enum: NSURLFileProperty
        name: '#{g[0]}'
        type: NSString
        extends: NSURLProperty
    NSURLVolume(.*)Key:
        enum: NSURLVolumeProperty
        name: '#{g[0]}'
        type: NSString
        extends: NSURLProperty
    NSURL(IsUbiquitousItem)Key:
        enum: NSURLUbiquitousItemProperty
        name: '#{g[0]}'
        type: NSString
        extends: NSURLProperty
    NSURLUbiquitousItem(.*)Key:
        enum: NSURLUbiquitousItemProperty
        name: '#{g[0]}'
        type: NSString
        extends: NSURLProperty
    NSURLUbiquitousItemDownloadingStatus(.*):
        enum: NSURLUbiquitousItemDownloadingStatus
        name: '#{g[0]}'
        type: NSString
    NSURLUbiquitousSharedItem(.*):
        enum: NSURLUbiquitousSharedItem
        name: '#{g[0]}'
        type: NSString
    NSMetadataUbiquitousSharedItem(.*):
        enum: NSMetadataUbiquitousSharedItem
        name: '#{g[0]}'
        type: NSString
    NSURL(.*)Key:
        enum: NSURLFileSystemProperty
        name: '#{g[0]}'
        type: NSString
        extends: NSURLProperty
    NSURLAuthenticationMethod(.*):
        enum: NSURLAuthenticationMethod
        name: '#{g[0]}'
        type: NSString
    NSURLFileProtection(.*):
        enum: NSURLFileProtection
        name: '#{g[0]}'
        type: NSString
    NSURLProtectionSpace(.*)Proxy:
        enum: NSURLProtectionSpaceProxyType
        name: '#{g[0]}'
        type: NSString
    NSURLProtectionSpace(.*):
        enum: NSURLProtectionSpaceProtocol
        name: '#{g[0]}'
        type: NSString
    NSURL(.*)Scheme:
        enum: NSURLScheme
        name: '#{g[0]}'
        type: NSString
    NSThumbnail(1024x1024)SizeKey:
        dictionary: NSURLThumbnail
        name: 'Size#{g[0]}'
        type: NSString
        methods:
            Size1024x1024:
                type: UIImage
                annotations: ['@WeaklyLinked']

    # NSURLCredentialStorage
    NSURLCredentialStorage(RemoveSynchronizableCredentials):
        dictionary: NSURLCredentialStorageRemovalOptions
        name: '#{g[0]}'
        type: NSString
        methods:
            RemoveSynchronizableCredentials:
                name: shouldRemoveSynchronizableCredentials
                type: boolean
    NSURLCredentialStorage(ChangedNotification):
        class: NSURLCredentialStorage
        name: '#{g[0]}'
        type: NSString

    # NSURLSession
    NSURLSession(TransferSizeUnknown):
        class: NSURLSession
        name: 'get#{g[0]}'
    NSURLSessionTaskPriority(.*):
        class: NSURLSessionTaskPriority
        name: '#{g[0]}'

    # NSUserActivity
    NSUserActivityType(.*):
        enum: NSUserActivityType
        name: '#{g[0]}'
        type: NSString

    # NSUserDefaults
    NSUbiquitousUserDefaults(.*Notification):
        class: NSUserDefaults
        name: '#{g[0]}'
        type: NSString
    NSUserDefaults(.*Notification):
        class: NSUserDefaults
        name: '#{g[0]}'
        type: NSString
    NS(Global|Argument|Registration)Domain:
        enum: NSUserDefaultsDomain
        name: '#{g[0]}'
        type: NSString

    # NSValueTransformer
    NS(.*)TransformerName:
        enum: NSValueTransformerName
        name: '#{g[0]}'
        type: NSString

    # NSAttributedStringKey
    NS(InlinePresentationIntent|AlternateDescription|ImageURL|LanguageIdentifier)AttributeName:
        class: NSAttributedString
        static_class: KeysNSBundle
        name: '#{g[0]}'
    NSInflection(.*)AttributeName:
        class: NSAttributedString
        static_class: KeysInflection
        name: '#{g[0]}'
    NS(ReplacementIndex|Morphology|PresentationIntent|MarkdownSourcePosition)AttributeName:
        class: NSAttributedString
        static_class: Keys
        name: '#{g[0]}'

    # NSAttributedStringFormattingContextKey
    NS(InflectionConcepts)Key:
        class: NSAttributedString
        static_class: FormattingContextKeys
        name: '#{g[0]}'

    # Foundation
    NSFoundationVersionNumber:
        class: FoundationVersionNumber
        name: 'getVersion'
        readonly: true

    NSNotFound:
        exclude: true

    # exclude exposed low level NSTable globals as it has little meaning for RoboVM
    NS(.*)HashCallBacks:
        exclude: true
    NS(.*)MapKeyCallBacks:
        exclude: true
    NS(.*)MapValueCallBacks:
        exclude: true

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?NS.*):
        class: Foundation
        readonly: true
        name: 'Value__#{g[0]}'

constants:
    # Garbage
    NSEC_PER_.*|NSIG|NSINTEGER_DEFINED|NS_BLOCKS_AVAILABLE|NS_UNICHAR_IS_EIGHT_BIT:
        exclude: true
    # These are not constant but depend on the CPU (32-bit / 64-bit)
    NSU?IntegerMax:
        exclude: true
    # ByteOrder constants depend on the host
    NS_UnknownByteOrder|NS_LittleEndian|NS_BigEndian:
        exclude: true

    NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER:
        exclude: true

    NSTextCheckingAll.*Types:
        exclude: true
    # Deprecated
    NSUndefinedDateComponent: { exclude: true }
    NSWrapCalendarComponents: { exclude: true }

    # Unused
    NSNotFound: { exclude: true }
    NSDecimal.*: { exclude: true }

    NSFoundationVersionNumber(.*):
        class: FoundationVersionNumber
        name: 'Version#{g[0]}'
    NSFoundationVersion(WithFileManagerResourceForkSupport):
        class: FoundationVersionNumber
        name: 'Version#{g[0]}'

    NS(OpenStepUnicodeReservedBase):
        class: NSCharacterSet
        name: '#{g[0]}'

    NS(TimeIntervalSince1970):
        class: NSDate
        name: '#{g[0]}'

    NSDateComponentUndefined:
        class: NSDateComponents
        name: 'UndefinedComponent'

    NSOperationQueue(DefaultMaxConcurrentOperationCount):
        class: NSOperationQueue
        name: '#{g[0]}'

    NSUndo(CloseGroupingRunLoopOrdering):
        class: NSUndoManager
        name: '#{g[0]}'

    NSURLResponse(UnknownLength):
        class: NSURLResponse
        name: '#{g[0]}'

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?NS.*):
        class: Foundation
        name: 'Constant__#{g[0]}'