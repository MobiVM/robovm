package: org.robovm.apple.dispatch
library: System
default_class: Dispatch
header: /usr/include/dispatch/dispatch.h
path_match: ^.*/usr/include/dispatch/.*$
force_types: [timespec]
typedefs:
    _NSZone: void
    'Protocol *': ObjCProtocol
    dispatch_queue_t: DispatchQueue
    dispatch_workloop_t: DispatchWorkloop
enums:
    dispatch_autorelease_frequency_t: {name: AutoreleaseFrequency, prefix: DISPATCH_AUTORELEASE_FREQUENCY_}
    dispatch_block_flags_t: {name: DispatchBlockFlags, prefix: DISPATCH_BLOCK_, bits: true}

classes:
    timespec:
        visibility: ''
    dispatch_io_s:
        name: DispatchIO
        extends: DispatchObject
    dispatch_object_s:
        name: DispatchObject
    dispatch_object_t:
        name: DispatchObject
        exclude: true
    (dispatch_(data|group|queue|queue_attr|semaphore|source|source_type))_s:
        name: '#{g[0].camelize}'
        extends: DispatchObject
    DispatchWorkloop:
        extends: DispatchQueue
    Dispatch:
        extends: Object

functions:
    dispatch_(barrier_)?a?sync_f:
        exclude: true
    dispatch_after_f:
        exclude: true
    dispatch_apply_f:
        exclude: true
    dispatch_once_f:
        exclude: true
    dispatch_source_set_(event|cancel|registration)_handler_f:
        exclude: true
    dispatch_group_(async|notify)_f:
        exclude: true
    dispatch_(get|set)_context:
        exclude: true
    dispatch_set_finalizer_f:
        exclude: true
    dispatch_(wait|notify|cancel|testcancel):
        exclude: true

    # DispatchBlock
    dispatch_block_wait:
        class: DispatchBlock
        name: blockWait
    dispatch_block_(.*):
        class: DispatchBlock
        name: '#{g[0].camelize}'

    # DispatchQueue
    dispatch_queue_attr_make_with_qos_class:
        exclude: true
    dispatch_queue_get_qos_class:
        exclude: true
    dispatch_((barrier_)?a?sync.*):
        class: DispatchQueue
        name: '#{g[0].camelize}'
    dispatch_((apply|after).*):
        class: DispatchQueue
        name: '#{g[0].camelize}'
        visibility: private
    dispatch_(get.*queue):
        class: DispatchQueue
        name: '#{g[0].camelize}'
    dispatch_queue_(create|create_with_target):
        class: DispatchQueue
        name: '#{g[0].camelize}'
        parameters:
            label:
                type: String
                marshaler: StringMarshalers.AsUtf8ZMarshaler
    dispatch_queue_(get_label):
        class: DispatchQueue
        name: '#{g[0].camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsUtf8ZMarshaler
    dispatch_queue_(.*):
        class: DispatchQueue
        name: '#{g[0].camelize}'
    dispatch_(assert_.*):
        class: DispatchQueue
        name: '#{g[0].camelize}'
    dispatch_barrier_async_and_wait_f:
        exclude: true
    dispatch_queue_(get|set)_specific:
        class: DispatchQueue
        name: '#{g[0].camelize}Specific'
    dispatch_get_specific:
        class: DispatchQueue
        name: 'getCurrentSpecific'
    dispatch_get_current_queue:
        class: DispatchQueue
        name: 'getCurrent'

    # DispatchData
    dispatch_data_(.*):
        class: DispatchData
        name: '#{g[0].camelize}'

    # DispatchGroup
    dispatch_group_wait:
        class: DispatchGroup
        name: await
    dispatch_group_(.*):
        class: DispatchGroup
        name: '#{g[0].camelize}'

    # DispatchIO
    dispatch_io_(create)_with_path:
        class: DispatchIO
        name: '#{g[0].camelize}'
        parameters:
            path:
                type: String
                marshaler: StringMarshalers.AsUtf8ZMarshaler
    dispatch_io_(create)_with_io:
        class: DispatchIO
        name: '#{g[0].camelize}'
    dispatch_io_(.*):
        class: DispatchIO
        name: '#{g[0].camelize}'

    # DispatchSemaphore
    dispatch_semaphore_wait:
        class: DispatchSemaphore
        name: await
    dispatch_semaphore_(.*):
        class: DispatchSemaphore
        name: '#{g[0].camelize}'

    # DispatchSource
    dispatch_source_get_handle:
        class: DispatchSource
        name: getSourceHandle
    dispatch_source_testcancel:
        class: DispatchSource
        name: testCancel
    dispatch_source_(.*):
        class: DispatchSource
        name: '#{g[0].camelize}'

    # DispatchWorkloop
    dispatch_workloop_set_os_workgroup:
        exclude: true
    dispatch_workloop_(create|create_inactive):
        class: DispatchWorkloop
        name: '#{g[0].camelize}'
        parameters:
            label:
                type: String
                marshaler: StringMarshalers.AsUtf8ZMarshaler
    dispatch_workloop_(.*):
        class: DispatchWorkloop
        name: '#{g[0].camelize}'

    # DispatchObject
    dispatch_(retain|release|(get|set)_context|set_finalizer_f|suspend|resume|set_target_queue):
        class: DispatchObject
        name: '#{g[0].camelize}'
        parameters:
            object:
                type: DispatchObject

    # Dispatch
    dispatch_(.*time):
        class: Dispatch
        name: '#{g[0].camelize}'
        visibility: protected
    dispatch_(once):
        class: Dispatch
        name: '#{g[0].camelize}'
        visibility: protected
    dispatch_(.*):
        class: Dispatch
        name: '#{g[0].camelize}'
values:
    # DispatchSourceType
    _dispatch_source_type_memorypressure:
        class: DispatchSourceType
        type: DispatchSourceType
        name: MemoryPressure
        dereference: false
    _dispatch_source_type_(.*):
        class: DispatchSourceType
        type: DispatchSourceType
        name: '#{g[0].camelize}'
        dereference: false

    # DispatchQueue
    _dispatch_main_q:
        class: DispatchQueue
        type: DispatchQueue
        name: getMainQueue
        readonly: true
        dereference: false

    # DispatchQueueAttr
    _dispatch_queue_attr_concurrent:
        class: DispatchQueueAttr
        type: DispatchQueueAttr
        name: Concurrent
        readonly: true
        dereference: false

    # DispatchData
    _dispatch_data_(empty):
        class: DispatchData
        type: DispatchData
        name: '#{g[0].camelize}'
        readonly: true
        dereference: false
    _dispatch_data_(.*):
        class: DispatchData
        type: DispatchData
        name: '#{g[0].camelize}'
        readonly: true
        dereference: false

    # Dispatch
    dispatch_(.*):
        class: Dispatch
constants:
    DISPATCH_QUEUE_(.*):
        class: DispatchQueue
        name: '#{g[0]}'
    DISPATCH_((PROC|VNODE|MACH|MEMORYPRESSURE|TIMER).*):
        class: DispatchSource
        name: '#{g[0]}'
    DISPATCH_IO_(.*):
        class: DispatchIO
        name: '#{g[0]}'
    DISPATCH_(TIME.*):
        class: Dispatch
        name: '#{g[0]}'
        visibility: protected
    DISPATCH_BLOCK_.*:
        exclude: true
    DISPATCH_(.*):
        class: Dispatch
        name: '#{g[0]}'
