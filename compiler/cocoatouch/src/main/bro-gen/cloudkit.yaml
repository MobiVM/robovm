package: org.robovm.apple.cloudkit
include: [foundation.yaml, corelocation.yaml, contacts.yaml, fileprovider.yaml]
library: CloudKit
framework: CloudKit
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/CloudKit.framework/Headers/CloudKit.h
typedefs:
    'void (^)(CKAccountStatus, NSError *)': '@Block VoidBlock2<CKAccountStatus, NSError>'
    'void (^)(CKRecordID *, NSError *)': '@Block VoidBlock2<CKRecordID, NSError>'
    'void (^)(CKDiscoveredUserInfo *, NSError *)': '@Block VoidBlock2<CKDiscoveredUserInfo, NSError>'
    'void (^)(CKRecord *, NSError *)': '@Block VoidBlock2<CKRecord, NSError>'
    'void (^)(CKRecordZone *, NSError *)': '@Block VoidBlock2<CKRecordZone, NSError>'
    'void (^)(CKRecordZoneID *, NSError *)': '@Block VoidBlock2<CKRecordZoneID, NSError>'
    'void (^)(CKSubscription *, NSError *)': '@Block VoidBlock2<CKSubscription, NSError>'
    'void (^)(CKNotification *)': '@Block VoidBlock1<CKNotification>'
    'void (^)(CKServerChangeToken *, NSError *)': '@Block VoidBlock2<CKServerChangeToken, NSError>'
    'void (^)(CKRecord *)': '@Block VoidBlock1<CKRecord>'
    'void (^)(CKRecordID *)': '@Block VoidBlock1<CKRecordID>'
    'void (^)(CKServerChangeToken *, NSData *, NSError *)': '@Block VoidBlock3<CKServerChangeToken, NSData, NSError>'
    'void (^)(CKRecordID *, double)': '@Block VoidBlock2<CKRecordID, Double>'
    'void (^)(CKRecord *, CKRecordID *, NSError *)': '@Block VoidBlock3<CKRecord, CKRecordID, NSError>'
    'void (^)(CKRecord *, double)': '@Block VoidBlock2<CKRecord, Double>'
    'void (^)(CKQueryCursor *, NSError *)': '@Block VoidBlock2<CKQueryCursor, NSError>'

enums:
    CKAccountStatus: {}
    CKApplicationPermissions: { prefix: CKApplicationPermission }
    CKApplicationPermissionStatus: {}
    CKErrorCode: {}
    CKNotificationType: {}
    CKQueryNotificationReason: {}
    CKRecordZoneCapabilities: {}
    CKReferenceAction: {}
    CKSubscriptionType: {}
    CKSubscriptionOptions: { prefix: CKSubscriptionOptionsFires }
    CKRecordSavePolicy: {}
    CKDatabaseScope: {}
    CKShareParticipantAcceptanceStatus: {}
    CKShareParticipantPermission: {}
    CKShareParticipantType: {}
    CKQuerySubscriptionOptions: { prefix: CKQuerySubscriptionOptions}
    CKOperationGroupTransferSize: {} #since 11.0
    CKShareParticipantRole: {} #since 12.0
classes:
    CKError:
        extends: NSError
        annotations: ['@StronglyLinked']

    CKAsset: # DONE
        methods:
            '-init':
                exclude: true
            '-init.*':
                name: init
    CKContainer: # DONE
        methods:
            '-addOperation:':
                trim_after_first_colon: true
            '+defaultContainer':
                property: true
            '+containerWithIdentifier:':
                name: create
                constructor: true
            '-accountStatusWithCompletionHandler:':
                name: getAccountStatus
            '-statusForApplicationPermission:completionHandler:':
                name: getStatusForApplicationPermission
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<CKApplicationPermissionStatus, NSError>'
            '-requestApplicationPermission:completionHandler:':
                trim_after_first_colon: true
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<CKApplicationPermissionStatus, NSError>'
            '-fetchUserRecordIDWithCompletionHandler:':
                name: fetchUserRecordID
            '-discoverAllContactUserInfosWithCompletionHandler:':
                name: discoverAllContactUserInfos
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<NSArray<CKDiscoveredUserInfo>, NSError>'
            '-discoverUserInfo.*':
                name: discoverUserInfo
            '-discoverUserIdentity.*':
                trim_after_first_colon: true
            '-fetchShareParticipant.*':
                trim_after_first_colon: true
            '-fetchShareMetadata.*':
                name: fetchShareMetadata
            '-acceptShareMetadata:completionHandler:':
                name: acceptShareMetadata
            '-fetchAllLongLivedOperationIDsWithCompletionHandler:':
                name: fetchAllLongLivedOperationIDs
            '-fetchLongLivedOperationWithID:completionHandler:':
                name: fetchLongLivedOperation
            '-databaseWithDatabaseScope:':
                name: getDatanase
            '-discoverAllIdentitiesWithCompletionHandler:':
                name: discoverAllIdentities
    CKDatabase: # DONE
        methods:
            '-addOperation:':
                trim_after_first_colon: true
            '-fetchRecordWithID:completionHandler:':
                name: fetchRecord
            '-saveRecord:completionHandler:':
                trim_after_first_colon: true
            '-deleteRecordWithID:completionHandler:':
                name: deleteRecord
            '-performQuery:inZoneWithID:completionHandler:':
                trim_after_first_colon: true
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<NSArray<CKRecord>, NSError>'
            '-fetchAllRecordZonesWithCompletionHandler:':
                name: fetchAllRecordZones
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<NSArray<CKRecordZone>, NSError>'
            '-fetchRecordZoneWithID:completionHandler:':
                name: fetchRecordZone
            '-saveRecordZone:completionHandler:':
                trim_after_first_colon: true
            '-deleteRecordZoneWithID:completionHandler:':
                name: deleteRecordZone
            '-fetchSubscriptionWithID:completionHandler:':
                name: fetchSubscription
            '-fetchAllSubscriptionsWithCompletionHandler:':
                name: fetchAllSubscriptions
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<NSArray<CKSubscription>, NSError>'
            '-saveSubscription:completionHandler:':
                trim_after_first_colon: true
            '-deleteSubscriptionWithID:completionHandler:':
                name: deleteSubscription
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<String, NSError>'
    CKDiscoveredUserInfo: # DONE
        methods:
            '-init':
                exclude: true
    CKNotification: # DONE
        properties:
            'alertLocalizationArgs':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '+notificationFromRemoteNotificationDictionary:':
                name: create
                constructor: true
                parameters:
                    notificationDictionary:
                        type: org.robovm.apple.uikit.UIRemoteNotification
    CKQueryNotification: # DONE
        properties:
            'recordFields':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSDictionary.AsStringMapMarshaler.class) Map<String, NSObject>'
    CKRecordZoneNotification: {} # DONE
    CKNotificationID: {} # DONE
    CKNotificationInfo: # DONE
        properties:
            'alertLocalizationArgs':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'desiredKeys':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
    CKQuery: # DONE
        properties:
            'sortDescriptors':
                type: NSArray<NSSortDescriptor>
        methods:
            '-init':
                exclude: true
            '-init.*':
                name: init
    CKQueryCursor: # DONE
        methods:
            '-init':
                exclude: true
    CKRecord: # DONE
        methods:
            '-init':
                exclude: true
            '-init.*':
                name: init
            '-encodeSystemFieldsWithCoder:':
                name: encodeSystemFields
    CKRecordID: # DONE
        methods:
            '-init':
                exclude: true
            '-init.*':
                name: init
    CKRecordZone: # DONE
        methods:
            '-init':
                exclude: true
            '-init.*':
                name: init
            '+defaultRecordZone':
                property: true
    CKRecordZoneID: # DONE
        methods:
            '-init':
                exclude: true
            '-init.*':
                name: init
    CKReference: # DONE
        methods:
            '-init':
                exclude: true
            '-init.*':
                name: init
    CKServerChangeToken: # DONE
        methods:
            '-init':
                exclude: true
    CKSubscription: # DONE
        methods:
            '-init':
                exclude: true
            '-init.*':
                name: init
    CKRecordZoneSubscription:
        methods:
            '-init.*':
                name: init
    CKDatabaseSubscription:
        methods:
            '-init.*':
                name: init
            '+new':
                exclude: true
    CKOperation: {} # DONE
    CKDatabaseOperation: {} # DONE
    CKFetchRecordChangesOperation: # DONE
        properties:
            'desiredKeys':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-init.*':
                name: init
    CKFetchRecordsOperation: # DONE
        properties:
            'recordIDs':
                type: NSArray<CKRecordID>
            'desiredKeys':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'fetchRecordsCompletionBlock':
                type: '@Block VoidBlock2<NSDictionary<CKRecordID, CKRecord>, NSError>'
        methods:
            '-initWithRecordIDs:':
                name: init
                parameters:
                    recordIDs:
                        type: NSArray<CKRecordID>
            '+fetchCurrentUserRecordOperation':
                name: createFetchCurrentUserRecordOperation
    CKFetchRecordZonesOperation: # DONE
        properties:
            'recordZoneIDs':
                type: NSArray<CKRecordZoneID>
            'fetchRecordZonesCompletionBlock':
                type: '@Block VoidBlock2<NSDictionary<CKRecordZoneID, CKRecordZone>, NSError>'
        methods:
            '-initWithRecordZoneIDs:':
                name: init
                parameters:
                    zoneIDs:
                        type: NSArray<CKRecordZoneID>
            '+fetchAllRecordZonesOperation':
                name: createFetchAllRecordZonesOperation
    CKFetchSubscriptionsOperation: # DONE
        properties:
            'subscriptionIDs':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'fetchSubscriptionCompletionBlock':
                type: '@Block VoidBlock2<NSDictionary<NSString, CKSubscription>, NSError>' # TODO asStringMapMarshaler
        methods:
            '-initWithSubscriptionIDs:':
                name: init
                parameters:
                    subscriptionIDs:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '+fetchAllSubscriptionsOperation':
                name: createFetchAllSubscriptionsOperation
    CKModifyRecordsOperation: # DONE
        properties:
            'recordsToSave':
                type: NSArray<CKRecord>
            'recordIDsToDelete':
                type: NSArray<CKRecordID>
            'modifyRecordsCompletionBlock':
                type: '@Block VoidBlock3<NSArray<CKRecord>, NSArray<CKRecordID>, NSError>'
        methods:
            '-initWithRecordsToSave:recordIDsToDelete:':
                name: init
                parameters:
                    records:
                        type: NSArray<CKRecord>
                    recordIDs:
                        type: NSArray<CKRecordID>
    CKModifyRecordZonesOperation: # DONE
        properties:
            'recordZonesToSave':
                type: NSArray<CKRecordZone>
            'recordZoneIDsToDelete':
                type: NSArray<CKRecordZoneID>
            'modifyRecordZonesCompletionBlock':
                type: '@Block VoidBlock3<NSArray<CKRecordZone>, NSArray<CKRecordZoneID>, NSError>'
        methods:
            '-initWithRecordZonesToSave:recordZoneIDsToDelete:':
                name: init
                parameters:
                    recordZonesToSave:
                        type: NSArray<CKRecordZone>
                    recordZoneIDsToDelete:
                        type: NSArray<CKRecordZoneID>
    CKModifySubscriptionsOperation: # DONE
        properties:
            'subscriptionsToSave':
                type: NSArray<CKSubscription>
            'subscriptionIDsToDelete':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'modifySubscriptionsCompletionBlock':
                type: '@Block VoidBlock3<NSArray<CKSubscription>, NSArray<NSString>, NSError>' # TODO asStringListMarshaler
        methods:
            '-initWithSubscriptionsToSave:subscriptionIDsToDelete:':
                name: init
                parameters:
                    subscriptionsToSave:
                        type: NSArray<CKSubscription>
                    subscriptionIDsToDelete:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
    CKQueryOperation: # DONE
        properties:
            'desiredKeys':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-init.*':
                name: init
    CKDiscoverAllContactsOperation: # DONE
        properties:
            'discoverAllContactsCompletionBlock':
                type: '@Block VoidBlock2<NSArray<CKDiscoveredUserInfo>, NSError>'
    CKDiscoverUserInfosOperation: # DONE
        properties:
            'emailAddresses':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'userRecordIDs':
                type: NSArray<CKRecordID>
            'discoverUserInfosCompletionBlock':
                type: '@Block VoidBlock3<NSDictionary<NSString, CKDiscoveredUserInfo>, NSDictionary<CKRecordID, CKDiscoveredUserInfo>, NSError>' # TODO asStringMapMarshaler
        methods:
            '-initWithEmailAddresses:userRecordIDs:':
                name: init
                parameters:
                    emailAddresses:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
                    userRecordIDs:
                        type: NSArray<CKRecordID>
    CKFetchNotificationChangesOperation: # DONE
        methods:
            '-init.*':
                name: init
    CKMarkNotificationsReadOperation: # DONE
        properties:
            'notificationIDs':
                type: NSArray<CKNotificationID>
            'markNotificationsReadCompletionBlock':
                type: '@Block VoidBlock2<NSArray<CKNotificationID>, NSError>'
        methods:
            '-initWithNotificationIDsToMarkRead:':
                name: init
                parameters:
                    notificationIDs:
                        type: NSArray<CKNotificationID>
    CKModifyBadgeOperation: # DONE
        methods:
            '-init.*':
                name: init
    CKLocationSortDescriptor: # DONE
        properties:
            'relativeLocation':
                annotations: ['@WeaklyLinked']
        methods:
            '-initWithKey:relativeLocation:':
                name: init
                annotations: ['@WeaklyLinked']
            '-init.*':
                name: init
    CKShare:
        methods:
            '-init.*':
                name: init
    CKUserIdentity: {}
    CKShareParticipant: {}
    CKShareMetadata: {}
    CKUserIdentityLookupInfo:
        methods:
            '-initWithEmailAddress:':
                name: initWithEmailAddress
                static_constructor_name: createWithEmailAddress
            '-initWithPhoneNumber:':
                name: initWithPhoneNumber
                static_constructor_name: createWithPhoneNumber
            '-initWithUserRecordID:':
                name: init
            '+lookupInfosWithEmails:':
                name: lookupInfosWithEmails
            '+lookupInfosWithPhoneNumbers:':
                name: lookupInfosWithPhoneNumbers
            '+lookupInfosWithRecordIDs:':
                name: lookupInfosWithRecordIDs
    CKAcceptSharesOperation:
        methods:
            '-initWithShareMetadatas:':
                name: init
    CKDatabaseNotification: {}
    CKDiscoverAllUserIdentitiesOperation: {}
    CKDiscoverUserIdentitiesOperation:
        methods:
            '-initWithUserIdentityLookupInfos:':
                name: init
    CKFetchDatabaseChangesOperation: #since 10.0
        methods:
            '-initWithPreviousServerChangeToken:':
                name: init
    CKFetchRecordZoneChangesOperation:
        methods:
            '-initWithRecordZoneIDs:configurationsByRecordZoneID:':
                name: init0
                static_constructor_name: create
            '-initWithRecordZoneIDs:optionsByRecordZoneID:':
                name: init
    CKFetchRecordZoneChangesOptions: {}
    CKFetchShareMetadataOperation:
        methods:
            '-initWithShareURLs:':
                name: init
    CKFetchShareParticipantsOperation:
        methods:
            '-initWithUserIdentityLookupInfos:':
                name: init
    CKFetchWebAuthTokenOperation:
        methods:
            '-initWithAPIToken:':
                name: init
    CKOperationConfiguration: {} #since 11.0
    CKOperationGroup: {} #since 11.0
    CKQuerySubscription: #since 10.0
        methods:
            '-init.*':
                name: init
    CKFetchRecordZoneChangesConfiguration: {} #since 12.0

protocols:
    CKRecordValue: # DONE
        adapter: false
    # dkimitsa: that is very special configuration for this protocol
    # * exclude -- affects only if this protocol to be exported to java file or not. Doesn't affect it usage
    # * introduced `skip_implements` -- this protocol will not be declared in 'implements' sections
    #   but all its method will be included in class (sometime this is needed like in CKRecord case
    #   when some methods of protocol have to be protected)
    CKRecordKeyValueSetting: #since 9.0
        skip_adapter: true
        methods:
            '-objectForKey:':
                name: get
                return_type: NSObject
            '-setObject:forKey:':
                name: put
                parameters:
                    object:
                        type: NSObject # We don't use CKRecordValue here because we don't want to make several Foundation objects implement the CKRecordValue interface.
            '-setObject:forKeyedSubscript:':
                name: setObjectForKeyedSubscript
            '-(allKeys|changedKeys)':
                property: true
                return_type: List<String>
                return_marshaler: NSArray.AsStringListMarshaler

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?CK.*):
        class: CloudKit
        name: 'Function__#{g[0]}'

values:
    CKErrorDomain:
        class: CKError
        name: getClassDomain

    CK(PartialErrorsByItemID)Key:
        enum: CKErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    CKError(RetryAfter)Key:
        enum: CKErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    CKRecordChangedError(.*)Key:
        enum: CKErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey

    # CKContainer
    CKOwnerDefaultName:
        class: CKContainer
        name: getDefaultOwnerName
    CKCurrentUserDefaultName:
        class: CKContainer
        name: getDefaultCurrentUserName
    CK(AccountChangedNotification):
        class: CKContainer
        name: '#{g[0]}'
        type: NSString

    # CKQueryOperation
    CKQueryOperation(MaximumResults):
        class: CKQueryOperation
        name: 'get#{g[0]}'

    # CKRecord
    CKRecordType(.*)Record:
        class: CKRecordType
        name: '#{g[0]}'

    # CKRecord
    CKRecordType(.*):
        class: CKRecordType
        name: '#{g[0]}'

    # CKRecord
    CKRecord(.*)Key:
        class: CKRecord
        name: '#{g[0]}Key'

    # CKRecordZone
    CKRecordZone(DefaultName):
        class: CKRecordZone
        name: 'get#{g[0]}'

    # CKShare
    CKShare(.*)Key:
        class: CKShare
        name: '#{g[0]}Key'

    CKErrorUserDidResetEncryptedDataKey:
        class: CKError
        name: getUserDidResetEncryptedDataKey
    CKRecordNameZoneWideShare:
        class: CKShare
        name: getRecordNameZoneWideShare

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?CK.*):
        class: CloudKit
        name: 'Value__#{g[0]}'

constants:
    CK_SWIFT_AVAILABILITY:
        exclude: true
    CK_SWIFT_DEPRECATED:
        exclude: true

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?CK.*):
        class: CloudKit
        name: 'Constant__#{g[0]}'
