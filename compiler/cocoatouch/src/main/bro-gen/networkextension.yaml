package: org.robovm.apple.networkextension
include: [foundation, security, network]
library: NetworkExtension
framework: NetworkExtension
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/NetworkExtension.framework/Headers/NetworkExtension.h
typedefs: {}
    
enums:
    NEVPNError: { name: NEVPNErrorCode, prefix: NEVPNError }
    NEVPNStatus: {}
    NEVPNIKEAuthenticationMethod: {}
    NEVPNIKEv2CertificateType: {}
    NEVPNIKEv2EncryptionAlgorithm: {}
    NEVPNIKEv2IntegrityAlgorithm: {}
    NEVPNIKEv2DeadPeerDetectionRate: {}
    NEVPNIKEv2DiffieHellmanGroup: { prefix: NEVPNIKEv2DiffieHellman}
    NEOnDemandRuleAction: {}
    NEOnDemandRuleInterfaceType: {}
    NEEvaluateConnectionRuleAction: {}

    NEAppProxyFlowError: {}
    NEProviderStopReason: {}
    NETunnelProviderError: {}
    NETunnelProviderRoutingMethod: {}
    NEFilterManagerError: {}
    NEHotspotHelperCommandType: {}
    NEHotspotHelperResult: {}
    NEHotspotHelperConfidence: {}
    NWTCPConnectionState: {}
    NWUDPSessionState: {}
    NWPathStatus: {}

    NEDNSProxyManagerError: { nserror: true } #since 11.0
    NEFilterAction: {} #since 11.0
    NEHotspotConfigurationEAPType: {} #since 11.0
    NEHotspotConfigurationTTLSInnerAuthenticationType: {prefix: NEHotspotConfigurationEAPTTLSInnerAuthentication} #since 11.0
    NEHotspotConfigurationEAPTLSVersion: {prefix: NEHotspotConfigurationEAPTLS} #since 11.0
    NEHotspotConfigurationError: {nserror: true} #since 11.0
    NEVPNIKEv2TLSVersion: {} #since 11.0

    NETrafficDirection: {} #since 13.0
    NEFilterReportEvent: {} #since 13.0

    NEDNSProtocol: {} #since 14.0
    NEDNSSettingsManagerError: {nserror: true} #since 14.0
    NEAppPushManagerError: {nserror: true} #since 14.0
    NEHotspotNetworkSecurityType: {} #since 15.0

    NEVPNConnectionError: {nserror: true} #since 16.0
    NERelayManagerError: {nserror: true} #since 17.0
classes:
    NEProvider:
        methods:
            '-createTCPConnectionToEndpoint:enableTLS:TLSParameters:delegate:':
                name: createTCPConnection
            '-createUDPSessionToEndpoint:fromEndpoint:':
                name: createUDPSession
            '-displayMessage:completionHandler:':
                name: displayMessage
            '-sleepWithCompletionHandler:':
                name: sleep
    NETunnelProvider:
        methods:
            '-handleAppMessage:completionHandler:':
                trim_after_first_colon: true
            '-setTunnelNetworkSettings:completionHandler:':
                trim_after_first_colon: true
    NETunnelNetworkSettings: #since 9.0
        methods:
            '-initWithTunnelRemoteAddress:':
                name: init
    NEAppRule: #since 9.0
        methods:
            '-initWithSigningIdentifier:':
                name: init
    NEFilterFlow: {}
    NEFilterBrowserFlow: {}
    NEFilterSocketFlow: {}
    NEFilterProvider:
        methods:
            '-startFilterWithCompletionHandler:':
                name: startFilter
            '-stopFilterWithReason:completionHandler:':
                name: stopFilter
            '-updateFlow:withVerdict:forDirection:':
                name: updateFlow
    NEFilterDataProvider:
        methods:
            '-handleInboundDataFromFlow:readBytesStartOffset:readBytes:':
                name: handleInboundData
            '-handleOutboundDataFromFlow:readBytesStartOffset:readBytes:':
                name: handleOutboundData
    NEFilterDataVerdict:
        methods:
            '+remediateVerdictWithRemediationURLMapKey:remediationButtonTextMapKey:':
                name: remediateVerdict
            '+dataVerdictWithPassBytes:peekBytes:':
                name: dataVerdict
    NEFilterVerdict: {}
    NEFilterNewFlowVerdict:
        methods:
            '+remediateVerdictWithRemediationURLMapKey:remediationButtonTextMapKey:':
                name: remediateVerdict
            '+URLAppendStringVerdictWithMapKey:':
                name: URLAppendStringVerdict
            '+filterDataVerdictWithFilterInbound:peekInboundBytes:filterOutbound:peekOutboundBytes:':
                name: filterDataVerdict
    NEFilterControlVerdict: #since 9.0
        methods:
            '+allowVerdictWithUpdateRules:':
                name: createAllowVerdict
            '+dropVerdictWithUpdateRules:':
                name: createDropVerdict
    NEFilterRemediationVerdict: {}
    NEFilterManager: #since 8.0
        methods:
            '-loadFromPreferencesWithCompletionHandler:':
                name: loadFromPreferences
            '-removeFromPreferencesWithCompletionHandler:':
                name: removeFromPreferences
            '-saveToPreferencesWithCompletionHandler:':
                name: saveToPreferences
    NEFilterProviderConfiguration: {}
    NEHotspotNetwork:
        methods:
            '+fetchCurrentWithCompletionHandler:':
                name: fetchCurrent
    NEHotspotHelperCommand: {}
    NEHotspotHelperResponse: {}
    NEHotspotHelper:
        methods:
            '+registerWithOptions:queue:handler:':
                name: register
                parameters:
                    'queue':
                        type: org.robovm.apple.dispatch.DispatchQueue
    NWTCPConnection:
        methods:
            '-init.*':
                name: init
            '-readLength:completionHandler:':
                name: read
            '-readMinimumLength:maximumLength:completionHandler:':
                name: read
            '-write:completionHandler:':
                name: write
    NWUDPSession:
        methods:
            '-init.*':
                name: init
            '-setReadHandler:maxDatagrams:':
                trim_after_first_colon: true
            '-write.*':
                trim_after_first_colon: true
    NWPath: {}
    NWEndpoint: {}
    NWHostEndpoint:
        methods:
            '+endpointWithHostname:port:':
                name: create
    NEDNSSettings: #since 9.0
        methods:
            '-initWithServers:':
                name: init
    NWTLSParameters: {}
    NEProxyServer:
        methods:
            '-init.*':
                name: init
    NEProxySettings: {}


    NEVPNError:
        extends: NSError
        annotations: ['@StronglyLinked']

    NEOnDemandRule: # DONE
        properties:
            '(DNSSearchDomainMatch|DNSServerAddressMatch|SSIDMatch)':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
    NEOnDemandRuleConnect: {} # DONE
    NEOnDemandRuleDisconnect: {} # DONE
    NEOnDemandRuleIgnore: {} # DONE
    NEOnDemandRuleEvaluateConnection: # DONE
        properties:
            'connectionRules':
                type: NSArray<NEEvaluateConnectionRule>
    NEEvaluateConnectionRule: # DONE
        properties:
            'matchDomains':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'useDNSServers':
                name: DNSServers
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '-init.*':
                name: init
                parameters:
                    domains:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
    NEVPNConnection: # DONE
        methods:
            '-startVPNTunnelAndReturnError:':
                name: startVPNTunnel
                throws: NSErrorException
            '-startVPNTunnelWithOptions:andReturnError:':
                name: startVPNTunnel
                throws: NSErrorException
            '-fetchLastDisconnectErrorWithCompletionHandler:':
                name: fetchLastDisconnectError
    NEVPNManager: # DONE
        properties:
            'onDemandRules':
                type: NSArray<NEOnDemandRule>
        methods:
            '-loadFromPreferencesWithCompletionHandler:':
                name: loadFromPreferences
            '-removeFromPreferencesWithCompletionHandler:':
                name: removeFromPreferences
            '-saveToPreferencesWithCompletionHandler:':
                name: saveToPreferences
            '+sharedManager':
                property: true
    NEVPNProtocol: # DONE
        properties:
            'disconnectOnSleep':
                name: disconnectsOnSleep
    NEVPNProtocolIPSec: # DONE
        properties:
            'useExtendedAuthentication':
                name: usesExtendedAuthentication
    NEVPNProtocolIKEv2: {} # DONE
    NEVPNIKEv2SecurityAssociationParameters: {} # DONE

    NEAppProxyFlow:
        methods:
            '-openWithLocalEndpoint:completionHandler:':
                name: open
            '-closeReadWithError:':
                name: closeRead
            '-closeWriteWithError:':
                name: closeWrite
    NEAppProxyProvider:
        methods:
            '-startProxyWithOptions:completionHandler:':
                name: startProxy
            '-stopProxyWithReason:completionHandler:':
                name: stopProxy
            '-cancelProxyWithError:':
                name: cancelProxy
            '-handleNewUDPFlow:initialRemoteEndpoint:':
                name: handleNewUDPFlow
    NEAppProxyProviderManager:
        methods:
            '+loadAllFromPreferencesWithCompletionHandler:':
                name: loadAllProxies
    NEAppProxyTCPFlow:
        methods:
            '-readDataWithCompletionHandler:':
                name: readData
            '-writeData:withCompletionHandler:':
                name: writeData
    NEAppProxyUDPFlow:
        methods:
            '-readDatagramsWithCompletionHandler:':
                name: readDatagrams
            '-writeDatagrams:sentByEndpoints:completionHandler:':
                name: writeDatagrams
    NEFilterControlProvider:
        methods:
            '-handleRemediationForFlow:completionHandler:':
                trim_after_first_colon: true
            '-handleNewFlow:completionHandler:':
                trim_after_first_colon: true
    NEFlowMetaData: {}
    NEIPv4Route:
        methods:
            '-init.*':
                name: init
    NEIPv4Settings:
        methods:
            '-init.*':
                name: init
    NEIPv6Route:
        methods:
            '-init.*':
                name: init
    NEIPv6Settings:
        methods:
            '-init.*':
                name: init
    NEPacket:
        methods:
            '-init.*':
                name: init
    NEPacketTunnelFlow:
        methods:
            '-readPacketsWithCompletionHandler:':
                name: readPackets
            '-writePackets:withProtocols:':
                name: writePackets
            '-readPacketObjectsWithCompletionHandler:':
                name: readPacketObjects
    NEPacketTunnelNetworkSettings: {}
    NEPacketTunnelProvider:
        methods:
            '-startTunnelWithOptions:completionHandler:':
                name: startTunnel
            '-stopTunnelWithReason:completionHandler:':
                name: stopTunnel
            '-createTCPConnectionThroughTunnelToEndpoint:enableTLS:TLSParameters:delegate:':
                name: createTCPConnection
            '-createUDPSessionThroughTunnelToEndpoint:fromEndpoint:':
                name: createUDPSession
            '-cancelTunnelWithError:':
                name: cancelTunnel
    NETunnelProviderManager:
        methods:
            '+loadAllFromPreferencesWithCompletionHandler:':
                name: loadAllTunnels
    NETunnelProviderProtocol: {}
    NETunnelProviderSession:
        methods:
            '-startTunnelWithOptions:andReturnError:':
                name: startTunnel
            '-sendProviderMessage:returnError:responseHandler:':
                name: sendProviderMessage
    NWBonjourServiceEndpoint:
        methods:
            '+endpointWithName:type:domain:':
                name: create
                constructor: true
    NEDNSProxyManager: #since 11.0
        methods:
            '-loadFromPreferencesWithCompletionHandler:':
                name: loadFromPreferences
            '-removeFromPreferencesWithCompletionHandler:':
                name: removeFromPreferences
            '-saveToPreferencesWithCompletionHandler:':
                name: saveToPreferences
    NEDNSProxyProvider: #since 11.0
        methods:
            '-startProxyWithOptions:completionHandler:':
                name: startProxy
            '-stopProxyWithReason:completionHandler:':
                name: stopProxy
            '-cancelProxyWithError:':
                name: cancelProxy
            '-handleNewUDPFlow:initialRemoteEndpoint:':
                name: handleNewUDPFlow
    NEDNSProxyProviderProtocol: {} #since 11.0
    NEFilterReport: {} #since 11.0
    NEHotspotConfiguration: #since 11.0
        methods:
            '-initWithSSID:':
                name: init
            '-initWithSSID:passphrase:isWEP:':
                name: init
            '-initWithSSID:eapSettings:':
                name: init
            '-initWithHS20Settings:eapSettings:':
                name: init
            '-initWithSSIDPrefix:':
                static_constructor_name: createUsingSSID
                name: initUsingSSID
            '-initWithSSIDPrefix:passphrase:isWEP:':
                static_constructor_name: createUsingSSID
                name: initUsingSSID
    NEHotspotConfigurationManager: #since 11.0
        methods:
            '-applyConfiguration:completionHandler:':
                trim_after_first_colon: true
            '-getConfiguredSSIDsWithCompletionHandler:':
                name: getConfiguredSSIDs
    NEHotspotEAPSettings: {} #since 11.0
    NEHotspotHS20Settings: #since 11.0
        methods:
            '-initWithDomainName:roamingEnabled:':
                name: init
    NEAppPushManager: #since 14.0
        methods:
            '-loadFromPreferencesWithCompletionHandler:':
                name: loadFromPreferences
            '-removeFromPreferencesWithCompletionHandler:':
                name: removeFromPreferences
            '-saveToPreferencesWithCompletionHandler:':
                name: saveToPreferences
            '+loadAllFromPreferencesWithCompletionHandler:':
                name: loadAllFromPreferences
    NEAppPushProvider: #since 14.0
        methods:
            '-startWithCompletionHandler:':
                name: start
            '-stopWithReason:completionHandler:':
                name: stop
            '-reportIncomingCallWithUserInfo:':
                name: reportIncomingCall
            '-reportPushToTalkMessageWithUserInfo:':
                name: reportPushToTalkMessage
    NEDNSOverHTTPSSettings: {} #since 14.0
    NEDNSOverTLSSettings: {} #since 14.0
    NEDNSSettingsManager: #since 14.0
        methods:
            '-loadFromPreferencesWithCompletionHandler:':
                name: loadFromPreferences
            '-removeFromPreferencesWithCompletionHandler:':
                name: removeFromPreferences
            '-saveToPreferencesWithCompletionHandler:':
                name: saveToPreferences
    NEPrivateLTENetwork: {} #since 15.0
    NEFailureHandlerProvider: #since 17.0
        methods:
            '-handleFailure:completionHandler:':
                name: handleFailure
    NERelay: { } #since 17.0
    NERelayManager: #since 17.0
        methods:
            '-loadFromPreferencesWithCompletionHandler:':
                name: loadFromPreferences
            '-removeFromPreferencesWithCompletionHandler:':
                name: removeFromPreferences
            '-saveToPreferencesWithCompletionHandler:':
                name: saveToPreferences
            '+loadAllManagersFromPreferencesWithCompletionHandler:':
                name: loadAllManagersFromPreferences
protocols:
    NWTCPConnectionAuthenticationDelegate:
        methods:
            '-provideIdentityForConnection:completionHandler:':
                name: provideIdentityForConnection
            '-evaluateTrustForConnection:peerCertificateChain:completionHandler:':
                name: evaluateTrustForConnection
    NEAppPushDelegate: #since 14.0
        methods:
            '-appPushManager:didReceiveIncomingCallWithUserInfo:':
                name: didReceiveIncomingCall
functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?NE.*):
        class: NetworkExtension
        name: 'Function__#{g[0]}'

values:
    NEVPNErrorDomain:
        class: NEVPNError
        name: getClassDomain

    NEFilterErrorDomain:
        class: NEFilterManagerError
        name: getClassDomain

    NETunnelProviderErrorDomain:
        class: NETunnelProviderError
        name: getClassDomain

    NEDNSProxyErrorDomain:
        class: NEDNSProxyManagerError
        name: getClassDomain

    NEAppProxyErrorDomain:
        class: NEAppProxyFlowError
        name: getClassDomain

    NEHotspotConfigurationErrorDomain:
        class: NEHotspotConfigurationError
        name: getClassDomain
    NEDNSSettingsErrorDomain:
        class: NEDNSSettingsManagerError
        name: getClassDomain
    NEAppPushErrorDomain:
        class: NEAppPushManagerError
        name: getClassDomain
    NERelayErrorDomain:
        class: NERelayManagerError
        name: getClassDomain

    NERelay(ConfigurationDidChange)Notification:
        class: NERelay
        static_class: Notifications
        name: '#{g[0]}'

    NEDNSSettingsConfiguration(DidChangeNotification):
        class: NEDNSSettingsManager
        static_class: Notifications
        name: '#{g[0]}'

    # NEFilterProvider
    NEFilterProvider(RemediationMapRemediationURLs|RemediationMapRemediationButtonTexts):
        class: NEFilterProvider
        name: '#{g[0]}'

    # NEFilterManager
    NEFilter(ConfigurationDidChangeNotification):
        class: NEFilterManager
        name: '#{g[0]}'

    # NEVPNManager
    NEVPN(ConfigurationChangeNotification):
        class: NEVPNManager
        name: '#{g[0]}'
        type: NSString

    # NEVPNConnection
    NEVPN(StatusDidChangeNotification):
        class: NEVPNConnection
        name: '#{g[0]}'
        type: NSString
    NEVPNConnection(StartOptionUsername|StartOptionPassword):
        class: NEVPNConnection
    # NEHotspotHelper
    kNEHotspotHelper(OptionDisplayName):
        class: NEHotspotHelper
        name: '#{g[0]}'

    NEDNSProxyConfigurationDidChangeNotification:
        class: NEDNSProxyManager
        name: ConfigurationDidChange
    NEVPNConnectionErrorDomain:
        class: NEVPNConnectionError
        name: getClassDomain

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?NE.*):
        class: NetworkExtension
        name: 'Value__#{g[0]}'

constants:
    NEFilterProviderRemediationURL(.*):
        class: NEFilterProvider
        name: 'RemediationURL#{g[0]}'

    NEFilterFlowBytesMax:
        exclude: true

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?NE.*):
        class: NetworkExtension
        name: 'Constant__#{g[0]}'
