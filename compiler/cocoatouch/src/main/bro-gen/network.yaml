package: org.robovm.apple.network
include: [foundation, dispatch, security]
library: Network
framework: Network
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/Network.framework/Headers/Network.h

private_typedefs:
    dispatch_data_t: DispatchData
    '__CFError *': NSError

typedefs:
    nw_framer_message_t: NWFramerMessage

enums:
    nw_endpoint_type_t: {prefix: nw_endpoint_type_, name: NWEndpointType}
    nw_interface_type_t: {prefix: nw_interface_type_, name: NWInterfaceType}
    nw_service_class_t: {prefix: nw_service_class_, name: NWServiceClass}
    nw_multipath_service_t: {prefix: nw_multipath_service_, name: NWMultipathService}
    nw_parameters_expired_dns_behavior_t: {prefix: nw_parameters_expired_dns_behavior_, name: NWParametersExpiredDnsBehavior, nw_parameters_expired_dns_behavior_default: defaultBehaviour}
    nw_path_status_t: {prefix: nw_path_status_, name: NWPathStatus}
    nw_error_domain_t: {prefix: nw_error_domain_, name: NWErrorDomain}
    nw_connection_state_t: {prefix: nw_connection_state_, name: NWConnectionState}
    nw_ip_version_t: {prefix: nw_ip_version_, name: NWIpVersion}
    nw_ip_ecn_flag_t: {prefix: nw_ip_ecn_flag_, name: NWIpEcnFlag}
    nw_listener_state_t: {prefix: nw_listener_state_, name: NWListenerState}
    # ios13 activity
    nw_txt_record_find_key_t: {prefix: nw_txt_record_find_key_, name: NWTxtRecordFindKey}
    nw_browse_result_change_t: {prefix: nw_browse_result_change_, first: nw_browse_result_change_invalid, bits: true, name: NWBrowseResultChange}
    nw_browser_state_t: {prefix: nw_browser_state_, name: NWBrowseState}
    nw_report_resolution_source_t: {prefix: nw_report_resolution_source_, name: NWReportResolutionSource}
    nw_data_transfer_report_state_t: {prefix: nw_data_transfer_report_state_, name: NWDataTransferReportState}
    nw_framer_start_result_t: {prefix: nw_framer_start_result_, name: NWFramerStartResult}
    nw_ip_local_address_preference_t: {prefix: nw_ip_local_address_preference_, name: NWIpLocalAddressPreference, nw_ip_local_address_preference_default: Default}
    nw_ws_opcode_t: {prefix: nw_ws_opcode_, name: NWWsOpcode}
    nw_ws_close_code_t: {prefix: nw_ws_close_code_, name: NWWsCoseCode}
    nw_ws_version_t: {prefix: nw_ws_, name: NWWsVersion}
    nw_ws_response_status_t: {prefix: nw_ws_response_status_, name: NWWsResponseStatus}
    nw_connection_group_state_t: {prefix: nw_connection_group_state_, name: NWConnectionGroupState}
    nw_report_resolution_protocol_t: {prefix: nw_report_resolution_protocol_, name: NWReportResolutionProtocol}
    nw_path_unsatisfied_reason_t: {prefix: nw_path_unsatisfied_reason_, name: NWPathUnsatisfiedReason}
    nw_interface_radio_type_t: {prefix: nw_interface_radio_type_, name: NWInterfaceRadioType }
    nw_parameters_attribution_t: {prefix: nw_parameters_attribution_, name: NWParametersAttribution}
    nw_quic_stream_type_t: {prefix: nw_quic_stream_type_, name: NWQuicStreamType}
    nw_multipath_version_t: {prefix: nw_multipath_version_, name: NWMultipathVersion}
classes:
    NWFramerMessage:
        extends: NWProtocolMetadata
        annotations: ['@NativeClass("NSObject")']
    NWObject:
        extends: NSObject
        annotations: ['@NativeClass("NSObject")']

protocols:
    OS_nw_object:
        exclude: true

    OS_nw_advertise_descriptor:
        class: true
        name: NWAdvertiseDescriptor
        extends: NWObject
        visibility: 'public final'
    NWAdvertiseDescriptor:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_connection:
        class: true
        name: NWConnection
        extends: NWObject
        visibility: 'public final'
    NWConnection: # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_content_context:
        class: true
        name: NWContentContext
        extends: NWObject
        visibility: 'public final'
    NWContentContext:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_endpoint:
        class: true
        name: NWEndpoint
        extends: NWObject
        visibility: 'public final'
    NWEndpoint:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_error:
        class: true
        name: NWError
        extends: NWObject
        visibility: 'public final'
    NWError:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_interface:
        class: true
        name: NWInterface
        extends: NWObject
        visibility: 'public final'
    NWInterface:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_listener:
        class: true
        name: NWListener
        extends: NWObject
        visibility: 'public final'
    NWListener:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_parameters:
        class: true
        name: NWParameters
        extends: NWObject
        visibility: 'public final'
    NWParameters:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_path:
        class: true
        name: NWPath
        extends: NWObject
        visibility: 'public final'
    NWPath:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_path_monitor:
        class: true
        name: NWPathMonitor
        extends: NWObject
        visibility: 'public final'
    NWPathMonitor:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_protocol_definition:
        class: true
        name: NWProtocolDefinition
        extends: NWObject
        visibility: 'public final'
    NWProtocolDefinition:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_protocol_metadata:
        class: true
        name: NWProtocolMetadata
        extends: NWObject
        # visibility: 'public final' # commented out as NWFramerMessage is extending from it
    NWProtocolMetadata:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_protocol_options:
        class: true
        name: NWProtocolOptions
        extends: NWObject
        visibility: 'public final'
    NWProtocolOptions:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_protocol_stack:
        class: true
        name: NWProtocolStack
        extends: NWObject
        visibility: 'public final'
    NWProtocolStack:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_browse_descriptor:
        class: true
        name: NWBrowseDescriptor
        extends: NWObject
        visibility: 'public final'
    NWBrowseDescriptor:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_browse_result:
        class: true
        name: NWBrowseResult
        extends: NWObject
        visibility: 'public final'
    NWBrowseResult:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_browser:
        class: true
        name: NWBrowser
        extends: NWObject
        visibility: 'public final'
    NWBrowser:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_data_transfer_report:
        class: true
        name: NWDataTransferReport
        extends: NWObject
        visibility: 'public final'
    NWDataTransferReport:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_establishment_report:
        class: true
        name: NWEstablishmentReport
        extends: NWObject
        visibility: 'public final'
    NWEstablishmentReport:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_ethernet_channel:
        exclude: true # as available only on MacOS

    OS_nw_framer:
        class: true
        name: NWFramer
        extends: NWObject
        visibility: 'public final'
    NWFramer:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_txt_record:
        class: true
        name: NWTxtRecord
        extends: NWObject
        visibility: 'public final'
    NWTxtRecord:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_ws_request:
        class: true
        name: NWWsRequest
        extends: NWObject
        visibility: 'public final'
    NWWsRequest:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_ws_response:
        class: true
        name: NWWsResponse
        extends: NWObject
        visibility: 'public final'
    NWWsResponse:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_connection_group:
        class: true
        name: NWConnectionGroup
        extends: NWObject
        visibility: 'public final'
    NWConnectionGroup:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_group_descriptor:
        class: true
        name: NWGroupDescriptor
        extends: NWObject
        visibility: 'public final'
    NWGroupDescriptor:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_privacy_context:
        class: true
        name: NWPrivacyContext
        extends: NWObject
        visibility: 'public final'
    NWPrivacyContext:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_resolution_report:
        class: true
        name: NWResolutionReport
        extends: NWObject
        visibility: 'public final'
    NWResolutionReport:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

    OS_nw_resolver_config:
        class: true
        name: NWResolverConfig
        extends: NWObject
        visibility: 'public final'

    OS_nw_proxy_config:
        class: true
        name: NWProxyConfig
        extends: NWObject
        visibility: 'public final'

    OS_nw_relay_hop:
        class: true
        name: NWRelayHop
        extends: NWObject
        visibility: 'public final'

    NWResolverConfig:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeClass("NSObject")']

functions:
    # NWAdvertiseDescriptor
    nw_advertise_descriptor_(create_bonjour_service):
        class: NWAdvertiseDescriptor
        name: '#{g[0].downcase_first_camelize}'
        constructor: true
        parameters:
            0: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            1: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            2: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_advertise_descriptor_(get_application_service_name):
        class: NWAdvertiseDescriptor
        name: '#{g[0].downcase_first_camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_advertise_descriptor_(.*):
        class: NWAdvertiseDescriptor
        name: '#{g[0].downcase_first_camelize}'

    # NWContentContext
    nw_content_context_create:
        class: NWContentContext
        constructor: true
        name: create
        parameters:
            0: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_content_context_(get_identifier):
        class: NWContentContext
        name: '#{g[0].downcase_first_camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_content_context_get_is_final:
        class: NWContentContext
        name: isFinal
    nw_content_context_(.*):
        class: NWContentContext
        name: '#{g[0].downcase_first_camelize}'

    # NWConnection
    nw_connection_create:
        class: NWConnection
        constructor: true
        name: create
    nw_connection_copy_description:
        class: NWConnection
        name: copyDescription0
        visibility: protected
        return_type: '@Pointer long'
    nw_connection_(.*):
        class: NWConnection
        name: '#{g[0].downcase_first_camelize}'

    # TODO: don't want to bother with sockaddr
    nw_endpoint_create_address:
        exclude: true
    nw_endpoint_get_address:
        exclude: true
    nw_endpoint_(create_host):
        class: NWEndpoint
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            hostname: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            port: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_endpoint_(create_bonjour_service):
        class: NWEndpoint
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            name: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            type: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            domain: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_endpoint_(get_hostname|get_bonjour_service_name|get_bonjour_service_type|get_bonjour_service_domain|copy_port_string|copy_address_string|get_url|get_signature):
        class: NWEndpoint
        name: '#{g[0].downcase_first_camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_endpoint_(create_url):
        class: NWEndpoint
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            url: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_endpoint_(.*):
        class: NWEndpoint
        name: '#{g[0].downcase_first_camelize}'

    nw_error_(.*):
        class: NWError
        name: '#{g[0].downcase_first_camelize}'

    # NWInterface
    nw_interface_get_name:
        class: NWInterface
        name: getName
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_interface_(.*):
        class: NWInterface
        name: '#{g[0].downcase_first_camelize}'

    # NWParameters
    nw_parameters_create:
        class: NWParameters
        constructor: true
        name: create
    nw_parameters_copy:
        class: NWParameters
        name: copyParameters # otherwise it will break compiler on synthetic bridged method from NSObject
    nw_parameters_(.*):
        class: NWParameters
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            interface:
                name: inf

    nw_path_monitor_(create.*):
        class: NWPathMonitor
        constructor: true
        name: '#{g[0].downcase_first_camelize}'

    nw_path_monitor_(.*):
        class: NWPathMonitor
        name: '#{g[0].downcase_first_camelize}'

    nw_path_(.*):
        class: NWPath
        name: '#{g[0].downcase_first_camelize}'

    # NWProtocolDefinition
    nw_protocol_definition_(.*):
        class: NWProtocolDefinition
        name: '#{g[0].downcase_first_camelize}'
    nw_protocol_copy_(.*):
        class: NWProtocolDefinition
        name: 'copy#{g[0].camelize}'
    nw_framer_protocol_create_message:
        class: NWProtocolDefinition
        name: 'createFramerMessage'

    nw_protocol_metadata_(.*):
        class: NWProtocolMetadata
        name: '#{g[0].downcase_first_camelize}'

    nw_protocol_options_(.*):
        class: NWProtocolOptions
        name: '#{g[0].downcase_first_camelize}'
    nw_(.*)_options_set_(.*):
        class: NWProtocolOptions
        name: 'set#{g[0].camelize}#{g[1].camelize}'
    nw_(.*)_create_options:
        class: NWProtocolOptions
        name: 'create#{g[0].camelize}Options'

    nw_protocol_stack_(.*):
        class: NWProtocolStack
        name: '#{g[0].downcase_first_camelize}'

    nw_listener_(create.*):
        class: NWListener
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            port: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    nw_listener_(.*):
        class: NWListener
        name: '#{g[0].downcase_first_camelize}'

    nw_ip_metadata_get_(.*):
        class: NWProtocolMetadata
        name: 'getIp#{g[0].camelize}'
    nw_ip_metadata_set_(.*):
        class: NWProtocolMetadata
        name: 'setIp#{g[0].camelize}'
    nw_(.*)_create_metadata:
        class: NWProtocolMetadata
        name: 'create#{g[0].camelize}Metadata'
    nw_tcp_get_available_receive_buffer:
        class: NWProtocolMetadata
        name: getTcpAvailableReceiveBuffer

    nw_tcp_get_available_send_buffer:
        class: NWProtocolMetadata
        name: getTcpAvailableSendBuffer

    nw_tls_copy_sec_protocol_options:
        class: NWProtocolOptions
        name: copySecArcProtocolOptions

    nw_tls_copy_sec_protocol_metadata:
        class: NWProtocolMetadata
        name: copySecArcProtocolMetadata

    # no need these as rely on NSObject retain/release
    nw_(retain|release):
        class: NWObject
        visibility: private
        name: 'nwArc#{g[0].camelize}'
        return_type: void
        parameters:
            obj:
                type: '@Pointer long'

    # ios13
    nw_txt_record_(find_key|access_key|set_key|remove_key):
        class: NWTxtRecord
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            key: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_txt_record_(create.*):
        class: NWTxtRecord
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
    nw_txt_record_(.*):
        class: NWTxtRecord
        name: '#{g[0].downcase_first_camelize}'

    # NWBrowseDescriptor
    nw_browse_descriptor_(create_bonjour_service):
        class: NWBrowseDescriptor
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            type: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            domain: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_browse_descriptor_(get_bonjour_service_type|get_bonjour_service_domain|get_application_service_name):
        class: NWBrowseDescriptor
        name: '#{g[0].downcase_first_camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_browse_descriptor_(.*):
        class: NWBrowseDescriptor
        name: '#{g[0].downcase_first_camelize}'

    # NWBrowseResult
    nw_browse_result_(.*):
        class: NWBrowseResult
        name: '#{g[0].downcase_first_camelize}'

    # NWBrowser
    nw_browser_(create):
        class: NWBrowser
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
    nw_browser_(.*):
        class: NWBrowser
        name: '#{g[0].downcase_first_camelize}'

    # NWEstablishmentReport
    nw_establishment_report_(.*):
        class: NWEstablishmentReport
        name: '#{g[0].downcase_first_camelize}'

    # NWDataTransferReport
    nw_data_transfer_report_(.*):
        class: NWDataTransferReport
        name: '#{g[0].downcase_first_camelize}'

    nw_framer_message_create:
        class:  NWFramer
        name: createMessage

    nw_framer_message_(.*):
        class: NWFramerMessage
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            key: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    nw_framer_(create_definition):
        class: NWFramer
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            identifier: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    nw_framer_(create_options):
        class: NWProtocolDefinition
        name: createFramerOptions

    nw_framer_(.*):
        class: NWFramer
        name: '#{g[0].downcase_first_camelize}'

    nw_ws_options_(add_additional_header):
        class: NWProtocolOptions
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            name: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            value: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    nw_ws_options_(add_subprotocol):
        class: NWProtocolOptions
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            subprotocol: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    nw_ws_options_(.*):
        class: NWProtocolOptions
        name: '#{g[0].downcase_first_camelize}'

    nw_ws_metadata_(.*):
        class: NWProtocolMetadata
        name: '#{g[0].downcase_first_camelize}'

    nw_ws_request_(.*):
        class: NWWsRequest
        name: '#{g[0].downcase_first_camelize}'

    nw_ws_response_(create):
        class: NWWsResponse
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            selected_subprotocol: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_ws_response_(get_selected_subprotocol):
        class: NWWsResponse
        name: '#{g[0].downcase_first_camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_ws_response_(add_additional_header):
        class: NWWsResponse
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            name: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            value: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_ws_response_(.*):
        class: NWWsResponse
        name: '#{g[0].downcase_first_camelize}'

    # iOS14
    nw_resolver_config_(.*):
        class: NWResolverConfig
        name: '#{g[0].downcase_first_camelize}'

    # NWPrivacyContext
    nw_privacy_context_(create):
        class: NWPrivacyContext
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            description: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_privacy_context_(.*):
        class: NWPrivacyContext
        name: '#{g[0].downcase_first_camelize}'

    # NWGroupDescriptor
    nw_group_descriptor_(create_multicast):
        class: NWGroupDescriptor
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
    nw_group_descriptor_(.*):
        class: NWGroupDescriptor
        name: '#{g[0].downcase_first_camelize}'
    nw_multicast_group_descriptor_(.*):
        class: NWGroupDescriptor
        name: '#{g[0].downcase_first_camelize}'

    # NWResolutionReport
    nw_resolution_report_(.*):
        class: NWResolutionReport
        name: '#{g[0].downcase_first_camelize}'

    # iOS15
    nw_quic_(add|copy|get|set)_(tls_application_protocol|sec_protocol_options|stream_is_unidirectional|initial_max_data|max_udp_payload_size):
        class: NWProtocolOptions
        name: '#{g[0]}Quic#{g[1].upcase_first_camelize}'
    nw_quic_(add|copy|get|set)_(idle_timeout|initial_max_streams_bidirectional|initial_max_streams_unidirectional|initial_max_stream_data_bidirectional_local|initial_max_stream_data_bidirectional_remote):
        class: NWProtocolOptions
        name: '#{g[0]}Quic#{g[1].upcase_first_camelize}'
    nw_quic_(add|copy|get|set)_(initial_max_stream_data_unidirectional):
        class: NWProtocolOptions
        name: '#{g[0]}Quic#{g[1].upcase_first_camelize}'

    nw_quic_(add|copy|get|set)_(.*):
        class: NWProtocolMetadata
        name: '#{g[0]}Quic#{g[1].upcase_first_camelize}'

    # NWProxyConfig
    nw_proxy_config_(create_relay|create_oblivious_http|create_http_connect|create_socksv5):
        class: NWProxyConfig
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            gateway_key_config: {type: "byte[]" }
    nw_proxy_config_(.*):
        class: NWProxyConfig
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            relay_resource_path: { type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            username: { type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            password: { type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            match_domain: { type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            excluded_domain: { type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    # NWRelayHop
    nw_relay_hop_(create):
        class: NWRelayHop
        constructor: true
        name: '#{g[0].downcase_first_camelize}'
    nw_relay_hop_(.*):
        class: NWRelayHop
        name: '#{g[0].downcase_first_camelize}'
        parameters:
            field_name: { type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            field_value: { type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }


    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?nw_.*):
        class: FixMe
        name: 'Function__#{g[0]}'

values:
    _nw_parameters_configure_protocol_(.*):
        class: NWParameters
        name: '#{g[0].upcase}'

    _nw_connection_(.*):
        class: NWConnection
        name: '#{g[0].upcase}'

    _nw_content_context_(.*):
        class: NWContentContext
        name: '#{g[0].upcase}'

    _nw_data_transfer_report_(.*):
        class: NWDataTransferReport
        name: '#{g[0].downcase_first_camelize}'

    # NWResolverConfig
    _nw_privacy_context_default_context:
        class: NWResolverConfig
        name: getDefaultContext


    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?nw_.*):
        class: FixMe
        name: 'Value__#{g[0]}'
    (k?_nw_.*):
        class: FixMe
        name: 'Value__#{g[0]}'

constants:

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?nw_.*):
        class: FixMe
        name: 'Constant__#{g[0]}'