package: org.robovm.apple.spritekit
include: [foundation, uikit, coregraphics, dispatch, coreimage, avfoundation, glkit, scenekit, gameplaykit, metal, coreanimation]
library: SpriteKit
framework: SpriteKit
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/SpriteKit.framework/Headers/SpriteKit.h
    - /System/Library/Frameworks/SpriteKit.framework/Headers/SpriteKitBase.h

enums:
    SKActionTimingMode: {}
    SKInterpolationMode: {}
    SKRepeatMode: {}
    SKLabelVerticalAlignmentMode: {}
    SKLabelHorizontalAlignmentMode: {}
    SKBlendMode: {}
    SKParticleRenderOrder: {}
    SKSceneScaleMode: {}
    SKTextureFilteringMode: {}
    SKTransitionDirection: {}
    SKUniformType: {}
    SKAttributeType: {}
    SKTileDefinitionRotation: {}
    SKTileSetType: {}
    SKTileAdjacencyMask: {prefix: SKTile}
    SKNodeFocusBehavior: {} #since 11.0

categories:
    SKNodeTouches: # DONE
        methods:
            '-locationInNode:':
                name: getLocationInNode
            '-previousLocationInNode:':
                name: getPreviousLocationInNode

classes:
    SKAttribute:
        methods:
            '-init.*':
                name: init
            '+attributeWithName:type:':
                exclude: true
    SKAttributeValue: #since 9.0
        methods:
            '+valueWithFloat:':
                name: create
                constructor: true
            '+valueWithVectorFloat2:':
                name: create
                constructor: true
            '+valueWithVectorFloat3:':
                name: create
                constructor: true
            '+valueWithVectorFloat4:':
                name: create
                constructor: true
    SKTileDefinition:
        methods:
            '-init.*':
                name: init
            '+tileDefinitionWith.*':
                exclude: true
    SKTileSet:
        methods:
            '-initWithTileGroups:':
                name: init
            '-initWithTileGroups:tileSetType:':
                name: init
            '+tileSetWithTileGroups:tileSetType:':
                exclude: true
            '+tileSetWithTileGroups:':
                exclude: true
    SKTileGroup: #since 10.0
        methods:
            '-initWithTileDefinition:':
                name: init
            '-initWithRules:':
                name: init
            '+tileGroupWithTileDefinition:':
                exclude: true
            '+tileGroupWithRules:':
                exclude: true
    SKTileGroupRule:
        methods:
            '-init.*':
                name: init
            '+tileGroupRuleWithAdjacency:tileDefinitions:':
                exclude: true
    SKWarpGeometry: {}
    SKWarpGeometryGrid:
        methods:
            '-init.*':
                name: init
            '+grid.*':
                name: create

    SK3DNode:
        properties:
            'loops':
                getter: loops
            'scnScene':
                name: sceneKitScene
                annotations: ['@WeaklyLinked']
            'pointOfView':
                annotations: ['@WeaklyLinked']
        methods:
            '-init.*':
                name: init
            '-hitTest:options:':
                trim_after_first_colon: true
                return_type: NSArray<SCNHitTestResult>
                annotations: ['@WeaklyLinked']
                parameters:
                    options:
                        type: SCNHitTestOptions
            '-projectPoint:':
                trim_after_first_colon: true
            '-unprojectPoint:':
                trim_after_first_colon: true
            '+nodeWithViewportSize:':
                exclude: true
    SKAction: # DONE
        properties:
            'timingFunction':
                type: '@Block Block1<Float, Float>'
        methods:
            '+moveBy.*':
                name: moveBy
            '+moveTo.*':
                trim_after_first_colon: true
            '+rotateBy.*':
                name: rotateBy
            '+rotateTo.*':
                name: rotateTo
            '+resizeBy.*':
                name: resizeBy
            '+resizeToWidth:height:duration:':
                name: resizeTo
            '+resizeTo.*':
                trim_after_first_colon: true
            '+scaleBy:duration:':
                trim_after_first_colon: true
            '+scaleXBy:y:duration:':
                name: scaleBy
            '+scaleTo:duration:':
                trim_after_first_colon: true
            '+scaleXTo:y:duration:':
                name: scaleTo
            '+scaleXTo:duration:':
                trim_after_first_colon: true
            '+scaleYTo:duration:':
                trim_after_first_colon: true
            '+scaleToSize:duration:':
                trim_after_first_colon: true
            '+sequence:':
                trim_after_first_colon: true
                parameters:
                    actions:
                        type: NSArray<SKAction>
            '+group:':
                trim_after_first_colon: true
                parameters:
                    actions:
                        type: NSArray<SKAction>
            '+repeatAction:count:':
                name: repeat
            '+repeatActionForever:':
                name: repeatForever
            '+fadeInWithDuration:':
                name: fadeIn
            '+fadeOutWithDuration:':
                name: fadeOut
            '+fadeAlphaBy:duration:':
                trim_after_first_colon: true
            '+fadeAlphaTo:duration:':
                trim_after_first_colon: true
            '+setTexture:.*':
                trim_after_first_colon: true
            '+setNormalTexture:.*':
                trim_after_first_colon: true
            '+animateWithTextures:timePerFrame:.*':
                name: animateFrames
                parameters:
                    textures:
                        type: NSArray<SKTexture>
            '+animateWithNormalTextures:timePerFrame:.*':
                name: animateNormalFrames
                parameters:
                    textures:
                        type: NSArray<SKTexture>
            '+playSoundFileNamed:waitForCompletion:':
                name: playSound
            '+colorizeWithColor.*':
                name: colorize
            '+falloffTo:duration:':
                trim_after_first_colon: true
            '+falloffBy:duration:':
                trim_after_first_colon: true
            '+followPath.*speed:':
                name: followPathWithSpeed
            '+followPath:.*':
                trim_after_first_colon: true
            '+speedBy:duration:':
                trim_after_first_colon: true
            '+speedTo:duration:':
                trim_after_first_colon: true
            '+reachTo:rootNode:duration:':
                trim_after_first_colon: true
            '+reachTo:rootNode:velocity:':
                name: reachToWithVelocity
            '+reachToNode:rootNode:duration:':
                trim_after_first_colon: true
            '+reachToNode:rootNode:velocity:':
                name: reachToNodeWithVelocity
            '+strengthTo:duration:':
                trim_after_first_colon: true
            '+strengthBy:duration:':
                trim_after_first_colon: true
            '+waitForDuration:.*':
                name: wait
            '+performSelector:onTarget:':
                exclude: true
            '+runBlock:':
                name: run
            '+runBlock:queue:':
                name: run
                annotations: ['@WeaklyLinked']
                parameters:
                    queue:
                        type: DispatchQueue
            '+runAction:onChildWithName:':
                trim_after_first_colon: true
            '+customActionWithDuration:actionBlock:':
                name: create
                constructor: true
            '+actionNamed.*':
                name: create
                constructor: true
            '+change.*':
                trim_after_first_colon: true
            '+apply.*':
                trim_after_first_colon: true
            '+stereoPan.*':
                trim_after_first_colon: true
            '+warpTo:duration:':
                name: warp
            '+animateWithWarps:times:':
                name: animateWarps
            '+animateWithWarps:times:restore:':
                name: animateWarps
    SKAudioNode: # DONE
        properties:
            'avAudioNode':
                name: AVAudioNode
        methods:
            '-init.*':
                name: init
    SKCameraNode: # DONE
        methods:
            '-containsNode:':
                trim_after_first_colon: true
            '-containedNodeSet':
                property: true
                return_type: NSSet<SKNode>
    SKConstraint: # DONE
        methods:
            '+positionX:':
                name: positionX
            '+positionY:':
                name: positionY
            '+positionX:Y:':
                name: positionXY
            '+distance:toNode:':
                name: distanceToNode
            '+distance:toPoint:':
                name: distanceToPoint
            '+distance:toPoint:inNode:':
                name: distanceToPointInNode
            '+zRotation:':
                name: zRotation
            '+orientToNode:offset:':
                name: orientToNode
            '+orientToPoint:offset:':
                name: orientToPoint
            '+orientToPoint:inNode:offset:':
                name: orientToPointInNode
    SKCropNode: {} # DONE
    SKEffectNode: # DONE
        properties:
            'filter':
                annotations: ['@WeaklyLinked']
        methods:
            '-valueForAttributeNamed:':
                name: valueForAttribute
            '-setValue:forAttributeNamed:':
                name: setValueForAttribute
    SKEmitterNode: # DONE
        methods:
            '-advanceSimulationTime:':
                trim_after_first_colon: true
            '-valueForAttributeNamed:':
                name: valueForAttribute
            '-setValue:forAttributeNamed:':
                name: setValueForAttribute
    SKFieldNode: # DONE
        methods:
            '+dragField':
                name: createDragField
            '+vortexField':
                name: createVortexField
            '+radialGravityField':
                name: createRadialGravityField
            '+linearGravityFieldWithVector:':
                name: createLinearGravityField
            '+velocityField.*':
                name: createVelocityField
            '+noiseFieldWithSmoothness:animationSpeed:':
                name: createNoiseField
            '+turbulenceFieldWithSmoothness:animationSpeed:':
                name: createTurbulenceField
            '+springField':
                name: createSpringField
            '+electricField':
                name: createElectricField
            '+magneticField':
                name: createMagneticField
            '+customFieldWithEvaluationBlock:':
                name: createCustomField
                parameters:
                    block:
                        type: '@Block Block5<SKVector3, SKVector3, Float, Float, Double, SKVector3>'
    SKKeyframeSequence: # DONE
        methods:
            '-initWithKeyframeValues:times:':
                name: init
                parameters:
                    values:
                        type: NSArray<NSObject>
                    times:
                        type: NSArray<NSNumber>
            '-init.*':
                name: init
            '-count':
                name: size
            '-addKeyframeValue:time:':
                name: add
            '-removeLastKeyframe':
                name: removeLast
            '-removeKeyframeAtIndex:':
                name: remove
            '-setKeyframeValue:forIndex:':
                name: setValue
            '-setKeyframeTime:forIndex:':
                name: setTime
            '-setKeyframeValue:time:forIndex:':
                name: set
            '-getKeyframeValueForIndex:':
                name: getValue
            '-getKeyframeTimeForIndex:':
                name: getTime
            '-sampleAtTime:':
                name: getSample
    SKLabelNode: # DONE
        methods:
            '-initWithFontNamed:':
                exclude: true
            '+labelNodeWithFontNamed:':
                exclude: true
            '+labelNodeWithText:':
                name: create
                constructor: true
            '+labelNodeWithAttributedText:':
                name: create
                constructor: true
    SKLightNode: {} # DONE
    SKMutableTexture: # DONE
        methods:
            '-init.*':
                name: init
            '-modifyPixelDataWithBlock:':
                name: modifyPixelData
                parameters:
                    block:
                        type: '@Block("(,@MachineSizedUInt)") VoidBlock2<VoidPtr, Long>'
            '+mutableTextureWithSize:':
                exclude: true
    SKNode: # DONE
        skip_handle_constructor: false
        properties:
            'children':
                type: NSArray<SKNode>
            'constraints':
                type: NSArray<SKConstraint>
            'userData':
                type: 'NSMutableDictionary<?, ?>'
        methods:
            '-addChild:':
                trim_after_first_colon: true
            '-removeChildrenInArray:':
                name: removeChildren
                parameters:
                    nodes:
                        type: NSArray<SKNode>
            '-moveToParent:':
                trim_after_first_colon: true
            '-childNodeWithName:':
                name: getChild
            '-inParentHierarchy:':
                name: isInParentHierarchy
            '-runAction:.*':
                trim_after_first_colon: true
            '-actionForKey:':
                name: getAction
            '-removeActionForKey:':
                name: removeAction
            '-containsPoint:':
                trim_after_first_colon: true
            '-nodeAtPoint:':
                name: getNodeAtPoint
            '-nodesAtPoint:':
                name: getNodesAtPoint
                return_type: NSArray<SKNode>
            '-intersectsNode:':
                trim_after_first_colon: true
            '-objectForKeyedSubscript:':
                name: findNodesByName
                return_type: NSArray<SKNode>
            '-isEqualToNode:':
                name: equalsTo
            '+obstaclesFromSpriteTextures:accuracy:':
                name: getObstaclesFromSpriteTextures
                return_type: NSArray<GKPolygonObstacle>
                parameters:
                    sprites:
                        type: NSArray<SKNode>
            '+obstaclesFromNodeBounds:':
                name: getObstaclesFromNodeBounds
                return_type: NSArray<GKPolygonObstacle>
                parameters:
                    nodes:
                        type: NSArray<SKNode>
            '+obstaclesFromNodePhysicsBodies:':
                name: getObstaclesFromNodePhysicsBodies
                return_type: NSArray<GKPolygonObstacle>
                parameters:
                    nodes:
                        type: NSArray<SKNode>
            '+node':
                exclude: true
            '+nodeWithFileNamed:':
                name: create
                constructor: true
            '-setValue:forAttributeNamed:':
                trim_after_first_colon: true
            '-insertChild:atIndex:':
                trim_after_first_colon: true
            '-enumerateChildNodesWithName:usingBlock:':
                name: enumerateChildNodes
            '-runAction:completion:':
                trim_after_first_colon: true
            '-runAction:withKey:':
                trim_after_first_colon: true
            '-convertPoint:fromNode:':
                name: convertPointFromNode
            '-convertPoint:toNode:':
                name: convertPointToNode
            '+nodeWithFileNamed:securelyWithClasses:andError:':
                name: create
                constructor: true
                throws: NSErrorException
    SKPhysicsBody: # DONE
        properties:
            'joints':
                type: NSArray<SKPhysicsJoint>
        methods:
            '-applyForce:.*':
                trim_after_first_colon: true
            '-applyTorque:':
                trim_after_first_colon: true
            '-applyImpulse:.*':
                trim_after_first_colon: true
            '-applyAngularImpulse:':
                trim_after_first_colon: true
            '-allContactedBodies':
                property: true
                return_type: NSArray<SKPhysicsBody>
            '+bodyWithCircleOfRadius:.*':
                name: createCircle
            '+bodyWithRectangleOfSize:.*':
                name: createRectangle
            '+bodyWithPolygonFromPath:.*':
                name: createPolygon
            '+bodyWithEdgeFromPoint:toPoint:':
                name: createEdge
            '+bodyWithEdgeChainFromPath:':
                name: createEdgeChain
            '+bodyWithEdgeLoopFromPath:':
                name: createEdgeLoop
            '+bodyWithEdgeLoopFromRect:':
                name: createEdgeLoop
            '+bodyWithTexture.*':
                name: createWithTexture
            '+bodyWithBodies:':
                name: createWithBodies
                parameters:
                    bodies:
                        type: NSArray<SKPhysicsBody>
    SKPhysicsContact: {} # DONE
    SKPhysicsJoint: # DONE
        skip_handle_constructor: false
    SKPhysicsJointFixed: # DONE
        methods:
            '+jointWithBodyA:bodyB:anchor:':
                name: create
                constructor: true
    SKPhysicsJointLimit: # DONE
        methods:
            '+jointWithBodyA:bodyB:anchorA:anchorB:':
                name: create
                constructor: true
    SKPhysicsJointPin: # DONE
        methods:
            '+jointWithBodyA:bodyB:anchor:':
                name: create
                constructor: true
    SKPhysicsJointSliding: # DONE
        methods:
            '+jointWithBodyA:bodyB:anchor:axis:':
                name: create
                constructor: true
    SKPhysicsJointSpring: # DONE
        methods:
            '+jointWithBodyA:bodyB:anchorA:anchorB:':
                name: create
                constructor: true
    SKPhysicsWorld: # DONE
        methods:
            '-addJoint:':
                trim_after_first_colon: true
            '-removeJoint:':
                trim_after_first_colon: true
            '-bodyAtPoint:':
                name: getBodyAtPoint
            '-bodyInRect:':
                name: getBodyInRect
            '-bodyAlongRayStart:end:':
                name: getBodyAlongRay
            '-enumerateBodiesAtPoint:usingBlock:':
                trim_after_first_colon: true
            '-enumerateBodiesInRect:usingBlock:':
                trim_after_first_colon: true
            '-enumerateBodiesAlongRayStart:end:usingBlock:':
                name: enumerateBodiesAlongRay
            '-sampleFieldsAt:':
                trim_after_first_colon: true
    SKRange: # DONE
        methods:
            '-init.*':
                name: init
            '+rangeWithLowerLimit:upperLimit:':
                exclude: true
            '+rangeWithLowerLimit:':
                name: createWithLowerLimit
            '+rangeWithUpperLimit:':
                name: createWithUpperLimit
            '+rangeWithConstantValue:':
                name: createWithConstantValue
            '+rangeWithValue:variance:':
                name: createWithValue
            '+rangeWithNoLimits':
                name: createWithNoLimits
    SKReachConstraints: # DONE
        methods:
            '-init.*':
                name: init
    SKReferenceNode: # DONE
        methods:
            '-init.*':
                name: init
            '-didLoadReferenceNode:':
                trim_after_first_colon: true
            '+referenceNodeWithFileNamed:':
                exclude: true
            '+referenceNodeWithURL:':
                exclude: true
    SKRegion: # DONE
        methods:
            '-init.*':
                name: init
            '-regionByUnionWithRegion:':
                name: newRegionByUnionWithRegion
            '-regionByDifferenceFromRegion:':
                name: newRegionByDifferenceFromRegion
            '-regionByIntersectionWithRegion:':
                name: newRegionByIntersectionWithRegion
            '-containsPoint:':
                trim_after_first_colon: true
            '+infiniteRegion':
                name: createInfiniteRegion
    SKScene: # DONE
        properties:
            'physicsWorld':
                marshaler: NSObject.Marshaler
        methods:
            '-initWithSize:':
                name: init
            '-convertPointFromView:':
                trim_after_first_colon: true
            '-convertPointToView:':
                trim_after_first_colon: true
            '-update:':
                trim_after_first_colon: true
            '-didMoveToView:':
                trim_after_first_colon: true
            '-willMoveFromView:':
                trim_after_first_colon: true
            '-didChangeSize:':
                trim_after_first_colon: true
            '+sceneWithSize:':
                exclude: true
    SKShader: # DONE
        properties:
            'uniforms':
                type: NSArray<SKUniform>
        methods:
            '-initWithSource:':
                name: init
            '-initWithSource:uniforms:':
                name: init
                parameters:
                    uniforms:
                        type: NSArray<SKUniform>
            '-addUniform:':
                trim_after_first_colon: true
            '-uniformNamed:':
                name: getUniform
            '-removeUniformNamed:':
                name: removeUniform
            '+shaderWithSource:uniforms:':
                name: create
                exclude: true
            '+shaderWithFileNamed:':
                name: createWithFile
                visibility: protected # Use File type
                return_type: '@Pointer long'
            '+shader.*':
                exclude: true
    SKShapeNode: # DONE
        methods:
            '+shapeNodeWithPath.*':
                name: createPath
            '+shapeNodeWithRect.*':
                name: createRect
            '+shapeNodeWithCircleOfRadius:':
                name: createCircle
            '+shapeNodeWithEllipse.*':
                name: createEllipse
            '+shapeNodeWithPoints:count:':
                name: createWithPoints
            '+shapeNodeWithSplinePoints:count:':
                name: createWithSplinePoints
            '-setValue:forAttributeNamed:':
                trim_after_first_colon: true
    SKSpriteNode: # DONE
        methods:
            '-init.*':
                name: init
            '+spriteNodeWithTexture:size:':
                name: create
                constructor: true
            '+spriteNodeWithTexture:normalMap:':
                name: create
                constructor: true
            '+spriteNodeWithImageNamed:normalMapped:':
                name: create
                constructor: true
            '+spriteNodeWith.*':
                exclude: true
            '-valueForAttributeNamed:':
                name: valueForAttribute
            '-setValue:forAttributeNamed:':
                name: setValueForAttribute
    SKTexture: # DONE
        methods:
            '-textureByApplyingCIFilter:':
                name: newTextureByApplyingCIFilter
                annotations: ['@WeaklyLinked']
            '-textureByGeneratingNormalMap.*':
                name: newTextureByGeneratingNormalMap
            '-textureRect':
                property: true
            '-preloadWithCompletionHandler:':
                name: preload
            '+textureVectorNoiseWithSmoothness:size:':
                name: createVectorNoise
            '+textureNoiseWithSmoothness:size:grayscale:':
                name: createNoise
            '+textureWith.*':
                name: create
                constructor: true
            '+preloadTextures:withCompletionHandler:':
                trim_after_first_colon: true
                parameters:
                    textures:
                        type: NSArray<SKTexture>
    SKTextureAtlas: # DONE
        properties:
            'textureNames':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-textureNamed:':
                name: getTexture
            '-preloadWithCompletionHandler:':
                name: preload
            '+atlasNamed:':
                name: create
                constructor: true
            '+atlasWithDictionary:':
                name: create
                visibility: protected
                return_type: '@Pointer long'
            '+preloadTextureAtlases:withCompletionHandler:':
                trim_after_first_colon: true
                parameters:
                    textureAtlases:
                        type: NSArray<SKTextureAtlas>
            '+preloadTextureAtlasesNamed:withCompletionHandler:':
                name: preloadTextureAtlases
                parameters:
                    atlasNames:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
                    completionHandler:
                        type: '@Block VoidBlock2<NSError, NSArray<SKTextureAtlas>>'
    SKTransition: # DONE
        methods:
            '+crossFadeWithDuration:':
                name: crossFade
            '+fadeWith.*':
                name: fade
            '+flipHorizontalWithDuration:':
                name: flipHorizontal
            '+flipVerticalWithDuration:':
                name: flipVertical
            '+revealWithDirection:duration:':
                name: reveal
            '+moveInWithDirection:duration:':
                name: moveIn
            '+pushWithDirection:duration:':
                name: push
            '+doorsOpenHorizontalWithDuration:':
                name: doorsOpenHorizontal
            '+doorsOpenVerticalWithDuration:':
                name: doorsOpenVertical
            '+doorsCloseHorizontalWithDuration:':
                name: doorsCloseHorizontal
            '+doorsCloseVerticalWithDuration:':
                name: doorsCloseVertical
            '+doorwayWithDuration:':
                name: doorway
            '+transitionWithCIFilter:duration:':
                name: create
                constructor: true
                annotations: ['@WeaklyLinked']
    SKUniform: # DONE
        annotations: ['@WeaklyLinked']
        methods:
            '-initWithName:.*':
                name: init
            '+uniformWithName:.*':
                exclude: true
    SKVideoNode: # DONE
        methods:
            '-initWithAVPlayer:':
                name: init
                annotations: ['@WeaklyLinked']
            '-initWithVideoFileNamed:':
                exclude: true
            '-initWithVideoURL:':
                exclude: true
            '-initWith.*':
                name: init
            '+videoNodeWith.*':
                exclude: true
    SKView: # DONE
        methods:
            '-presentScene:.*':
                trim_after_first_colon: true
            '-textureFromNode:.*':
                name: getTextureFromNode
            '-convertPoint:toScene:':
                name: convertPointToScene
            '-convertPoint:fromScene:':
                name: convertPointFromScene
    SKRenderer: #since 11.0
        methods:
            '-renderWithViewport:commandBuffer:renderPassDescriptor:':
                name: render
            '-renderWithViewport:renderCommandEncoder:renderPassDescriptor:commandQueue:':
                name: render
            '+rendererWithDevice:':
                name: create
                constructor: true
    SKTileMapNode: #since 10.0
        methods:
            '-initWithTileSet:columns:rows:tileSize:':
                name: init
            '-initWithTileSet:columns:rows:tileSize:fillWithTileGroup:':
                name: init
            '-initWithTileSet:columns:rows:tileSize:tileGroupLayout:':
                name: init
            '-setValue:forAttributeNamed:':
                trim_after_first_colon: true
            '-tileDefinitionAtColumn:row:':
                name: getTileDefinition
            '-tileGroupAtColumn:row:':
                name: getTileGroup
            '-setTileGroup:forColumn:row:':
                name: setTileGroup
            '-setTileGroup:andTileDefinition:forColumn:row:':
                name: setTileGroup
            '-centerOfTileAtColumn:row:':
                name: getCenterOfTile
            '+tileMapNodeWithTileSet:columns:rows:tileSize:':
                exclude: true
            '+tileMapNodeWithTileSet:columns:rows:tileSize:fillWithTileGroup:':
                exclude: true
            '+tileMapNodeWithTileSet:columns:rows:tileSize:tileGroupLayout:':
                exclude: true
            '-fillWithTileGroup:':
                name: fill
    SKTransformNode: {} #since 11.0

protocols:
    SKWarpable: {}
    SKViewDelegate:
        methods:
            '-view:shouldRenderAtTime:':
                name: shouldRenderViewAtTime

    SKPhysicsContactDelegate: # DONE
        methods:
            '-didBeginContact:':
                trim_after_first_colon: true
            '-didEndContact:':
                trim_after_first_colon: true
    SKSceneDelegate: # DONE
        methods:
            '-update:forScene:':
                trim_after_first_colon: true
            '-didEvaluateActionsForScene:':
                name: didEvaluateActions
            '-didSimulatePhysicsForScene:':
                name: didSimulatePhysics
            '-didApplyConstraintsForScene:':
                name: didApplyConstraints
            '-didFinishUpdateForScene:':
                name: didFinishUpdate
    
functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?SK.*):
        class: SpriteKit
        name: 'Function__#{g[0]}'

values: 
    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?SK.*):
        class: SpriteKit
        name: 'Value__#{g[0]}'

constants:
    SK_VERSION:
        exclude: true
    SKVIEW_AVAILABLE:
        exclude: true

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?SK.*):
        class: SpriteKit
        name: 'Constant__#{g[0]}'
