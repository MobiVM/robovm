package: org.robovm.apple.mapkit
include: [foundation, coregraphics, corelocation, uikit, dispatch, coreanimation]
library: MapKit
framework: MapKit
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/MapKit.framework/Headers/MapKit.h
    - /System/Library/Frameworks/MapKit.framework/Headers/MKFoundation.h
typedefs:
    'void (^)(NSData *, NSError *)': '@Block VoidBlock2<NSData, NSError>'

enums:
    MKAnnotationViewDragState: {}
    MKDirectionsTransportType: {}
    MKDistanceFormatterUnits: {}
    MKDistanceFormatterUnitStyle: {}
    MKUserTrackingMode: {}
    MKOverlayLevel: {}
    MKPinAnnotationColor: {}
    MKMapType: {}
    MKErrorCode: {}
    MKSearchCompletionFilterType: {}
    MKAnnotationViewCollisionMode: {} #since 11.0
    MKFeatureVisibility: {} #since 11.0
    MKScaleViewAlignment: {} #since 11.0
    MKLocalSearchResultType: {} #since 13.0
    MKLocalSearchCompleterResultType: {} #since 13.0

typed_enums:
    MKPointOfInterestCategory:
        enum: MKPointOfInterestCategory
        prefix: MKPointOfInterestCategory
        type: NSString
categories:
    NSValueMapKitGeometryExtensions: # DONE
        methods:
            '-MKCoordinateValue':
                name: getCoordinateValue
            '-MKCoordinateSpanValue':
                name: getCoordinateSpanValue
            '+valueWithMKCoordinate:':
                name: create
            '+valueWithMKCoordinateSpan:':
                name: create
   
classes:
    MKError:
        extends: NSError
        annotations: ['@StronglyLinked']

    # Structs:
    MKCoordinateSpan: {}
    MKCoordinateRegion: {}
    MKMapPoint: {}
    MKMapSize: {}
    MKMapRect: {}
    MKTileOverlayPath: {}

    MKAnnotationView: # DONE
        methods:
            '-init.*':
                name: init
            '-setSelected:animated:':
                trim_after_first_colon: true
            '-setDragState:animated:':
                trim_after_first_colon: true
    MKCircle: # DONE
        methods:
            '+circleWithCenterCoordinate:radius:':
                name: create
                constructor: true
            '+circleWithMapRect:':
                name: create
                constructor: true
    MKCircleRenderer: # DONE
        methods:
            '-init.*':
                name: init
    MKCircleView: # DONE
        methods:
            '-init.*':
                name: init
    MKDirections: # DONE
        methods:
            '-init.*':
                name: init
            '-calculateDirectionsWithCompletionHandler:':
                name: calculateDirections
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKDirectionsResponse, NSError>'
            '-calculateETAWithCompletionHandler:':
                name: calculateETA
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKETAResponse, NSError>'
    MKDirectionsRequest: # DONE
        methods:
            '-source':
                property: true
            '-destination':
                property: true
            '-initWithContentsOfURL:':
                name: init
            '+isDirectionsRequestURL:':
                trim_after_first_colon: true
    MKDirectionsResponse: # DONE
        properties:
            'routes':
                type: NSArray<MKRoute>
    MKETAResponse: {} # DONE
    MKGeodesicPolyline: # DONE
        methods:
            '+polylineWithPoints:count:':
                name: create
                visibility: private
                return_type: '@Pointer long'
            '+polylineWithCoordinates:count:':
                name: create
                visibility: private
                return_type: '@Pointer long'
    MKLocalSearch: # DONE
        methods:
            '-initWithRequest:':
                name: init
            '-initWithPointsOfInterestRequest:':
                name: init
            '-startWithCompletionHandler:':
                name: start
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKLocalSearchResponse, NSError>'
    MKLocalSearchRequest: #since 6.1
        methods:
            '-initWithCompletion:':
                name: init
            '-initWithNaturalLanguageQuery:':
                name: init
            '-initWithNaturalLanguageQuery:region:':
                name: init
    MKLocalSearchResponse: # DONE
        properties:
            'mapItems':
                type: NSArray<MKMapItem>
    MKMapCamera: # DONE
        methods:
            '+camera':
                exclude: true
            '+cameraLookingAtCenterCoordinate:fromEyeCoordinate:eyeAltitude:':
                name: create
                constructor: true
            '+cameraLookingAtCenterCoordinate:fromDistance:pitch:heading:':
                name: create
                constructor: true
    MKMapItem: # DONE
        properties:
            'isCurrentLocation':
                name: currentLocation
        methods:
            '-initWithPlacemark:':
                name: init
            '-openInMapsWithLaunchOptions:':
                name: openInMaps
                parameters:
                    launchOptions:
                        type: MKLaunchOptions
            '+mapItemForCurrentLocation':
                name: getMapItemForCurrentLocation
            '+openMapsWithItems:launchOptions:':
                name: openMaps
                parameters:
                    mapItems:
                        type: NSArray<MKMapItem>
                    launchOptions:
                        type: MKLaunchOptions
            '-openInMapsWithLaunchOptions:fromScene:completionHandler:':
                name: openInMaps
            '+openMapsWithItems:launchOptions:fromScene:completionHandler:':
                name: openMaps
    MKMapSnapshot: # DONE
        methods:
            '-pointForCoordinate:':
                name: convertCoordinateToPoint
    MKMapSnapshotOptions: {} # DONE
    MKMapSnapshotter: # DONE
        methods:
            '-initWithOptions:':
                name: init
            '-startWithCompletionHandler:':
                name: start
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKMapSnapshot, NSError>'
            '-startWithQueue:completionHandler:':
                name: start
                annotations: ['@WeaklyLinked']
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKMapSnapshot, NSError>'            
    MKMapView: # DONE
        properties:
            'annotations':
                type: 'List<? extends MKAnnotation>'
                marshaler: NSArray.AsListMarshaler
            'selectedAnnotations':
                type: 'List<? extends MKAnnotation>'
                marshaler: NSArray.AsListMarshaler
            'overlays':
                type: 'List<? extends MKOverlay>'
                marshaler: NSArray.AsListMarshaler
        methods:
            '-setRegion:animated:':
                trim_after_first_colon: true
            '-setCenterCoordinate:animated:':
                trim_after_first_colon: true
            '-regionThatFits:':
                name: getRegionThatFits
            '-setVisibleMapRect:animated:':
                trim_after_first_colon: true
            '-mapRectThatFits:':
                name: getMapRectThatFits
            '-setVisibleMapRect:edgePadding:animated:':
                trim_after_first_colon: true
            '-mapRectThatFits:edgePadding:':
                name: getMapRectThatFits
            '-setCamera:animated:':
                trim_after_first_colon: true
            '-convertCoordinate:toPointToView:':
                name: convertCoordinateToPointToView
            '-convertPoint:toCoordinateFromView:':
                name: convertPointToCoordinateFromView
            '-convertRegion:toRectToView:':
                name: convertRegionToRectToView
            '-convertRect:toRegionFromView:':
                name: convertRectToRegionFromView
            '-setUserTrackingMode:animated:':
                trim_after_first_colon: true
            '-addAnnotation:':
                trim_after_first_colon: true
            '-addAnnotations:':
                trim_after_first_colon: true
                parameters:
                    annotations:
                        type: 'List<? extends MKAnnotation>'
                        marshaler: NSArray.AsListMarshaler
            '-removeAnnotation:':
                trim_after_first_colon: true
            '-removeAnnotations:':
                trim_after_first_colon: true
                parameters:
                    annotations:
                        type: 'List<? extends MKAnnotation>'
                        marshaler: NSArray.AsListMarshaler
            '-annotationsInMapRect:':
                name: getAnnotations
                return_type: 'Set<? extends MKAnnotation>'
                return_marshaler: NSSet.AsSetMarshaler
            '-viewForAnnotation:':
                name: getView
            '-dequeueReusableAnnotationViewWithIdentifier:':
                name: dequeueReusableAnnotationView
            '-dequeueReusableAnnotationViewWithIdentifier:forAnnotation:':
                name: dequeueReusableAnnotationView
            '-registerClass:forAnnotationViewWithReuseIdentifier:':
                name: registerClass
            '-selectAnnotation:animated:':
                trim_after_first_colon: true
            '-deselectAnnotation:animated:':
                trim_after_first_colon: true
            '-showAnnotations:animated:':
                trim_after_first_colon: true
                parameters:
                    annotations:
                        type: 'List<? extends MKAnnotation>'
                        marshaler: NSArray.AsListMarshaler
            '-addOverlay:level:':
                trim_after_first_colon: true
            '-addOverlays:level:':
                trim_after_first_colon: true
                parameters:
                    overlays:
                        type: 'List<? extends MKOverlay>'
                        marshaler: NSArray.AsListMarshaler
            '-removeOverlay:':
                trim_after_first_colon: true
            '-removeOverlays:':
                trim_after_first_colon: true
                parameters:
                    overlays:
                        type: 'List<? extends MKOverlay>'
                        marshaler: NSArray.AsListMarshaler
            '-insertOverlay:atIndex:level:':
                trim_after_first_colon: true
            '-insertOverlay:aboveOverlay:':
                name: insertOverlayAbove
            '-insertOverlay:belowOverlay:':
                name: insertOverlayBelow
            '-exchangeOverlay:withOverlay:':
                trim_after_first_colon: true
            '-overlaysInLevel:':
                name: getOverlays
                return_type: 'List<? extends MKOverlay>'
                return_marshaler: NSArray.AsListMarshaler
            '-rendererForOverlay:':
                name: getOverlayRenderer
            '-viewForOverlay:':
                name: getOverlayView
            '-addOverlay:':
                trim_after_first_colon: true
            '-addOverlays:':
                trim_after_first_colon: true
                parameters:
                    overlays:
                        type: 'List<? extends MKOverlay>'
                        marshaler: NSArray.AsListMarshaler
            '-insertOverlay:atIndex:':
                trim_after_first_colon: true
            '-exchangeOverlayAtIndex:withOverlayAtIndex:':
                name: exchangeOverlay
            '-_handleSelectionAtPoint:':
                name: handleSelectionAtPoint
            '-setCameraZoomRange:animated:':
                name: setCameraZoomRange
            '-setCameraBoundary:animated:':
                name: setCameraBoundary
    MKMultiPoint: # DONE
        skip_handle_constructor: false
        methods:
            '-points':
                name: getPoints0
                visibility: protected
            '-getCoordinates:range:':
                name: getCoordinates0
                visibility: protected
    MKOverlayPathRenderer: # DONE
        properties:
            'lineDashPattern':
                type: NSArray<NSNumber>
        methods:
            '-applyStrokePropertiesToContext:atZoomScale:':
                name: applyStrokeProperties
            '-applyFillPropertiesToContext:atZoomScale:':
                name: applyFillProperties
            '-strokePath:inContext:':
                trim_after_first_colon: true
            '-fillPath:inContext:':
                trim_after_first_colon: true
    MKOverlayPathView: # DONE
        properties:
            'lineDashPattern':
                type: NSArray<NSNumber>
        methods:
            '-applyStrokePropertiesToContext:atZoomScale:':
                name: applyStrokeProperties
            '-applyFillPropertiesToContext:atZoomScale:':
                name: applyFillProperties
            '-strokePath:inContext:':
                trim_after_first_colon: true
            '-fillPath:inContext:':
                trim_after_first_colon: true
    MKOverlayRenderer: # DONE
        methods:
            '-initWithOverlay:':
                name: init
            '-pointForMapPoint:':
                name: getPoint
            '-mapPointForPoint:':
                name: getMapPoint
            '-rectForMapRect:':
                name: getRect
            '-mapRectForRect:':
                name: getMapRect
            '-canDrawMapRect:zoomScale:':
                name: canDraw
            '-drawMapRect:zoomScale:inContext:':
                name: draw
            '-setNeedsDisplayInMapRect:':
                name: setNeedsDisplay
            '-setNeedsDisplayInMapRect:zoomScale:':
                name: setNeedsDisplay
    MKOverlayView: # DONE
        methods:
            '-initWithOverlay:':
                name: init
            '-pointForMapPoint:':
                name: getPoint
            '-mapPointForPoint:':
                name: getMapPoint
            '-rectForMapRect:':
                name: getRect
            '-mapRectForRect:':
                name: getMapRect
            '-canDrawMapRect:zoomScale:':
                name: canDraw
            '-drawMapRect:zoomScale:inContext:':
                name: draw
            '-setNeedsDisplayInMapRect:':
                name: setNeedsDisplay
            '-setNeedsDisplayInMapRect:zoomScale:':
                name: setNeedsDisplay
    MKPinAnnotationView: # DONE
        methods:
            '+.*PinColor':
                property: true
    MKPlacemark: # DONE
        skip_def_constructor: true
        methods:
            '-initWithCoordinate:addressDictionary:':
                name: init
                parameters:
                    addressDictionary:
                        type: org.robovm.apple.addressbook.ABPersonAddress
            '-initWithCoordinate:postalAddress:':
                name: init
                parameters:
                    postalAddress:
                        type: org.robovm.apple.contacts.CNPostalAddress
            '-init.*':
                name: init
    MKPointAnnotation: #since 4.0
        methods:
            '-initWithCoordinate:':
                name: init
            '-initWithCoordinate:title:subtitle:':
                name: init
    MKPolygon: # DONE
        properties:
            'interiorPolygons':
                type: NSArray<MKPolygon>
        methods:
            '+polygonWithPoints:count:':
                name: create
                visibility: private
                return_type: '@Pointer long'
            '+polygonWithPoints:count:interiorPolygons:':
                name: create
                visibility: private
                return_type: '@Pointer long'
                parameters:
                    interiorPolygons:
                        type: NSArray<MKPolygon>
            '+polygonWithCoordinates:count:':
                name: create
                visibility: private
                return_type: '@Pointer long'
            '+polygonWithCoordinates:count:interiorPolygons:':
                name: create
                visibility: private
                return_type: '@Pointer long'
                parameters:
                    interiorPolygons:
                        type: NSArray<MKPolygon>   
    MKPolygonRenderer: # DONE
        methods:
            '-initWithPolygon:':
                name: init
    MKPolygonView: # DONE
        methods:
            '-initWithPolygon:':
                name: init
    MKPolyline: # DONE
        skip_handle_constructor: false
        methods:
            '+polylineWithPoints:count:':
                name: create
                visibility: private
                return_type: '@Pointer long'
            '+polylineWithCoordinates:count:':
                name: create
                visibility: private
                return_type: '@Pointer long'
    MKPolylineRenderer: # DONE
        methods:
            '-initWithPolyline:':
                name: init
    MKPolylineView: # DONE
        methods:
            '-initWithPolyline:':
                name: init
    MKRoute: # DONE
        properties:
            'advisoryNotices':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'steps':
                type: NSArray<MKRouteStep>
    MKRouteStep: {} # DONE
    MKShape: # DONE
        skip_handle_constructor: false
    MKTileOverlay: # DONE
        methods:
            '-initWithURLTemplate:':
                name: init
            '-URLForTilePath:':
                name: getURL
            '-loadTileAtPath:result:':
                name: loadTile
    MKTileOverlayRenderer: # DONE
        methods:
            '-initWithTileOverlay:':
                name: init
    MKUserLocation: {} # DONE
    MKUserTrackingBarButtonItem: # DONE
        methods:
            '-initWithMapView:':
                name: init
    MKLocalSearchCompletion: {}
    MKLocalSearchCompleter: {}
    MKDistanceFormatter: {}
    MKClusterAnnotation: #since 11.0
        methods:
            '-initWithMemberAnnotations:':
                name: init
    MKCompassButton: #since 11.0
        methods:
            '+compassButtonWithMapView:':
                name: create
                constructor: true
    MKMarkerAnnotationView: {} #since 11.0
    MKScaleView: #since 11.0
        methods:
            '+scaleViewWithMapView:':
                name: create
                constructor: true
    MKUserTrackingButton: #since 11.0
        methods:
            '+userTrackingButtonWithMapView:':
                name: create
                constructor: true
    # ios 13
    MKGeoJSONDecoder: #since 13.0
        methods:
            '-geoJSONObjectsWithData:error:':
                name: geoJSONObjects
                throws: NSErrorException
    MKGeoJSONFeature: {} #since 13.0
    MKMapCameraBoundary: #since 13.0
        methods:
            '-initWithMapRect:':
                name: init
            '-initWithCoordinateRegion:':
                name: init
            '-initWithCoder:':
                name: init
    MKMapCameraZoomRange: #since 13.0
        methods:
            '-initWithMinCenterCoordinateDistance:maxCenterCoordinateDistance:':
                name: init
            '-initWithMinCenterCoordinateDistance:':
                name: initUsingMinCenterCoordinateDistance
                static_constructor_name: createUsingMinCenterCoordinateDistance
            '-initWithMaxCenterCoordinateDistance:':
                name: initUsingMaxCenterCoordinateDistance
                static_constructor_name: createUsingMaxCenterCoordinateDistance
    MKMultiPolygon: #since 13.0
        methods:
            '-initWithPolygons:':
                name: init
    MKMultiPolygonRenderer: #since 13.0
        methods:
            '-initWithMultiPolygon:':
                name: init
    MKMultiPolyline: #since 13.0
        methods:
            '-initWithPolylines:':
                name: init
    MKMultiPolylineRenderer: #since 13.0
        methods:
            '-initWithMultiPolyline:':
                name: init
    MKPointOfInterestFilter: #since 13.0
        methods:
            '-initIncludingCategories:':
                static_constructor_name: createIncludingCategories
            '-initExcludingCategories:':
                static_constructor_name: createExcludingCategories
    MKGradientPolylineRenderer: #since 14.0
        methods:
            '-setColors:atLocations:':
                name: setColors
    MKLocalPointsOfInterestRequest: #since 14.0
        methods:
            '-initWithCenterCoordinate:radius:':
                name: init
            '-initWithCoordinateRegion:':
                name: init
    MKUserLocationView: {} #since 14.0
protocols:
    MKAnnotation: {} # DONE
    MKMapViewDelegate: # DONE
        methods:
            '-mapView:regionWillChangeAnimated:':
                name: willChangeRegion
            '-mapView:regionDidChangeAnimated:':
                name: didChangeRegion
            '-mapViewWillStartLoadingMap:':
                name: willStartLoadingMap
            '-mapViewDidFinishLoadingMap:':
                name: didFinishLoadingMap
            '-mapViewDidFailLoadingMap:withError:':
                name: didFailLoadingMap
            '-mapViewWillStartRenderingMap:':
                name: willStartRenderingMap
            '-mapViewDidFinishRenderingMap:fullyRendered:':
                name: didFinishRenderingMap
            '-mapView:viewForAnnotation:':
                name: getAnnotationView
            '-mapView:didAddAnnotationViews:':
                name: didAddAnnotationViews
                parameters:
                    views:
                        type: NSArray<MKAnnotationView>
            '-mapView:annotationView:calloutAccessoryControlTapped:':
                name: calloutAccessoryControlTapped
            '-mapView:didSelectAnnotationView:':
                name: didSelectAnnotationView
            '-mapView:didDeselectAnnotationView:':
                name: didDeselectAnnotationView
            '-mapViewWillStartLocatingUser:':
                name: willStartLocatingUser
            '-mapViewDidStopLocatingUser:':
                name: didStopLocatingUser
            '-mapView:didUpdateUserLocation:':
                name: didUpdateUserLocation
            '-mapView:didFailToLocateUserWithError:':
                name: didFailToLocateUser
            '-mapView:annotationView:didChangeDragState:fromOldState:':
                name: didChangeDragState
            '-mapView:didChangeUserTrackingMode:animated:':
                name: didChangeUserTrackingMode
            '-mapView:rendererForOverlay:':
                name: getOverlayRenderer
            '-mapView:didAddOverlayRenderers:':
                name: didAddOverlayRenderers
                parameters:
                    renderers:
                        type: NSArray<MKOverlayRenderer>
            '-mapView:viewForOverlay:':
                name: getOverlayView
            '-mapView:didAddOverlayViews:':
                name: didAddOverlayViews
                parameters:
                    overlayViews:
                        type: NSArray<MKOverlayView>
            '-mapView:clusterAnnotationForMemberAnnotations:':
                name: getClusterAnnotationForMemberAnnotations
    MKOverlay: # DONE
        methods:
            '-intersectsMapRect:':
                name: intersects
    MKLocalSearchCompleterDelegate:
        methods:
            '-completerDidUpdateResults:completer:':
                name: didUpdateResults
            '-completer:didFailWithError:':
                name: didFailWithError
    MKGeoJSONObject: #since 13.0
        skip_adapter: true

functions:
    # MKCoordinateRegion
    MKCoordinateRegionMake:
        class: MKCoordinateRegion
        name: create
        static: true
        return_type: '@Pointer long'
        visibility: private
    MKCoordinateRegionMakeWithDistance:
        class: MKCoordinateRegion
        name: create
        static: true
        return_type: '@Pointer long'
        visibility: private
    MKCoordinateRegionForMapRect:
        class: MKCoordinateRegion
        name: create
        static: true
        return_type: '@Pointer long'
        visibility: private

    # MKMapPoint
    MKMapPointForCoordinate:
        class: MKMapPoint
        name: create
        static: true
        return_type: '@Pointer long'
        visibility: private
    MKCoordinateForMapPoint:
        class: MKMapPoint
        name: toCoordinate
    MKMetersPerMapPointAtLatitude:
        class: MKMapPoint
        name: getMetersPerMapPoint
        static: true 
    MKMapPointsPerMeterAtLatitude:
        class: MKMapPoint
        name: getMapPointsPerMeter
        static: true
    MKMetersBetweenMapPoints:
        class: MKMapPoint
        name: getMetersBetween
        static: true
    MKMapPointMake:
        class: MKMapPoint
        name: create
        static: true
    MKMapPointEqualToPoint:
        class: MKMapPoint
        name: equalsPoint
    MKStringFromMapPoint:
        class: MKMapPoint
        name: asString

    # MKMapRect
    MKMapRectUnion:
        class: MKMapRect
        name: union
    MKMapRectIntersection:
        class: MKMapRect
        name: intersection
    MKMapRectInset:
        class: MKMapRect
        name: inset
    MKMapRectOffset:
        class: MKMapRect
        name: offset
    MKMapRectDivide:
        class: MKMapRect
        name: divide
    MKMapRectContainsPoint:
        class: MKMapRect
        name: contains
    MKMapRectContainsRect:
        class: MKMapRect
        name: contains
    MKMapRectIntersectsRect:
        class: MKMapRect
        name: intersects
    MKMapRectSpans180thMeridian:
        class: MKMapRect
        name: isSpanning180thMeridian
    MKMapRectRemainder:
        class: MKMapRect
        name: remainder
    MKMapRectEqualToRect:
        class: MKMapRect
        name: equals
    MKMapRectIsNull:
        class: MKMapRect
        name: isNull
    MKMapRectIsEmpty:
        class: MKMapRect
        name: isEmpty
    MKMapRectGet(.*):
        class: MKMapRect
        name: 'get#{g[0]}'
    MKMapRectMake:
        class: MKMapRect
        name: create
        static: true
    MKStringFromMapRect:
        class: MKMapRect
        name: asString

    # MKCoordinateSpan
    MKCoordinateSpanMake:
        class: MKCoordinateSpan
        name: create
        static: true

    # MKOverlayRenderer
    MKRoadWidthAtZoomScale:
        class: MKOverlayRenderer
        name: getRoadWidth

    # MKMapSize
    MKMapSizeMake:
        class: MKMapSize
        name: create
        static: true   
    MKMapSizeEqualToSize:
        class: MKMapSize
        name: equalsSize 
    MKStringFromMapSize:
        class: MKMapSize
        name: asString
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?MK.*):
        class: MapKit
        name: 'Function__#{g[0]}'

values:
    MKMapSize(.*):
        class: MKMapSize
        name: '#{g[0]}'
      
    MKMapRect(.*):
        class: MKMapRect
        name: '#{g[0]}'
        
    MKErrorDomain:
        class: MKError
        name: getClassDomain
        readonly: true
        
    MKLaunchOptions(.*)Key:
        dictionary: MKLaunchOptions
        name: '#{g[0]}'
        type: NSString
        methods:
            DirectionsMode:
                type: MKDirectionsMode
            MapType:
                type: MKMapType
            ShowsTraffic:
                name: showsTraffic
                type: boolean
            MapCenter:
                type: CLLocationCoordinate2D
                hint: Struct<?>
            MapSpan:
                type: MKCoordinateSpan
                hint: Struct<?>
            Camera:
                type: MKMapCamera
    MKLaunchOptionsDirectionsMode(.*):
        enum: MKDirectionsMode
        name: '#{g[0]}'
        type: NSString
    
    MKAnnotationCalloutInfoDidChangeNotification: # Deprecated in favor of KVO notifications
        exclude: true

    MKMapItemTypeIdentifier:
        class: MKMapItem
        name: getTypeIdentifier

    MKMapViewDefaultAnnotationViewReuseIdentifier:
        class: MKMapView
        name: getDefaultAnnotationViewReuseIdentifier

    MKMapViewDefaultClusterAnnotationViewReuseIdentifier:
        class: MKMapView
        name: getDefaultClusterAnnotationViewReuseIdentifier

    MKMapCameraZoomDefault:
        class: MKMapCameraZoomRange
        name: getCameraZoomDefault

    MKPointsOfInterestRequestMaxRadius:
        class: MKPointsOfInterestRequest
        name: getMaxRadius

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?MK.*):
        class: MapKit
        name: 'Value__#{g[0]}'

constants:
    MKFeatureDisplayPriority(.*):
        class: MKFeatureDisplayPriority
        name: '#{g[0]}'
    MKAnnotationViewZPriority(.*):
        class: MKAnnotationViewZPriority
        name: '#{g[0]}'

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?MK.*):
        class: MapKit
        name: 'Constant__#{g[0]}'