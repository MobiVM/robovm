package: org.robovm.apple.corenfc
include: [foundation, dispatch]
library: CoreNFC
framework: CoreNFC
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/CoreNFC.framework/Headers/CoreNFC.h
typedefs: {}

enums:
    NFCReaderError: { nserror: true, prefix: NFC}
    NFCTagType: {}
    NFCTypeNameFormat: {}
    NFCPollingOption: {prefix: NFCPolling}
    NFCNDEFStatus: {}
    NFCMiFareFamily: {prefix: NFCMiFare}
    NFCISO15693RequestFlag: {'NFCISO15693RequestFlag(.*)' : '#{g[0]}', ignore: '^RequestFlag(.*)'} #since 14.0
    NFCISO15693ResponseFlag: {} #since 14.0
    NFCFeliCaPollingRequestCode:  {'NFCFeliCaPollingRequestCode(.*)' : '#{g[0]}', ignore: '^PollingRequestCode(.*)'} #since 14.0
    NFCFeliCaPollingTimeSlot: {'NFCFeliCaPollingTimeSlot(.*)' : '#{g[0]}', ignore: '^PollingTimeSlot(.*)'} #since 14.0
    NFCFeliCaEncryptionId: {'NFCFeliCaEncryptionId(.*)' : '#{g[0]}', ignore: '^EncryptionId(.*)'}
    NFCVASMode: {} #since 13.0
    NFCVASErrorCode: {'NFCVASErrorCode(.*)' : '#{g[0]}', ignore: '^VASErrorCode(.*)'} #since 13.0

    PollingRequestCode: { exclude: true }  # as api changed to NFCFeliCaPollingRequestCode
    PollingTimeSlot: { exclude: true }  # as api changed to NFCFeliCaPollingTimeSlot
    RequestFlag: { exclude: true }  # as api changed to NFCISO15693RequestFlag
    EncryptionId: { exclude: true }  # as api changed to NFCFeliCaEncryptionId
    VASMode: { exclude: true }       # as api changed to NFCVASMode
    VASErrorCode: { exclude: true }  # as api changed to NFCVASErrorCode

categories:
    NSUserActivity: {}

classes:
    NFCISO15693CustomCommandConfiguration: #since 11.0
        methods:
            '-initWithManufacturerCode:customCommandCode:requestParameters:':
                name: init
            '-initWithManufacturerCode:customCommandCode:requestParameters:maximumRetries:retryInterval:':
                name: init
    NFCISO15693ReadMultipleBlocksConfiguration: #since 11.0
        methods:
            '-initWithRange:chunkSize:':
                name: init
            '-initWithRange:chunkSize:maximumRetries:retryInterval:':
                name: init
    NFCISO15693ReaderSession: #since 11.0
        methods:
            '-initWithDelegate:queue:':
                name: init
    NFCNDEFMessage:  #since 11.0
        methods:
            '-initWithNDEFRecords:':
                name: init
            '+ndefMessageWithData:':
                constructor: true
                name: create
    NFCNDEFPayload: #since 11.0
        methods:
            '-initWithFormat:type:identifier:payload:':
                name: init
            '-initWithFormat:type:identifier:payload:chunkSize:':
                name: init
            '-wellKnownTypeTextPayloadWithLocale:':
                name: getWellKnownTypeTextPayload
            '+wellKnownTypeURIPayloadWithString:':
                name: create
                constructor: true
            '+wellKnownTypeURIPayloadWithURL:':
                name: create
                constructor: true
            '+wellKnownTypeTextPayloadWithString:locale:':
                name: create
                constructor: true
            '+wellKnowTypeTextPayloadWithString:locale:':
                exclude: true #seems to be bug/typo in ios13 Beta
    NFCNDEFReaderSession: #since 11.0
        methods:
            '-initWithDelegate:queue:invalidateAfterFirstRead:':
                name: init
            '-connectToTag:completionHandler:':
                name: connectToTag
    NFCReaderSession: {} #since 11.0
    NFCTagCommandConfiguration: {} #since 11.0
    #ios13
    NFCISO7816APDU: #since 13.0
        methods:
            '-initWithInstructionClass:instructionCode:p1Parameter:p2Parameter:data:expectedResponseLength:':
                name: init
            '-initWithData:':
                name: init
    NFCTagReaderSession: #since 13.0
        methods:
            '-initWithPollingOption:delegate:queue:':
                name: init
            '-connectToTag:completionHandler:':
                name: connectToTag
    NFCVASCommandConfiguration: #since 13.0
        methods:
            '-initWithVASMode:passTypeIdentifier:url:':
                name: init
    NFCVASReaderSession: #since 13.0
        methods:
            '-initWithVASCommandConfigurations:delegate:queue:':
                name: init
    NFCVASResponse: {} #since 13.0

protocols:
    NFCISO15693Tag: #since 11.0
        skip_adapter: true
        methods:
            '-sendCustomCommandWithConfiguration:completionHandler:':
                name: sendCustomCommand
            '-readMultipleBlocksWithConfiguration:completionHandler:':
                name: readMultipleBlocks
            '-stayQuietWithCompletionHandler:':
                name: stayQuiet
            '-readSingleBlockWithRequestFlags:blockNumber:completionHandler:':
                name: readSingleBlock
            '-writeSingleBlockWithRequestFlags:blockNumber:dataBlock:completionHandler:':
                name: writeSingleBlock
            '-lockBlockWithRequestFlags:blockNumber:completionHandler:':
                name: lockBlock
            '-readMultipleBlocksWithRequestFlags:blockRange:completionHandler:':
                name: readMultipleBlocks
            '-writeMultipleBlocksWithRequestFlags:blockRange:dataBlocks:completionHandler:':
                name: writeMultipleBlocks
            '-selectWithRequestFlags:completionHandler:':
                name: selectWithRequestFlags
            '-resetToReadyWithRequestFlags:completionHandler:':
                name: resetToReady
            '-writeAFIWithRequestFlag:afi:completionHandler:':
                name: writeAFI
            '-lockAFIWithRequestFlag:completionHandler:':
                name: lockAFI
            '-writeDSFIDWithRequestFlag:dsfid:completionHandler:':
                name: writeDSFID
            '-lockDFSIDWithRequestFlag:completionHandler:':
                name: lockDFSID
            '-getSystemInfoWithRequestFlag:completionHandler:':
                name: getSystemInfo
            '-getMultipleBlockSecurityStatusWithRequestFlag:blockRange:completionHandler:':
                name: getMultipleBlockSecurityStatus
            '-customCommandWithRequestFlag:customCommandCode:customRequestParameters:completionHandler:':
                name: customCommand
            '-extendedReadSingleBlockWithRequestFlags:blockNumber:completionHandler:':
                name: extendedReadSingleBlock
            '-extendedWriteSingleBlockWithRequestFlags:blockNumber:dataBlock:completionHandler:':
                name: extendedWriteSingleBlock
            '-extendedLockBlockWithRequestFlags:blockNumber:completionHandler:':
                name: extendedLockBlock
            '-extendedReadMultipleBlocksWithRequestFlags:blockRange:completionHandler:':
                name: extendedReadMultipleBlocks
            '-lockDSFIDWithRequestFlag:completionHandler:':
                name: lockDSFID
            '-getSystemInfoAndUIDWithRequestFlag:completionHandler:':
                name: getSystemInfoAndUID
            '-fastReadMultipleBlocksWithRequestFlag:blockRange:completionHandler:':
                name: fastReadMultipleBlocks
            '-extendedWriteMultipleBlocksWithRequestFlags:blockRange:dataBlocks:completionHandler:':
                name: extendedWriteMultipleBlocks
            '-authenticateWithRequestFlags:cryptoSuiteIdentifier:message:completionHandler:':
                name: authenticate
            '-keyUpdateWithRequestFlags:keyIdentifier:message:completionHandler:':
                name: keyUpdate
            '-challengeWithRequestFlags:cryptoSuiteIdentifier:message:completionHandler:':
                name: challenge
            '-readBufferWithRequestFlags:completionHandler:':
                name: readBuffer
            '-extendedGetMultipleBlockSecurityStatusWithRequestFlag:blockRange:completionHandler:':
                name: extendedGetMultipleBlockSecurityStatus
            '-extendedFastReadMultipleBlocksWithRequestFlag:blockRange:completionHandler:':
                name: extendedFastReadMultipleBlocks
            '-sendRequestWithFlag:commandCode:data:completionHandler:':
                name: sendRequest
    NFCNDEFReaderSessionDelegate: #since 11.0
        methods:
            '-readerSession:didInvalidateWithError:':
                name: didInvalidateWithError
            '-readerSession:didDetectNDEFs:':
                name: didDetectNDEFs
            '-readerSession:didDetectTags:':
                name: didDetectTags
    NFCReaderSession: #since 11.0
        name: NFCReaderSessionProtocol
        methods:
            '-invalidateSessionWithErrorMessage:':
                name: invalidateSession
    NFCReaderSessionDelegate: #since 11.0
        methods:
            '-readerSession:didDetectTags:':
                name: didDetectTags
            '-readerSession:didInvalidateWithError:':
                name: didInvalidateWithError
    NFCTag: {} #since 11.0
    #ios13
    NFCFeliCaTag: #since 13.0
        skip_adapter: true
        methods:
            '-pollingWithSystemCode:requestCode:timeSlot:completionHandler:':
                name: pollingUsingSystemCode
            '-requestServiceWithNodeCodeList:completionHandler:':
                name: requestService
            '-requestResponseWithCompletionHandler:':
                name: requestResponse
            '-readWithoutEncryptionWithServiceCodeList:blockList:completionHandler:':
                name: readWithoutEncryption
            '-writeWithoutEncryptionWithServiceCodeList:blockList:blockData:completionHandler:':
                name: writeWithoutEncryption
            '-requestSystemCodeWithCompletionHandler:':
                name: requestSystemCode
            '-requestServiceV2WithNodeCodeList:completionHandler:':
                name: requestServiceV2
            '-requestSpecificationVersionWithCompletionHandler:':
                name: requestSpecificationVersion
            '-resetModeWithCompletionHandler:':
                name: resetMode
            '-sendFeliCaCommandPacket:completionHandler:':
                name: sendFeliCaCommandPacket
    NFCISO7816Tag: #since 13.0
        skip_adapter: true
        methods:
            '-sendCommandAPDU:completionHandler:':
                name: sendCommandAPDU
    NFCMiFareTag: #since 13.0
        skip_adapter: true
        methods:
            '-sendMiFareCommand:completionHandler:':
                name: sendMiFareCommand
            '-sendMiFareISO7816Command:completionHandler:':
                name: sendMiFareISO7816Command
    NFCNDEFTag: #since 13.0
        skip_adapter: true
        methods:
            '-queryNDEFStatusWithCompletionHandler:':
                name: queryNDEFStatus
            '-readNDEFWithCompletionHandler:':
                name: readNDEF
            '-writeNDEF:completionHandler:':
                name: writeNDEF
            '-writeLockWithCompletionHandler:':
                name: writeLock
    NFCTagReaderSessionDelegate: #since 13.0
        methods:
            '-tagReaderSession:didInvalidateWithError:':
                name: didInvalidate
            '-tagReaderSessionDidBecomeActive:':
                name: didBecomeActive
            '-tagReaderSession:didDetectTags:':
                name: didDetectTags
                parameters:
                    tags:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NFCTag.AsListMarshaller.class) List<NFCTag>'
    NFCVASReaderSessionDelegate: #since 13.0
        methods:
            '-readerSession:didInvalidateWithError:':
                name: didInvalidate
            '-readerSession:didReceiveVASResponses:':
                name: didReceiveVASResponses

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (NFC.*):
        class: CoreNFC
        name: 'Function__#{g[0]}'

values:
    NFCErrorDomain:
        class: NFCReaderError
        name: getClassDomain

    NFCISO15693TagResponseErrorKey:
        class: NFCReaderError
        name: ISO15693TagResponseErrorKey
        type: NSString
    NFCTagResponseUnexpectedLengthErrorKey:
        class: NFCReaderError
        name: TagResponseUnexpectedLengthErrorKey
        type: NSString

    # Make sure we don't miss any values if new ones are introduced in a later version
    (NFC.*):
        class: CoreNFC
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (NFC.*):
        class: CoreNFC
        name: 'Constant__#{g[0]}'
