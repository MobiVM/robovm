/* This file was generated from java/net/PlainSocketImpl.java and is
 * licensed under the same terms. The copyright and license information for
 * java/net/PlainSocketImpl.java follows.
 *
 * Copyright (c) 2007, 2008, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class java_net_PlainSocketImpl */

#ifndef _Included_java_net_PlainSocketImpl
#define _Included_java_net_PlainSocketImpl
#ifdef __cplusplus
extern "C" {
#endif
#undef java_net_PlainSocketImpl_SHUT_RD
#define java_net_PlainSocketImpl_SHUT_RD 0L
#undef java_net_PlainSocketImpl_SHUT_WR
#define java_net_PlainSocketImpl_SHUT_WR 1L
/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketCreate
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketCreate
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketConnect
 * Signature: (Ljava/net/InetAddress;II)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketConnect
  (JNIEnv *, jobject, jobject, jint, jint);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketBind
 * Signature: (Ljava/net/InetAddress;I)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketBind
  (JNIEnv *, jobject, jobject, jint);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketListen
 * Signature: (I)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketListen
  (JNIEnv *, jobject, jint);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketAccept
 * Signature: (Ljava/net/SocketImpl;)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketAccept
  (JNIEnv *, jobject, jobject);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketAvailable
 * Signature: ()I
 */
JNIEXPORT jint JNICALL PlainSocketImpl_socketAvailable
  (JNIEnv *, jobject);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketClose0
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketClose0
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketShutdown
 * Signature: (I)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketShutdown
  (JNIEnv *, jobject, jint);


/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketSetOption
 * Signature: (IZLjava/lang/Object;)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketSetOption
  (JNIEnv *, jobject, jint, jboolean, jobject);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketGetOption
 * Signature: (ILjava/lang/Object;)I
 */
JNIEXPORT jint JNICALL PlainSocketImpl_socketGetOption
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     java_net_PlainSocketImpl
 * Method:    socketSendUrgentData
 * Signature: (I)V
 */
JNIEXPORT void JNICALL PlainSocketImpl_socketSendUrgentData
  (JNIEnv *, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
