cmake_minimum_required(VERSION 3.20.0)


# The minimum Mac OS X version needed by apps built by RoboVM
set(MACOSX_MIN_VERSION 10.9)
# The minimum Mac OS X version needed by apps built by RoboVM
set(MACOSX_ARM64_MIN_VERSION 13.0)
# The minimum iOS version needed by apps built by RoboVM
set(IOS_MIN_VERSION 8.0)
# The minimum m1 Arm64 iOS simulator version needed by apps built by RoboVM
set(IOS_ARM64_SIM_MIN_VERSION 14.0)


project(build)
include(CheckCCompilerFlag)
include(ExternalProject)
include(${CMAKE_SOURCE_DIR}/MergeStaticLibObjectFiles.cmake)

enable_testing()

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "debug")
endif()


if(NOT OS)
  message(FATAL_ERROR "OS not set!")
endif()
if(NOT ARCH)
  message(FATAL_ERROR "ARCH not set")
endif()

set(64_BIT NO)
if(OS STREQUAL "linux")
  set(LINUX YES)
  set(OS_FAMILY linux)
  if (ARCH STREQUAL "x86_64")
    set(X86_64 YES)
    set(64_BIT YES)
    set(CARCH x86_64)
  else()
    message(FATAL_ERROR "Unsupported ARCH: ${ARCH}")
  endif()
elseif(OS STREQUAL "macosx")
  set(MACOSX YES)
  set(DARWIN YES)
  set(OS_FAMILY darwin)
  if (ARCH STREQUAL "x86_64")
    set(X86_64 YES)
    set(64_BIT YES)
    set(CTARGET "x86_64-apple-macos${MACOSX_MIN_VERSION}")
    set(CARCH x86_64)
  elseif (ARCH STREQUAL "arm64")
    set(ARM YES)
    set(64_BIT YES)
    set(MACOSX_MIN_VERSION ${MACOSX_ARM64_MIN_VERSION})
    set(CTARGET "arm64-apple-macos${MACOSX_MIN_VERSION}")
    set(CARCH arm64)
  else()
    message(FATAL_ERROR "Unsupported ARCH: ${ARCH}")
  endif()
  set(CPLATFORM_MIN_VERSION ${MACOSX_MIN_VERSION})
  set(CPLATFORM macos)
elseif(OS STREQUAL "ios")
  set(IOS YES)
  set(DARWIN YES)
  set(OS_FAMILY darwin)
  if (ARCH STREQUAL "x86_64-simulator")
    set(X86_64 YES)
    set(64_BIT YES)
    set(CTARGET "x86_64-apple-ios${IOS_MIN_VERSION}")
    set(CARCH x86_64)
    set(CPLATFORM ios-simulator)
  elseif (ARCH STREQUAL "arm64-simulator")
    set(ARM64 YES)
    set(64_BIT YES)
    set(IOS_MIN_VERSION ${IOS_ARM64_SIM_MIN_VERSION})
    set(CTARGET "arm64-apple-ios${IOS_MIN_VERSION}-simulator")
    set(CARCH arm64)
    set(CPLATFORM ios-simulator)
  elseif (ARCH STREQUAL "arm64")
    set(ARM YES)
    set(ARM64 YES)
    set(64_BIT YES)
    set(CTARGET "arm64-apple-ios${IOS_MIN_VERSION}")
    set(CARCH arm64)
    set(CPLATFORM ios)
  elseif (ARCH STREQUAL "thumbv7")
    set(ARM YES)
    set(THUMB YES)
    set(THUMBV7 YES)
    set(CTARGET "armv7-apple-ios${IOS_MIN_VERSION}")
    set(CARCH armv7)
    set(CPLATFORM ios)
  else()
    message(FATAL_ERROR "Unsupported ARCH: ${ARCH}")
  endif()
  set(CPLATFORM_MIN_VERSION ${IOS_MIN_VERSION})
else()
  message(FATAL_ERROR "Unsupported OS: ${OS}")
endif()


if(DARWIN)
  if(NOT SYSROOT)
    exec_program(xcode-select ARGS --print-path OUTPUT_VARIABLE XCODE_PATH)
    if(MACOSX)
      set(SYSROOT "${XCODE_PATH}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk")
      if(NOT IS_DIRECTORY ${SYSROOT})
        message(FATAL_ERROR "Failed to locate MacOSX SDK")
      endif()
    elseif(IOS)
      if(ARCH MATCHES "^(x86_64-simulator|arm64-simulator)$")
        set(SYSROOT "${XCODE_PATH}/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk")
        if(NOT IS_DIRECTORY ${SYSROOT})
          message(FATAL_ERROR "Failed to locate iPhoneSimulator SDK")
        endif()
      else()
        set(SYSROOT "${XCODE_PATH}/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk")
        if(NOT IS_DIRECTORY ${SYSROOT})
          message(FATAL_ERROR "Failed to locate iPhoneOS SDK")
        endif()
      endif()
    endif()
  endif()
  set(CPLATFORM_MIN_VERSION ${IOS_MIN_VERSION})
else()
  message(FATAL_ERROR "Unsupported OS: ${OS}")
endif()

# Set up global C and C++ compiler flags
set(C_FLAGS "${C_FLAGS} -std=gnu99 -fPIC")
set(CXX_FLAGS "${CXX_FLAGS} -std=gnu++11 -fPIC")
set(C_CXX_FLAGS "${C_CXX_FLAGS} -Wall -fPIC")
if(NOT IOS)
  # -fdata-sections -ffunction-sections conflicts with -fembed-bitcode
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -fdata-sections -ffunction-sections")
endif()
if(CTARGET)
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -target ${CTARGET}")
elseif(64_BIT)
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -m64")
else()
  set(C_CXX_FLAGS "${C_CXX_FLAGS} -m32")
endif()
if(SYSROOT)
  set(CMAKE_OSX_SYSROOT "${SYSROOT}")
endif()
if(IOS)
  set(CMAKE_OSX_DEPLOYMENT_TARGET "") #reset variable for compat with SDK 10.12, see issue #48
  if (ARM64 OR THUMBV7)
    set(C_CXX_FLAGS "${C_CXX_FLAGS} -fembed-bitcode")
  endif()
endif()

# Linker flags
set(LD_FLAGS "${LD_FLAGS} -fPIC")
if(CTARGET)
  set(LD_FLAGS "${LD_FLAGS} -target ${CTARGET}")
elseif(64_BIT)
  set(LD_FLAGS "${LD_FLAGS} -m64")
else()
  set(LD_FLAGS "${LD_FLAGS} -m32")
endif()

set(CMAKE_C_FLAGS_RELEASE "-Os -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-Os -DNDEBUG")

set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${C_CXX_FLAGS} ${C_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${C_CXX_FLAGS} ${CXX_FLAGS}")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${C_CXX_FLAGS} ${C_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${C_CXX_FLAGS} ${CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${LD_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${LD_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${LD_FLAGS}")

# Assembler flags
set(ASM_FLAGS "${ASM_FLAGS} -fPIC")
if(CARCH)
  set(ASM_FLAGS "${ASM_FLAGS} -c -arch ${CARCH}")
elseif(64_BIT)
  set(ASM_FLAGS "${ASM_FLAGS} -c -m64")
else()
  set(ASM_FLAGS "${ASM_FLAGS} -c -m32")
endif()
if (CMAKE_BUILD_TYPE STREQUAL "debug")
  set(ASM_FLAGS "${ASM_FLAGS} -g")
endif()
if(MACOSX)
  set(ASM_FLAGS "${ASM_FLAGS} -target ${CTARGET}")
endif()
if(IOS)
  set(ASM_FLAGS "${ASM_FLAGS} -target ${CTARGET}")
  if (ARCH STREQUAL "arm64" OR ARCH STREQUAL "thumbv7")
    set(ASM_FLAGS "${ASM_FLAGS} -fembed-bitcode")
  endif()
endif()
set(CMAKE_ASM_COMPILE_OBJECT "${CMAKE_C_COMPILER} ${ASM_FLAGS} -o <OBJECT> <SOURCE>")
enable_language(ASM)

if(LINUX)
  add_definitions(-DLINUX)
elseif(DARWIN)
  if(MACOSX)
    add_definitions(-DMACOSX)
  else()
    add_definitions(-DIOS)
  endif()
  add_definitions(-DDARWIN)
endif()


set(INSTALL_DIR ${CMAKE_SOURCE_DIR}/target/binaries/${OS}/${ARCH})

# at this point convert remove "-simulator" suffix as it will conflict as sub-modules
if (ARCH STREQUAL "arm64-simulator")
  set(ARCH arm64)
  add_definitions(-DRVM_SIMULATOR)
elseif (ARCH STREQUAL "x86_64-simulator")
  set(ARCH x86_64)
  add_definitions(-DRVM_SIMULATOR)
endif()

if (ARCH STREQUAL "x86_64")
  add_definitions(-DRVM_X86_64)
elseif (ARCH STREQUAL "thumbv7")
  add_definitions(-DRVM_THUMBV7)
elseif (ARCH STREQUAL "arm64")
  add_definitions(-DRVM_ARM64)
endif()

set(LIB_SUFFIX ".a")
if (CMAKE_BUILD_TYPE STREQUAL "debug")
  set(LIB_SUFFIX "-dbg.a")
endif()

message(STATUS "ARCH: ${ARCH}")
message(STATUS "OS: ${OS}")
message(STATUS "SYSROOT: ${SYSROOT}")
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
message(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
message(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_C_FLAGS_DEBUG: ${CMAKE_C_FLAGS_DEBUG}")
message(STATUS "CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "CMAKE_C_FLAGS_RELEASE: ${CMAKE_C_FLAGS_RELEASE}")
message(STATUS "CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")
message(STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")
message(STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}")
message(STATUS "CMAKE_MODULE_LINKER_FLAGS: ${CMAKE_MODULE_LINKER_FLAGS}")
message(STATUS "CMAKE_OSX_SYSROOT: ${CMAKE_OSX_SYSROOT}")

# Ugly hardcoding. This is the offset in bytes of the gcDescriptor member in the Class struct from core/include/robovm/types.h
# Should be the value of sizeof(void*)*3 for the target platform.
if(64_BIT)
  set(EXTGC_MARK_DESCR_OFFSET 24)
else()
  set(EXTGC_MARK_DESCR_OFFSET 12)
endif()

set(EXTGC_C_FLAGS "${C_CXX_FLAGS} -DGC_DISABLE_INCREMENTAL -DGC_DISCOVER_TASK_THREADS -DGC_FORCE_UNMAP_ON_GCOLLECT -DMARK_DESCR_OFFSET=${EXTGC_MARK_DESCR_OFFSET}")
# disable errors on clang clang-1500.3.9.4
set(EXTGC_C_FLAGS "${EXTGC_C_FLAGS} -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion")
set(EXTGC_LD_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
if(DARWIN)
  set(EXTGC_C_FLAGS "${EXTGC_C_FLAGS} -DNO_DYLD_BIND_FULLY_IMAGE --sysroot=${SYSROOT}")
  set(EXTGC_LD_FLAGS "${EXTGC_LD_FLAGS} --sysroot=${SYSROOT}")
endif()

set(EXTGC_PARAMS  "--enable-shared=no --enable-munmap=1 --enable-parallel-mark=yes")
if (CMAKE_BUILD_TYPE STREQUAL "debug")
  set(EXTGC_C_FLAGS "${EXTGC_C_FLAGS} -g")
  set(EXTGC_PARAMS "${EXTGC_PARAMS} --enable-gc-debug=yes")
endif()
if (IOS OR MACOSX)
  if (ARCH STREQUAL "x86_64")
    set(EXT_HOST --host=x86_64-apple-darwin7)
  elseif (ARCH STREQUAL "arm64-simulator")
    set(EXT_HOST --host=aarch64-apple-darwin7)
  elseif (ARCH STREQUAL "arm64")
    set(EXT_HOST --host=aarch64-apple-darwin7)
  elseif (ARCH STREQUAL "thumbv7")
      set(EXT_HOST --host=arm-apple-darwin7)
  endif()
endif()
ExternalProject_Add(libatomic_ops
  GIT_REPOSITORY https://github.com/ivmai/libatomic_ops.git
  GIT_TAG 4e22546e8a161b6bab93e43c115a22151daf45c5
  UPDATE_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND ""
  BUILD_IN_SOURCE 1
)
ExternalProject_Add(extgc
  DEPENDS libatomic_ops
  GIT_REPOSITORY https://github.com/mobivm/bdwgc.git
  GIT_TAG c1e985028101ec710937b6c721d9f79941a15bce
  UPDATE_COMMAND ""
  PATCH_COMMAND bash -c "rm -rf libatomic_ops && ln -s ../../../libatomic_ops-prefix/src/libatomic_ops libatomic_ops"
  CONFIGURE_COMMAND bash -c "CC=${CMAKE_C_COMPILER} CFLAGS='${EXTGC_C_FLAGS}' LDFLAGS='${EXTGC_LD_FLAGS}' ./configure ${EXT_HOST} ${EXTGC_PARAMS} --prefix=${CMAKE_BINARY_DIR}/gc"
  BUILD_IN_SOURCE 1
)
install(FILES ${CMAKE_BINARY_DIR}/gc/lib/libgc.a DESTINATION ${INSTALL_DIR} RENAME libgc${LIB_SUFFIX})

add_subdirectory(core/src)
add_subdirectory(debug/src)
add_subdirectory(bc/src)
add_subdirectory(rt)
add_subdirectory(frameworksupport/src)
